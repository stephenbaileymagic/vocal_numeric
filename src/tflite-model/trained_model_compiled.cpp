/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 18.05.2021 01:13:26

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 7888;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[47];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[23];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.051489371806383133, } };
const TfArray<1, int> quant0_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 16, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[64] = { -11235, -5280, 24, -3847, -6813, -2333, -33, -7397, -10011, -8446, -2632, -9951, -1270, -7227, -3511, -6197, -2078, -3993, 1721, -6162, -6930, -7277, 975, -8370, -8638, -2310, -9183, -10514, -10291, -7946, -9717, -12067, -8385, -8021, -1229, -10297, -6319, -5941, -10655, -3233, -9960, -9413, -12390, -4187, -6502, -5076, -354, -8265, -9530, -4610, -4468, -620, -10864, -2834, -14385, -6322, -355, 2033, -5023, -11125, -654, -5449, 995, -6397, };
const TfArray<1, int> tensor_dimension2 = { 1, { 64 } };
const TfArray<64, float> quant2_scale = { 64, { 0.00016205935389734805, 0.00017407569976057857, 0.00023345928639173508, 0.00025832676328718662, 0.00017037476936820894, 0.00026830891147255898, 0.00027176790172234178, 0.00017429122817702591, 0.00014983864093665034, 0.00019008910749107599, 0.00036531549994833767, 0.00015830148186068982, 0.0003120714973192662, 0.00020055317145306617, 0.00030081646400503814, 0.00016267737373709679, 0.00026497532962821424, 0.00022487851674668491, 0.00023507447622250766, 0.00019003625493496656, 0.00019612863252405077, 0.00015385216102004051, 0.00034808885538950562, 0.00018117879517376423, 0.000151187734445557, 0.00025125895626842976, 0.00015197422180790454, 0.00015086353232618421, 0.00014913696213625371, 0.00012844403681810945, 0.00016037643945310265, 0.00011865533451782539, 0.00017778725305106491, 0.00014963385183364153, 0.00054278207244351506, 0.000158961585839279, 0.00021229230333119631, 0.00022008686210028827, 0.00016359903384000063, 0.000367294269381091, 0.00014187404303811491, 0.00014868238940834999, 0.00011800928768934682, 0.0001730118237901479, 0.00015271481242962182, 0.00022645348508376628, 0.00034351987414993346, 0.00016829316155053675, 0.00015255529433488846, 0.00021350837778300047, 0.00023427123960573226, 0.00028948322869837284, 0.0001374622224830091, 0.00026070041349157691, 0.00011325271043460816, 0.00017754232976585627, 0.00042455171933397651, 0.00025031319819390774, 0.00021816845401190221, 0.00012449271162040532, 0.00037218749639578164, 0.00021455842943396419, 0.00020241097081452608, 0.00016247756138909608, } };
const TfArray<64, int> quant2_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[12] = { 376, 4, 146, -316, 1117, -566, -120, -403, 710, -206, -44, -644, };
const TfArray<1, int> tensor_dimension3 = { 1, { 12 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0011676358990371227, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[32] = { -489, 152, -1486, -1762, -1343, -203, 2568, 463, 1770, 627, -1514, 1976, -785, 115, -603, 1586, -1359, 806, 1083, -133, 20, 812, -144, 727, -285, -149, 502, -1615, -627, 1281, -761, -1014, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 0.00043779629049822688, 0.00050591572653502226, 0.00011429664300521836, 0.00034672897891141474, 0.00028059867327101529, 0.00036230986006557941, 0.00040441978489980102, 0.00039178482256829739, 0.00034750517806969583, 0.00045814778422936797, 0.00033769541187211871, 0.00045265079825185239, 0.00037777979741804302, 0.00043020086013711989, 0.00043936850852333009, 0.00058429111959412694, 0.00039538866258226335, 0.00038707934436388314, 0.00034896083525381982, 0.00029743139748461545, 0.00052772159688174725, 0.00032752560218796134, 0.00032926237327046692, 0.00043857714626938105, 0.00043249144800938666, 0.00060911016771569848, 0.00043311814079061151, 9.6394680440425873e-05, 0.00051517895190045238, 0.00032363468199037015, 0.00035346281947568059, 0.00036341900704428554, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[32] = { -244, -510, -573, -752, -133, -697, -189, -483, -691, -275, -919, -314, -306, 338, 243, -661, -281, -307, -151, 582, -557, -166, -1690, -328, 221, -506, 107, -279, -398, -404, -946, -699, };
const TfArray<1, int> tensor_dimension5 = { 1, { 32 } };
const TfArray<32, float> quant5_scale = { 32, { 0.00069318234454840422, 0.0013892572605982423, 0.0010156434727832675, 0.00063855201005935669, 0.0011594478273764253, 0.00093978061340749264, 0.0007599347154609859, 0.0008384532411582768, 0.00075477937934920192, 0.00090963463298976421, 0.00072545348666608334, 0.00082215521251782775, 0.0010603379923850298, 0.00080330425407737494, 0.00084295013220980763, 0.00074155029142275453, 0.00069982465356588364, 0.00092889234656468034, 0.0008823866955935955, 0.00079290027497336268, 0.00052854511886835098, 0.00088668015087023377, 0.00059107650304213166, 0.00081895408220589161, 0.00077667261939495802, 0.00085578230209648609, 0.00090662972070276737, 0.00073595659341663122, 0.001185936969704926, 0.0009859566343948245, 0.00063214614056050777, 0.0010540412040427327, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[16] = { 113, 327, 436, 323, 199, 332, 663, 442, 265, 380, 247, 608, 943, 394, 229, 41, };
const TfArray<1, int> tensor_dimension6 = { 1, { 16 } };
const TfArray<16, float> quant6_scale = { 16, { 0.0012263894313946366, 0.0010113908210769296, 0.00072421575896441936, 0.0012326918076723814, 0.00067340186797082424, 0.00063816370675340295, 0.0008009031880646944, 0.00088862323900684714, 0.0013796624261885881, 0.00083903491031378508, 0.00072940636891871691, 0.00074977148324251175, 0.00071252172347158194, 0.0010290457867085934, 0.00096035504247993231, 0.00092581589706242085, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[8] = { 994, 1079, 214, 2311, 1210, 1413, 1285, 720, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0010447924723848701, 0.00066333077847957611, 0.0008935831137932837, 0.0007246775203384459, 0.0008337590261362493, 0.00059626688016578555, 0.00094628502847626805, 0.00096366723300889134, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int8_t tensor_data8[12*16] = { 
  97, -30, 19, 1, -53, -4, -75, -13, -7, -54, -6, 29, -35, -23, -12, 15, 
  -22, 33, 49, -29, -58, 4, 13, 2, -16, 4, 13, -27, -11, -23, -4, 2, 
  -37, 16, 22, -35, 40, 72, -27, -49, -8, -31, -23, -58, -7, -13, 5, 5, 
  -3, 70, -47, 15, -76, -8, 31, 48, 58, -15, 30, 12, -60, -8, -10, -28, 
  -30, 26, -52, 68, -17, -16, 0, -127, -10, 9, -12, 67, 63, -102, 17, 23, 
  -18, 68, -45, -33, -56, 68, 25, 3, -3, -28, -5, -22, -22, -12, -7, 42, 
  -8, 17, 10, -56, 42, -53, -4, 16, 12, -19, -30, -3, 19, -40, 73, -9, 
  5, -58, 106, -3, 22, -68, -10, -28, 0, -24, -41, 45, 26, -42, -28, -17, 
  45, 90, 11, -81, 14, -69, -99, -5, 36, -16, -22, 17, 19, -50, -38, 1, 
  53, -4, -35, -61, 88, 6, -26, -23, 9, -60, -25, 6, 14, -16, -9, 24, 
  43, 72, 17, 18, 28, 37, 50, -26, 26, -16, -16, -39, 4, -27, -7, -5, 
  -4, -24, -15, 17, 69, -4, 32, -33, 94, -31, -8, -2, -18, -6, -19, -56, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 12,16 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0058332150802016258, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[64*1*5*13] = { 
  /* [0][0][][] */ -94,49,-18,-35,-12,57,-120,-39,99,52,13,-20,41, -19,46,-37,24,69,-57,-105,66,34,33,-15,30,30, -22,51,-41,59,50,-105,-17,65,-27,20,27,33,-4, 26,3,-65,127,-51,-93,65,-50,-3,66,-23,23,35, 50,-32,29,14,-7,-103,37,-36,15,-31,2,15,-36, 
  /* [1][0][][] */ 13,-39,-21,9,62,-6,17,-21,82,-54,54,-63,50, 67,-53,10,12,92,-47,43,-21,72,-41,0,-13,18, 66,-127,37,-41,104,-56,36,-31,63,-4,34,-10,-2, -18,31,-18,6,31,-51,9,0,-26,42,-34,-33,15, -39,-9,-82,-3,-30,43,42,-26,-44,112,-62,35,-16, 
  /* [2][0][][] */ -18,11,105,60,73,-49,-1,-16,-21,23,-30,2,4, -33,-18,60,25,33,42,62,15,18,-28,-22,8,26, 14,5,30,3,44,15,8,-18,26,-1,-26,20,-18, -26,-22,-26,46,60,35,38,23,-5,-17,-54,-7,-19, -127,50,59,16,-42,-60,-56,-50,-32,-10,16,-54,25, 
  /* [3][0][][] */ -38,5,21,-43,8,12,10,9,27,-39,-20,-11,-37, -42,29,63,-32,-43,35,-27,-21,20,35,-30,3,24, -44,47,127,61,-37,26,10,-16,18,-2,9,-23,12, 3,-94,-123,-18,-46,-51,28,31,4,24,-16,14,3, 24,-28,-21,100,19,-21,21,-3,-17,-7,41,9,-16, 
  /* [4][0][][] */ -4,47,19,-29,126,-8,-75,28,-39,-47,21,-11,-21, -23,4,-10,22,99,-24,-12,50,-32,-79,64,42,-52, -25,-10,-25,66,66,-76,39,77,-85,-8,30,-44,-35, -3,-58,-10,34,15,-30,46,38,-86,20,86,-60,-2, 9,-86,-13,87,-67,21,73,-79,-75,127,-31,-74,87, 
  /* [5][0][][] */ 20,-90,-60,-20,25,28,57,17,1,53,-11,-6,-1, 52,-82,-52,-14,10,15,9,-33,-19,4,-50,-3,37, -26,-47,-22,4,19,-64,19,-20,-11,3,11,-12,-22, -102,-14,-28,36,27,15,28,16,-9,1,55,4,-20, -127,54,67,110,59,-7,-52,-37,-36,29,-36,-20,-32, 
  /* [6][0][][] */ -127,49,-45,-24,16,-1,-16,-44,-12,-21,-42,6,-27, -119,36,25,-16,17,-13,11,1,2,13,14,44,5, -71,65,29,13,32,23,11,-6,16,-1,-11,-4,-24, -76,39,51,-4,-31,17,44,-19,-16,-32,2,-34,-2, -86,67,16,47,-46,18,-13,-10,9,2,0,8,2, 
  /* [7][0][][] */ -74,-14,-3,-26,63,-43,107,-29,-48,-64,68,-91,88, -101,30,25,-20,22,-37,54,43,-37,-68,18,-59,58, -85,-15,48,28,71,-12,55,-50,28,-57,-31,-14,34, -86,17,54,37,-27,5,44,-59,13,38,-26,-16,86, -57,-6,127,70,-95,31,-73,-7,-17,39,-36,89,33, 
  /* [8][0][][] */ 6,1,-19,92,-13,-107,118,43,-66,-43,87,-36,14, 56,-55,35,31,20,-92,22,127,-77,-97,85,-21,-39, 16,-54,-18,-7,96,-76,-67,115,36,-82,2,97,-34, -14,10,-49,-17,39,18,-61,68,29,-64,-13,93,12, -54,53,-6,-32,66,31,-109,15,68,-73,-82,7,-33, 
  /* [9][0][][] */ 11,127,-78,76,-10,-84,-22,13,-48,60,-10,22,-4, -13,118,-45,61,28,-108,-20,43,-3,39,-1,4,16, -71,90,-17,29,12,-57,-20,-34,38,-3,-37,7,10, -76,64,14,50,25,-14,17,28,9,-35,-45,29,-5, -38,-23,13,24,-26,-7,-49,-5,33,-44,-8,-19,-12, 
  /* [10][0][][] */ -105,50,16,12,2,-15,-2,-12,-13,-4,10,6,-7, -127,44,-17,25,-6,4,6,6,-2,9,4,-6,11, -16,17,-53,6,0,-10,-22,3,0,0,-2,9,4, 88,-25,19,5,11,-14,-1,-5,2,3,4,6,7, 93,-73,22,-21,-19,4,2,-15,31,-2,-11,-3,8, 
  /* [11][0][][] */ 62,72,-127,-8,61,9,18,83,-34,-60,1,-43,42, 55,43,-121,13,16,23,21,29,-47,-31,1,-13,43, 88,-8,-83,45,19,12,27,44,-74,-14,-11,-5,21, 46,-3,-28,27,-15,16,35,-7,-17,-21,-27,23,-12, 18,-16,-25,21,14,15,8,7,-21,-18,2,-6,3, 
  /* [12][0][][] */ 113,9,-10,3,-3,17,9,12,5,2,3,3,2, 2,-5,32,-8,-10,-12,-16,-5,0,-13,10,0,7, -67,-81,53,3,10,14,1,-16,-3,-9,-1,5,-1, -127,-77,83,20,2,12,7,-5,4,11,-2,14,8, -52,125,-104,-45,-12,-35,-17,22,6,-14,11,-17,2, 
  /* [13][0][][] */ 112,-121,127,-58,-76,35,-25,6,24,2,-9,13,16, 54,-67,78,-16,-68,18,10,-22,-14,-13,14,-6,-24, -26,11,8,6,-61,3,-5,11,32,15,-9,33,-12, -56,19,12,61,-11,6,-12,-20,20,-35,-15,24,-5, -88,20,-12,62,-4,18,2,3,24,6,-15,18,3, 
  /* [14][0][][] */ 4,78,15,-31,-2,-18,10,-50,-27,-2,18,22,17, 2,39,34,-14,-21,19,3,-3,-12,9,-12,4,-17, 23,17,6,-33,-1,30,32,-5,-15,18,16,0,-4, 21,-39,-6,-67,66,7,-7,-31,17,29,-27,-33,1, -29,-127,-30,19,33,-5,-5,8,51,-2,-9,-24,13, 
  /* [15][0][][] */ -112,-71,-41,41,7,71,-9,62,17,-48,-9,34,-76, -59,-43,-16,1,-106,20,-16,126,-22,-18,-7,-31,-10, -26,-42,-44,-77,-106,20,43,6,-10,5,-69,-101,46, -12,-78,-13,-3,-52,45,-2,48,-46,37,-26,-96,62, 5,-104,-30,5,-127,51,35,31,17,-8,-72,-27,38, 
  /* [16][0][][] */ -34,-52,9,-10,11,7,27,-14,25,-14,26,-25,13, -8,45,-36,-52,24,14,3,-15,46,-14,-54,16,1, -4,3,-33,-20,48,12,19,-2,26,-5,-5,33,-45, 23,1,-16,-46,32,-21,15,19,21,-31,-12,58,-4, 12,-127,-18,-38,40,19,-2,-3,33,-15,-22,26,-13, 
  /* [17][0][][] */ 12,35,-8,22,-127,-25,56,-24,27,19,31,44,-32, 28,-7,-68,-2,0,2,44,-58,13,21,8,-22,-25, -3,4,-81,2,70,26,-10,-31,-21,0,-59,-19,49, -35,-7,-60,-19,30,-14,17,17,-30,28,-39,9,-6, -37,-57,-109,37,47,-42,14,67,3,-25,-34,2,-12, 
  /* [18][0][][] */ -68,10,29,76,14,-13,21,-19,-2,-26,14,16,25, -55,-15,7,-37,25,-12,-13,18,-2,14,-2,3,25, -30,-14,102,-73,13,-2,-5,38,50,21,47,0,-7, -77,-86,31,-56,-47,11,-64,-54,29,7,-44,23,18, -56,-127,-29,95,-36,-16,4,-11,-58,-17,1,28,-12, 
  /* [19][0][][] */ 11,82,-46,-33,21,-22,12,10,-22,3,6,-30,-29, 43,127,6,21,13,62,-11,-23,-59,-5,40,-25,-14, 62,45,-18,6,37,63,-3,-27,-10,2,47,-53,-17, 21,-26,-1,72,87,57,7,-28,4,-14,20,-43,25, -22,-5,-34,56,85,2,-5,3,24,-31,-32,-45,4, 
  /* [20][0][][] */ -98,0,70,35,41,-52,-39,-1,-16,25,40,1,-10, -66,73,66,57,-65,-65,25,-2,57,-21,14,-8,4, 29,-11,-32,-44,-23,-7,74,63,27,-48,-20,-11,25, 95,-56,-127,-77,-25,51,37,47,-44,-46,-25,-12,33, 9,-28,-51,-17,26,41,-22,19,-11,11,19,-17,-1, 
  /* [21][0][][] */ 57,-36,-23,20,-127,-17,79,13,-107,62,28,-89,94, -6,15,-17,31,-87,-64,41,22,-16,39,98,-97,-16, -23,16,37,64,-23,-85,33,-11,77,3,-17,28,-22, -59,-8,6,89,34,-83,-22,13,-23,-19,47,-34,-46, -15,0,11,119,43,-76,4,-56,90,4,-17,-18,-9, 
  /* [22][0][][] */ -41,50,-22,-7,-22,24,14,14,11,10,-8,22,7, -66,36,-23,39,5,1,-61,-7,-6,0,-17,-28,11, -68,1,30,5,2,14,44,-7,19,-1,-31,-11,34, -48,-26,27,10,30,-44,-8,35,4,-20,15,11,-3, -2,-127,9,-19,14,-15,6,-42,14,25,20,12,26, 
  /* [23][0][][] */ -53,18,5,-49,54,1,-69,27,39,-59,-23,46,-6, 2,68,-46,-6,25,-14,-26,40,38,-127,25,21,-67, -19,-19,-22,-1,28,-33,-26,37,7,-73,11,54,-86, 20,3,-68,9,8,-67,34,49,-50,-48,84,-16,-51, 72,-19,-41,67,-33,-34,83,0,-26,-33,27,7,-30, 
  /* [24][0][][] */ 39,-42,-103,83,94,-10,-66,60,0,-7,-6,25,-9, 28,6,-65,17,74,-1,-75,-59,31,-124,-20,3,-8, 26,-27,-40,-70,83,86,-35,-80,57,50,-33,-55,-1, 3,7,-20,-87,1,71,7,-127,-2,87,40,-39,-21, -86,25,52,-96,-4,86,40,-88,-113,60,45,0,-57, 
  /* [25][0][][] */ -64,3,-73,-19,-16,-18,29,13,-22,-12,5,7,-19, -94,20,-38,3,74,19,-47,-16,2,-39,12,-2,-26, -113,52,33,28,54,26,-26,-26,-10,0,-20,-11,23, -21,3,48,15,16,-11,-73,-41,18,0,2,13,-13, 58,0,30,-50,-127,-66,9,46,44,32,15,10,-35, 
  /* [26][0][][] */ 8,-38,54,-38,-65,86,43,-32,21,6,-84,11,-45, 11,-32,-18,23,-96,16,77,-115,12,61,-81,35,35, -2,18,-25,65,-92,-30,98,-39,-77,96,2,-36,84, 24,11,-34,47,-49,-35,68,2,-91,8,46,-106,72, 2,40,-41,42,89,-101,71,85,-127,-25,109,-82,-4, 
  /* [27][0][][] */ 13,127,-50,64,15,-97,-10,-10,-58,49,-43,-110,87, 22,22,-44,85,-63,-25,97,-63,-34,78,-89,2,7, 10,-47,27,74,-104,62,-3,-105,31,-12,-98,65,-106, -25,-77,56,1,2,95,-20,-57,42,-76,32,32,-41, -58,-64,46,-103,20,107,-51,36,13,-45,39,-45,24, 
  /* [28][0][][] */ 77,17,10,-24,-121,-6,18,40,3,-3,-12,-21,-31, 74,21,13,-26,-127,20,31,16,42,-4,26,15,-38, 74,17,-18,18,-67,80,-3,-38,2,-10,47,52,15, 50,23,8,33,-53,87,6,-49,23,-2,8,25,13, 21,-4,-19,28,-8,5,46,1,-15,-15,-2,18,-13, 
  /* [29][0][][] */ 46,-50,91,12,-20,-63,38,-125,94,35,-46,-1,2, 53,-65,112,25,1,42,17,-35,75,-93,-42,-46,-68, 54,-54,66,-62,119,21,2,-5,69,-46,7,-2,60, 1,-119,127,-40,100,69,-47,91,-6,-57,-39,-18,-49, -28,-57,83,-12,97,4,-81,109,-37,10,22,-41,-13, 
  /* [30][0][][] */ -69,36,-66,31,55,64,48,41,-2,-45,6,19,-12, -31,13,4,-44,-41,32,69,27,-39,-48,-11,18,25, 48,4,34,-69,-102,6,54,58,24,-29,-9,-21,9, 25,-31,-19,-14,-111,-48,33,-15,14,29,9,-54,-21, 45,15,76,-88,-127,1,-20,0,50,71,35,12,-50, 
  /* [31][0][][] */ 81,-58,-102,3,-16,-55,11,-25,-1,56,2,37,-30, 120,56,-107,-35,48,-30,-82,-15,-21,30,-1,5,-42, 74,127,-94,11,24,-94,-83,11,60,23,-2,72,11, -2,59,-70,34,108,-67,-76,42,77,-11,-45,17,47, 36,107,-78,63,65,-7,-37,94,59,23,-98,1,55, 
  /* [32][0][][] */ -29,-49,-18,-44,-18,84,-19,1,19,59,-72,3,47, -22,96,-20,-96,-32,92,-13,24,110,-53,-87,47,32, -47,10,-15,-49,-21,61,-38,16,48,-82,-27,59,7, -127,-36,-31,-5,-5,-5,-39,14,-1,-92,16,43,-17, -116,-10,-55,8,13,27,13,39,-12,-79,1,27,-61, 
  /* [33][0][][] */ 77,-58,-15,-11,23,45,-57,0,-6,36,-15,-25,34, 113,-78,-3,29,44,8,52,40,-33,78,-55,44,-22, 127,-88,15,-28,96,-14,6,-17,-55,35,-12,22,-20, 95,-23,21,54,-1,-43,-47,-29,-63,-34,-60,-20,-39, 33,39,18,78,-53,1,-79,-35,-14,0,-7,-47,-30, 
  /* [34][0][][] */ -71,29,4,6,-11,-5,5,5,-4,5,6,6,8, -127,6,-24,0,18,14,4,-8,2,-13,-3,-10,-9, -20,-24,-1,-14,3,-1,4,9,6,-6,3,6,5, 56,-19,-9,3,-1,6,2,0,-3,10,-6,-9,2, 49,9,16,9,-2,-3,-7,11,4,5,0,3,11, 
  /* [35][0][][] */ -112,55,78,32,21,2,-40,-31,52,-43,14,12,19, -127,53,63,17,-99,-112,8,59,2,-25,-20,-35,-38, -1,34,-29,-102,-60,18,39,-4,-74,43,-54,4,13, 66,-79,-87,-80,-9,60,43,-7,-63,43,-47,32,-29, 76,-78,-62,-71,60,77,41,-63,-89,53,-40,38,-20, 
  /* [36][0][][] */ 39,127,66,86,-48,-18,-9,-10,-15,-37,-3,-33,-11, 30,75,76,112,-19,-21,17,-12,-25,-23,-4,9,-49, 24,14,35,6,6,-35,-37,16,1,-25,21,-10,-2, 21,-28,38,-27,-27,2,-18,26,-29,40,-4,21,3, -4,-44,-11,-18,-8,-14,-28,-3,-17,21,-16,5,-40, 
  /* [37][0][][] */ -11,39,-127,15,48,-61,-3,68,-25,-30,28,33,-21, 11,-22,-50,56,-20,-34,51,-2,-61,49,-15,-15,18, 2,-80,38,3,-61,0,56,-47,0,7,-18,13,45, -23,-65,86,-15,-49,34,-9,-34,60,23,-10,-7,31, -65,-31,90,-21,-35,51,-33,-16,53,14,14,8,46, 
  /* [38][0][][] */ -7,-2,-55,-11,73,-19,1,69,127,-88,-28,23,73, 2,38,-59,-74,85,53,-32,54,87,12,-62,-8,93, 8,23,-22,-54,31,37,-26,-20,71,22,-11,-5,32, -66,49,20,-90,32,26,-35,-16,-6,68,14,-3,27, -101,73,28,-103,13,21,30,-50,32,26,4,-17,-45, 
  /* [39][0][][] */ -14,23,-3,10,15,8,-1,-9,2,-7,12,-2,13, -10,-50,-20,3,27,15,-8,-18,-4,6,8,-11,-3, -36,-109,2,-5,34,2,13,-10,17,6,-4,4,12, -2,127,23,9,-16,-21,-23,7,5,3,-13,-20,-4, 43,37,-35,-19,-33,-34,-21,-7,-3,25,-7,-8,12, 
  /* [40][0][][] */ -59,49,48,7,-29,15,-28,12,8,-41,-12,-53,-26, -3,90,79,42,64,12,-83,-44,-51,-12,-48,-17,-59, 1,127,96,-30,56,1,-36,45,22,57,26,23,-9, -7,93,77,-72,-2,20,-44,22,-19,-12,56,-20,-2, -58,66,-2,-86,-33,9,-12,-45,57,40,23,-31,-13, 
  /* [41][0][][] */ -87,112,-5,-14,80,-66,-32,22,4,9,46,25,34, -9,87,-16,49,-55,-110,-59,39,35,-21,19,-27,28, 32,109,9,-24,-127,-62,64,67,32,33,23,-32,24, -9,46,14,-22,-109,25,80,44,7,-28,-76,-15,-50, -19,-20,-61,-64,-39,40,73,-22,55,-4,-48,-8,20, 
  /* [42][0][][] */ 59,-17,119,-127,-9,43,-11,-69,51,12,62,-16,18, 15,-38,78,-120,27,-39,-8,-89,1,8,90,23,-16, 36,-7,67,-40,28,-46,-21,-37,-38,-7,18,28,14, 74,33,107,22,-73,52,-81,-14,-63,-25,34,50,-18, 74,67,28,49,-70,45,-70,-36,14,-28,-17,16,35, 
  /* [43][0][][] */ -71,41,46,70,69,74,-52,51,35,25,-3,-8,-5, -66,40,26,75,36,58,-50,48,27,-5,42,6,-57, -10,70,102,124,68,76,-49,77,-10,-4,-12,-41,-14, -108,25,105,75,-2,62,-89,35,6,-47,65,-35,34, -127,-19,37,83,19,31,50,48,-24,-35,1,-42,-16, 
  /* [44][0][][] */ 25,70,44,-15,127,18,-32,-86,-32,-22,77,25,10, -34,-14,72,18,73,-63,22,-67,7,-16,97,-19,99, -28,66,13,29,82,-18,-11,-44,5,62,59,6,9, -37,22,81,26,105,-1,39,-12,22,35,84,-28,64, -43,49,90,43,56,-25,-17,-11,-4,60,66,-99,125, 
  /* [45][0][][] */ -27,-79,1,69,-18,18,-50,-16,-38,25,13,-31,20, -4,-70,-4,105,-23,9,-4,-51,-2,52,-30,-21,47, 1,-127,-30,64,-4,33,6,-40,18,21,-18,-12,-6, 7,34,-26,-35,43,52,6,14,1,6,0,-9,-1, 21,87,-36,-85,31,70,-36,19,-21,-6,2,-15,34, 
  /* [46][0][][] */ -49,-23,35,-9,-2,-12,-7,13,-13,-14,5,17,10, -47,-44,-4,22,-25,-18,1,-24,9,-5,-15,0,-11, -66,-127,26,39,-6,-24,6,-10,-6,-14,-4,-7,-8, -72,-30,-36,-25,0,9,-26,-15,-11,7,-5,-24,7, -35,29,-42,-74,44,27,-1,-13,44,-22,-28,-2,-8, 
  /* [47][0][][] */ -58,4,14,1,-86,60,-20,-11,15,9,-27,-32,10, -7,36,16,43,-127,88,-68,-3,123,-36,62,-6,-1, -18,31,81,41,-106,51,-60,-17,91,-84,67,-31,19, -2,-38,44,-46,-37,-34,5,-14,22,-46,-33,-7,-7, -40,-44,-2,-43,45,-64,-10,38,-23,37,-23,-4,7, 
  /* [48][0][][] */ -16,9,59,-43,6,20,-60,30,-21,38,29,14,32, -36,-8,59,-108,68,8,-53,37,-54,48,7,24,11, -73,-11,76,-127,34,-29,-53,87,-28,12,-3,-6,10, -61,16,89,-93,47,-1,-61,106,-36,10,-24,10,40, -82,-7,77,-50,27,0,-56,32,-43,-48,-7,8,-45, 
  /* [49][0][][] */ -3,-110,-81,-80,-8,34,22,26,-23,-19,-9,21,-3, -36,-80,-31,-84,23,-7,59,43,2,-23,-42,-9,-18, -75,18,40,9,25,-46,11,22,11,-2,-19,-23,-7, -83,127,64,93,-21,11,-28,-7,-5,-21,-17,-6,35, -27,108,86,122,-37,16,-44,28,-3,-29,4,-17,26, 
  /* [50][0][][] */ -127,36,16,-4,33,8,-12,-56,13,0,26,30,8, -77,75,39,31,28,32,-38,0,6,-11,-7,17,17, -37,107,-32,71,27,-21,-36,-19,9,7,14,18,-49, 4,79,-38,28,35,-31,-24,-20,-30,22,13,46,21, 16,53,-4,48,-21,-12,32,-29,3,41,24,5,46, 
  /* [51][0][][] */ -108,40,13,-6,44,4,4,-33,-38,-25,-3,16,-29, -127,3,-26,5,32,29,43,21,6,27,-2,-1,18, -106,5,-47,-25,26,10,12,18,-33,-24,40,14,9, -38,-41,-68,-51,-9,32,12,18,-15,3,-29,-3,0, 25,-57,20,3,-76,22,-13,12,21,12,-7,14,22, 
  /* [52][0][][] */ 13,71,9,26,-51,17,-14,-16,-28,0,9,-2,4, 9,10,-23,71,-41,-24,-15,13,53,103,-33,52,-23, 75,47,-53,0,-64,-77,-14,-12,80,33,4,27,5, 85,9,-1,36,-89,-127,25,-47,82,56,23,15,-1, 83,20,9,-6,-69,-85,-6,-19,59,62,16,25,-6, 
  /* [53][0][][] */ -84,-36,61,8,-56,-18,19,-4,-17,-26,21,-2,-25, -78,24,-42,7,8,-18,-76,-7,20,-3,-15,5,22, -5,-83,-127,27,37,-16,11,-8,-2,35,-23,-2,-30, 32,31,66,0,11,-54,-7,-10,-21,-47,41,-29,9, 14,79,107,-7,77,35,17,-5,-19,-25,55,-16,2, 
  /* [54][0][][] */ 16,116,-48,18,96,-82,-2,6,-21,-31,42,0,38, -11,90,-49,-48,-46,-96,-36,-3,-34,-38,99,49,2, 5,126,66,-124,-50,-6,80,-17,-82,-15,39,67,-7, -33,90,-36,-90,-28,48,75,-30,-84,45,24,43,-20, -66,42,37,-127,8,101,65,-93,-51,68,34,1,-40, 
  /* [55][0][][] */ 4,-16,74,-42,32,16,2,-12,55,51,14,6,35, 26,-110,71,-91,-6,34,-1,-36,-18,-9,63,-74,86, -4,-53,30,-7,-53,-9,44,16,-56,51,51,-62,79, -57,14,-32,111,-9,-62,51,64,-47,1,67,-35,-3, -53,30,-127,44,-62,-61,-4,12,9,-46,-34,52,-60, 
  /* [56][0][][] */ -31,-10,-10,-9,18,-4,0,-6,20,-6,3,1,-10, -84,18,-33,10,14,12,8,11,17,21,15,17,3, -102,7,-30,-21,22,14,24,-16,-5,8,-4,-27,17, -127,-29,-10,1,6,25,-12,-4,12,4,-27,-30,-12, -76,-7,-29,-4,-24,36,23,-11,4,-5,-1,-14,-9, 
  /* [57][0][][] */ -127,-31,20,-5,33,63,-25,22,9,-26,-36,12,-8, -117,-29,-48,25,-33,17,23,-17,8,-46,3,-4,2, -94,-10,-37,-60,-6,-22,-20,-26,-29,70,41,33,-17, -101,-9,-31,27,25,-82,39,9,5,14,-33,27,13, -64,-74,1,3,54,38,-29,-25,18,7,29,-55,16, 
  /* [58][0][][] */ 40,122,93,127,-77,106,-41,-33,13,16,-23,38,4, 25,3,51,93,0,-12,-3,-22,-50,-19,-8,20,-18, -33,-40,-30,69,43,-29,100,45,-64,27,-5,-8,-41, -63,-70,-69,20,50,-32,24,6,-11,-27,16,18,13, -82,-22,-71,-3,51,-14,16,11,-29,21,8,-3,-17, 
  /* [59][0][][] */ 52,56,-97,-127,-39,108,108,22,-33,-25,9,-12,7, 102,114,-103,-125,-32,106,24,37,-70,-44,113,93,17, 73,53,-21,-59,-31,37,100,53,-15,-56,16,-32,17, -43,5,24,-71,-7,12,-17,32,24,11,29,-37,-15, -82,-13,88,-69,53,-27,-31,1,32,2,9,-12,-17, 
  /* [60][0][][] */ 1,-26,-25,-6,36,-7,-20,-11,26,-2,-18,14,18, 10,14,7,28,29,17,13,23,-18,-10,7,3,-6, -10,-24,20,-24,6,-4,31,23,16,-11,5,20,5, -31,-127,-28,-28,-32,-24,-25,-31,9,35,4,15,10, -57,53,26,53,51,30,35,30,-1,-31,-2,7,-7, 
  /* [61][0][][] */ -61,51,55,21,-7,30,51,-71,12,14,62,-5,-16, -76,46,9,-18,-69,22,34,-34,-10,20,34,-20,-73, -68,39,-13,-23,-6,48,-29,-47,2,68,1,-26,-8, -45,45,-5,-62,49,46,-64,-41,22,5,-34,-33,-8, 72,-21,-127,54,66,-75,-35,100,48,-36,7,-33,31, 
  /* [62][0][][] */ -39,-67,19,55,12,4,-40,12,-13,12,19,-1,-37, -73,-71,-4,-9,-36,-6,-50,-55,-61,-49,2,4,-20, -69,-59,-19,71,56,76,99,93,69,-35,14,78,43, -127,-13,55,21,11,69,-6,-4,-5,-30,-10,-22,-53, -110,-26,-4,16,121,-65,-19,-66,-48,32,-51,-42,-17, 
  /* [63][0][][] */ 76,27,61,95,21,-127,-82,5,12,4,44,84,-51, 45,23,5,14,2,-52,-59,-38,-8,16,-16,10,13, 18,-29,81,12,26,-6,-68,-101,-39,-47,-6,-10,19, -29,0,45,11,-1,-12,-57,-61,1,-11,27,26,38, -29,6,54,59,71,28,-79,-99,-34,-72,-52,15,-54, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 64,1,5,13 } };
const TfArray<64, float> quant9_scale = { 64, { 0.0031474330462515354, 0.0033808082807809114, 0.0045341257937252522, 0.0050170891918241978, 0.0033089308999478817, 0.0052109570242464542, 0.0052781356498599052, 0.0033849943429231644, 0.0029100887477397919, 0.0036918125115334988, 0.0070949690416455269, 0.0030744497198611498, 0.0060608913190662861, 0.0038950401358306408, 0.005842301994562149, 0.0031594359315931797, 0.0051462138071656227, 0.0043674744665622711, 0.004565495066344738, 0.0036907859612256289, 0.0038091090973466635, 0.0029880371876060963, 0.0067604021169245243, 0.0035187609028071165, 0.0029362901113927364, 0.0048798215575516224, 0.0029515649657696486, 0.0029299936722964048, 0.0028964611701667309, 0.0024945738259702921, 0.0031147485133260489, 0.0023044627159833908, 0.0034528921823948622, 0.0029061113018542528, 0.010541632771492004, 0.0030872698407620192, 0.0041230316273868084, 0.0042744134552776814, 0.0031773359514772892, 0.0071333996020257473, 0.0027554044499993324, 0.0028876326978206635, 0.0022919154725968838, 0.0033601461909711361, 0.00296594831161201, 0.0043980628252029419, 0.0066716657020151615, 0.0032685028854757547, 0.0029628502670675516, 0.0041466495022177696, 0.0045498949475586414, 0.0056221936829388142, 0.0026697204448282719, 0.0050631887279450893, 0.0021995357237756252, 0.0034481354523450136, 0.0082454243674874306, 0.0048614535480737686, 0.0042371549643576145, 0.002417833311483264, 0.00722843362018466, 0.0041670431382954121, 0.0039311214350163937, 0.0031555553432554007, } };
const TfArray<64, int> quant9_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int8_t tensor_data10[32*1*5*64] = { 
  /* [0][0][][] */ -38,-16,3,2,7,-4,0,-17,26,1,-8,-62,-15,-43,-17,-20,9,17,-10,-44,-22,-43,-2,-24,-38,18,-61,-12,3,-25,14,-88,2,-62,-3,-15,-119,-11,8,5,-60,-31,-31,-8,-14,-27,-9,-9,-20,-2,5,4,-49,-10,-113,-16,7,-4,29,-46,7,-6,3,16, -15,16,-1,-11,-28,4,-3,7,5,18,20,-49,-13,0,5,-6,10,19,1,-32,21,-38,10,-35,-8,21,-62,-20,33,29,35,-73,-25,-47,6,-5,-73,2,19,-6,-59,15,-12,1,-51,13,1,6,-32,3,-8,5,8,-2,-53,-14,11,0,35,-21,2,-5,5,-7, -10,-2,-21,4,-30,-15,-23,-8,6,-1,15,-10,27,39,2,7,20,-20,11,-24,27,-37,10,-66,-3,13,-54,-33,30,6,3,-59,-9,-22,30,7,-40,0,-18,-8,-46,-14,24,-54,-61,-14,-1,14,10,-17,-4,0,14,0,-84,19,8,-12,-16,3,14,-16,-16,-2, 3,26,-10,11,-30,-49,-57,-1,8,-47,58,-8,-7,36,-28,14,2,-44,24,15,3,-7,22,-81,32,-3,-7,-46,31,7,18,-11,13,26,42,2,-21,-12,-72,2,-22,-17,29,-41,-31,-20,-19,10,7,-9,-41,25,32,-5,-67,12,-34,-27,-58,28,29,-58,-67,2, -43,-18,-7,13,-64,-55,-86,-11,-2,-85,23,2,-35,30,-51,40,-30,-89,11,-16,-36,-29,-45,-127,32,-55,-31,-28,27,10,51,-29,32,38,-9,-20,13,-12,-13,-6,15,-27,42,25,-4,-53,-54,26,6,-5,-83,-18,0,14,-51,-4,-40,-53,-17,30,2,-92,-51,46, 
  /* [1][0][][] */ -10,-30,4,31,-1,-11,17,3,-23,-8,34,-15,27,10,1,2,3,6,2,-8,31,0,7,-7,-25,6,-8,-23,-17,-9,-9,-34,18,-38,30,5,-2,-8,1,28,15,19,-17,-6,-4,4,4,15,17,8,0,5,-12,44,-13,-6,10,3,10,-12,11,32,0,-4, -12,-19,0,31,6,-27,12,-2,7,-17,21,-3,15,-19,-4,-9,11,-8,6,-12,22,-16,9,4,-13,11,-6,11,-1,-5,8,-21,-11,-14,32,22,5,6,-37,24,2,-22,-3,-16,-22,3,-16,11,-8,15,8,17,-9,21,0,-2,-4,-7,0,-21,-8,18,-6,-7, 9,10,5,29,1,-5,-27,-51,5,-43,34,2,3,-8,8,-5,6,-9,-14,5,24,-15,-21,10,-2,1,-6,7,-8,-3,-2,6,-19,33,25,20,7,25,2,9,-41,-23,-22,-13,-38,28,-26,-14,-45,-5,8,-5,-9,28,-10,-6,-50,-20,-5,0,6,10,-27,-12, -8,5,14,8,-13,2,-15,-26,-3,-22,48,16,30,17,11,-2,3,2,-11,13,-2,0,-16,-6,5,-3,0,6,-14,-1,-55,8,-3,23,46,-5,-8,8,-1,0,-43,-10,-75,-14,12,11,-39,-30,-30,5,-5,-32,-25,18,-40,-7,-22,-36,6,8,11,3,-11,11, -15,-3,-1,31,-5,-3,3,3,-9,-10,44,1,32,-13,1,9,-2,-4,4,5,4,7,2,-4,5,-1,-18,1,-43,-4,-42,-2,11,-6,12,-9,-6,-15,1,21,-51,-18,-127,-11,-2,-4,-12,14,-14,-1,-11,-3,-60,-5,-47,-8,6,-2,-4,-3,3,-22,1,-10, 
  /* [2][0][][] */ -70,-73,20,-96,-26,-88,-5,-67,-83,-98,4,-7,-7,-50,-24,-18,-3,-92,5,-34,16,-49,26,-45,14,-18,-2,-1,-28,-22,-13,-74,21,-30,-5,-8,-50,-80,50,-40,-5,8,-113,-58,-5,25,18,35,-50,-34,-21,-46,-1,-46,-53,-84,26,-60,-11,-1,37,-33,-33,-65, -59,-70,-40,-80,-30,-11,-18,9,-22,-127,21,-97,-71,17,-87,-12,-21,-34,-10,-8,-25,-103,-70,-42,-29,-12,-21,2,-15,-68,-29,-97,-4,-6,-43,-33,-17,-29,10,-100,-56,39,-61,-26,58,-38,-11,-69,-24,-101,-42,-21,-72,-35,38,-63,-1,-38,-38,-50,-11,-39,16,-32, 5,2,-45,76,32,-18,25,-38,8,-48,-11,-59,-26,-69,-33,-60,-30,-49,-71,-76,-47,-49,-24,-17,-37,-49,-47,-21,-60,-91,-48,7,-27,-77,-26,-55,-63,13,-9,-35,-13,-18,-118,25,33,-97,-35,-64,-16,2,-3,39,-67,-105,-11,-25,-50,-56,-18,10,-82,-64,-1,-39, -10,-34,-72,7,-29,-34,7,-34,4,0,0,-75,-44,-8,-5,-6,-40,-71,-56,-77,-33,10,-19,10,-14,-66,-59,-31,-19,-9,14,15,14,-16,-22,-13,-49,-41,-47,-52,6,10,-40,-20,38,10,-9,-21,21,-67,-53,-66,-48,-36,-17,-58,5,-67,-28,-8,-68,-40,20,-25, -54,13,-9,-55,-38,-3,-86,-6,-15,-53,22,-42,-77,-62,-1,-34,-31,-40,15,-38,-20,-40,5,-25,-44,-21,-64,-70,-13,-64,-49,-33,-39,10,-64,-60,1,-20,11,-34,-27,-17,-37,-5,-12,3,-19,-27,-54,-13,-35,-73,-7,-51,-10,-72,-25,-66,-25,44,-4,-14,-50,10, 
  /* [3][0][][] */ 37,-39,-39,-90,-67,-74,24,36,-51,24,11,11,-20,-109,50,-24,10,17,-98,60,4,-49,-40,-3,-30,21,-77,49,22,-26,25,13,-30,-72,-36,30,43,12,-31,32,21,41,2,-75,-12,-13,-47,2,-22,32,73,-30,28,-37,27,-30,-67,-49,-127,17,-110,-11,-96,18, 48,25,-52,-58,56,5,-3,-58,-4,41,9,0,-31,-78,18,40,10,20,-95,24,-6,-122,-5,-2,-21,3,-92,21,27,30,-1,15,-13,6,-35,37,12,-26,-26,38,-15,24,-8,-31,-63,14,-36,23,24,-36,2,24,12,-21,23,-3,29,19,-91,22,-42,31,-16,-26, 36,34,-36,-38,27,17,-29,-14,-57,-40,-18,10,-66,-83,2,28,5,8,-56,-33,2,-58,17,8,-8,16,-92,-7,4,17,-25,3,14,29,11,22,-2,15,14,-18,-24,-61,12,-3,13,-8,-79,-7,27,3,-19,13,-23,-45,26,-9,34,-9,-83,13,-14,-10,3,18, 9,-21,-51,-35,24,-18,-40,30,-2,-34,1,-1,-47,-35,-26,-4,20,-74,-45,-31,-67,21,8,0,-23,5,-72,-16,-8,-11,-35,-14,31,38,15,53,-16,21,40,6,-24,-91,3,2,0,-19,-19,8,-1,49,-26,-4,-3,6,-19,-16,0,11,-9,4,-4,-41,-20,18, 6,-20,5,-46,-19,37,-10,7,74,37,-17,-24,-16,-18,-1,6,-27,-59,-51,-1,-17,20,-36,-1,-23,16,-53,-56,-28,37,-70,14,-31,68,-26,-54,24,-12,-17,-17,-1,-92,-4,22,23,-68,12,-17,-37,55,-22,-5,-24,20,-90,-59,-20,-30,33,-11,-21,-62,5,23, 
  /* [4][0][][] */ -49,-31,1,-42,5,40,3,48,-40,-55,-21,28,-11,-23,-84,46,-15,-50,3,-80,-18,-5,-24,3,-31,5,0,-2,-38,-44,-27,-17,-4,-21,39,14,-94,5,-79,13,-31,21,-20,-7,-22,-31,41,-47,11,51,59,3,-73,33,-35,-39,14,10,8,-67,9,-34,22,-24, -7,-91,3,-14,-27,14,-1,17,24,-47,-20,-47,-36,-34,-31,-23,-68,-36,-31,52,-35,-14,-23,0,-53,-6,-13,-56,-78,-75,-36,-39,-30,-79,-3,-18,61,32,-32,24,35,-8,9,12,5,-41,2,-3,-13,35,33,-30,-36,30,-34,-47,-10,-16,32,-106,9,19,-1,1, 43,-47,27,29,-11,40,10,43,-14,1,11,-60,-108,-71,42,-78,-17,0,-44,55,21,13,-4,29,-43,15,-9,-24,-21,-52,15,-88,-22,-54,-9,3,52,-28,-89,-11,4,57,-41,26,44,-31,-71,39,-31,72,28,-62,2,41,23,-23,-70,-68,42,-63,-55,-22,-1,-10, -36,39,46,41,8,-10,-12,42,17,-50,-34,-23,-52,-127,48,32,-20,30,-41,-3,57,-12,-1,31,-22,22,1,23,-11,-5,-2,-25,14,-2,-57,36,26,-35,-34,-13,21,44,-45,15,38,-33,-103,18,-50,95,9,-75,-21,-26,-5,-19,-14,-93,34,-27,-64,3,-25,-22, -3,17,1,7,-6,4,-2,101,43,-65,-30,2,-56,-63,36,39,27,68,0,5,24,-11,3,13,-18,-44,5,25,-25,33,-20,19,37,51,-43,53,-7,18,10,-89,-69,12,12,3,27,-33,-87,-37,26,41,-31,-31,-68,-36,-26,7,26,-33,16,17,-55,3,-32,-18, 
  /* [5][0][][] */ -56,19,-18,-11,-45,-7,10,17,41,-12,11,17,-6,-120,1,-10,8,-14,-24,6,-15,-28,-13,-58,41,12,-56,-53,-17,-36,32,4,-32,0,9,10,6,-56,31,11,46,9,-7,-9,30,0,0,14,22,14,6,4,28,15,28,-73,12,-19,0,63,-27,21,22,-13, -86,37,-17,-30,-101,4,0,39,-57,11,26,-16,-42,-31,36,-7,-13,-21,-41,-7,-25,-91,-66,-89,41,23,-41,-107,-16,-66,46,14,-3,13,-3,17,14,-122,20,44,23,2,9,-43,-4,-8,-34,22,29,13,6,3,26,-4,-6,-18,-26,-30,-61,31,-73,21,-44,-10, 5,-8,-47,-44,-127,-56,12,27,-35,-2,-22,-7,-69,-25,19,-20,7,-4,-32,-8,-3,-103,-40,-69,-22,-31,-77,-101,-1,-18,14,19,-5,-2,-57,11,-4,-94,-1,35,13,35,20,-69,-34,-20,9,11,28,7,-26,-51,18,-43,44,-63,-80,-32,-69,12,-86,21,-90,-26, 49,43,-16,-43,6,-38,38,14,-71,14,-27,-10,-24,-41,42,21,4,16,-30,8,18,-77,8,-31,-32,-10,-66,-61,1,1,40,9,29,-11,-42,33,-39,-47,-19,-10,15,31,-6,19,-16,-44,7,13,-9,-22,-12,-13,14,-36,25,-40,14,-23,-35,10,-2,33,37,-50, 62,21,13,-38,12,-12,-3,11,-21,1,3,-5,-24,-57,18,-13,26,26,-32,-23,-33,-36,20,-20,-16,0,-37,-65,1,55,-69,26,10,9,10,18,-25,-20,16,-31,5,-5,18,27,-28,-67,-10,-9,6,-20,7,11,23,-45,18,-2,42,7,-16,-2,32,20,2,-8, 
  /* [6][0][][] */ 8,8,3,7,-10,1,-4,10,12,-3,6,3,-20,-35,-21,16,26,6,15,3,-15,17,19,-11,14,15,33,18,-75,-23,39,-42,12,-57,9,9,5,6,23,-24,-25,-20,-37,-5,46,-17,-8,-5,17,-34,-6,10,-35,-1,-32,3,-1,2,18,-10,-8,3,15,14, 26,-19,10,-13,5,4,0,0,-21,3,4,-43,4,-25,-18,-3,-23,21,12,-51,-48,5,0,-7,9,-9,-11,0,-89,3,-26,-77,2,-14,-21,-34,-16,-17,-5,-49,-64,-23,-53,5,20,-1,-6,-7,-9,-14,0,-3,-5,6,-56,0,-15,11,2,-11,-6,-24,16,7, -20,-10,24,-14,-12,25,-5,7,-7,2,-22,-74,20,-23,-54,22,1,9,23,-56,-2,13,31,-13,-35,8,-11,-1,-86,-11,-13,-36,-14,0,-31,-20,-58,5,-24,5,-23,-29,-27,4,16,17,26,-38,4,-60,-16,4,12,-15,-51,-7,3,4,-10,-45,12,17,3,13, -12,-41,-13,3,16,-12,-14,-20,3,13,-40,-32,2,-24,-14,-5,5,22,-1,15,13,2,5,5,-15,-28,-17,-19,-60,9,-9,-1,3,-20,-25,5,-93,-4,-7,6,-75,-38,-30,-29,-29,20,1,-44,-11,-68,-30,-7,-61,9,-19,-41,-6,12,-11,-25,16,6,10,-3, 20,0,0,4,35,11,-14,-7,-30,-31,-41,15,26,-44,35,1,15,-5,19,76,10,16,35,21,-11,-16,-36,-37,-4,41,-4,4,52,-4,-41,-11,-127,2,22,-30,-106,-29,-39,-41,-23,-36,38,-71,3,-33,-44,5,-69,-21,-4,12,-12,6,-13,22,-5,-1,31,-17, 
  /* [7][0][][] */ -23,-15,-10,-37,-2,3,-15,-29,-23,-39,7,-39,-28,0,-10,8,22,-20,-1,-7,-4,-47,17,45,10,25,-85,-32,-47,27,-5,-3,2,-45,28,-2,-76,-14,-19,-18,-98,-39,-52,-14,-8,21,15,-66,-32,-20,8,6,-86,17,-42,1,18,8,-47,-13,-5,-36,15,-25, -42,3,-7,-40,-9,-27,-67,-38,-17,-32,22,-3,23,-35,9,-11,-3,-54,9,-16,15,-18,18,-1,0,-8,17,-48,-60,21,-14,-36,12,-11,9,-13,-74,-5,1,6,-127,-89,-7,-47,12,6,-9,-52,-8,-62,-36,2,-86,17,-70,19,-65,9,-33,7,17,-6,-25,9, -54,7,14,11,3,18,-116,-57,4,-9,12,-38,33,-14,10,-13,-7,-42,-1,5,-2,51,12,-4,-13,-24,16,-39,-54,22,-36,5,-24,1,-18,28,-97,-21,26,11,-61,-65,11,-70,15,-4,15,-72,27,8,-23,-33,-57,1,-51,38,-117,-8,-48,-14,6,-7,-26,-26, 4,-3,-1,0,21,-27,-87,-53,27,39,28,10,28,4,14,-11,-14,10,-27,34,16,24,-30,7,11,10,1,-27,3,24,3,34,79,22,-9,70,-13,-29,49,47,-37,-18,-3,-26,-29,13,10,-31,-37,7,44,-52,4,-35,14,14,-107,-85,-11,-37,-30,4,-24,-38, 26,9,-31,-4,27,3,-43,-63,9,17,49,21,-76,-3,-17,23,5,0,-47,20,3,22,-51,24,31,5,5,42,39,9,10,12,10,25,-45,40,10,7,33,31,2,0,-4,-20,-23,21,-20,43,-67,-12,67,-38,41,-14,20,6,-109,-75,-47,9,-59,-69,-49,5, 
  /* [8][0][][] */ -14,15,14,9,-21,19,9,-20,35,26,-16,30,-3,-73,4,-13,15,-7,5,16,12,-2,-13,-12,30,-1,18,-7,-70,-32,-22,39,-13,32,-1,-72,-17,-51,37,5,-8,38,-127,34,-20,-18,-29,-59,-40,13,7,-14,-37,12,-6,1,2,-12,40,8,27,19,-2,0, -24,-21,12,41,-23,3,13,5,10,3,-23,-10,16,-21,-13,5,5,5,12,-5,28,-9,3,-15,2,0,-11,-15,-45,-39,-14,30,-15,12,7,6,-23,-16,9,-10,-24,0,-71,2,13,-39,3,-40,-26,16,4,13,-23,-2,-13,-41,7,0,7,18,6,14,5,-6, 1,-51,4,35,-38,3,2,-21,2,-13,-37,-33,3,-34,-2,17,1,0,19,-18,22,-19,6,-43,12,6,16,-19,-73,-26,-27,1,9,-16,-12,-19,-22,-27,17,37,0,6,-16,11,-5,26,-2,-25,-19,7,-6,-1,-24,16,16,3,7,18,31,7,20,17,14,19, -3,-27,4,14,-31,7,2,-4,6,-3,4,-79,17,-49,-3,-10,1,-19,2,-14,-17,5,13,-48,3,14,-48,-27,-102,-40,-8,6,-13,-84,-5,-28,-14,-13,26,6,-8,-8,-93,-3,-9,-8,-2,-37,-28,-16,5,18,-7,18,6,-28,-15,-7,-6,11,25,-17,-1,-5, 4,-42,32,17,10,20,-10,-21,-52,-15,28,-62,20,-59,10,21,-17,-3,21,-22,24,-27,9,-41,27,45,-29,-4,-74,-33,3,13,-30,-51,27,12,-36,-5,-6,54,-10,25,-94,-16,-34,0,-2,-26,-11,-14,-22,-2,-6,18,-12,13,-7,16,-27,-7,21,16,24,21, 
  /* [9][0][][] */ -49,-60,3,-62,-43,32,9,16,-56,-14,-13,-53,8,-36,35,-38,-8,-21,-17,38,-11,-70,-24,-31,1,-20,-57,-43,27,-19,25,-15,23,-31,-5,2,0,-49,-7,3,30,19,27,-18,-6,12,-15,1,43,2,1,2,10,0,20,-40,9,-21,-95,38,-23,15,19,-21, -49,-44,-26,-84,2,-32,-4,19,-61,-37,4,-6,-26,-15,29,-15,10,6,-63,20,15,-127,-57,5,-7,-2,-40,-28,27,-32,25,-4,24,-17,9,4,10,-9,-6,-1,7,-5,4,-21,-17,11,8,0,8,6,10,21,5,3,-1,-62,15,-20,-72,27,-38,23,-86,3, 23,-18,-47,-38,16,14,-8,-21,-37,-72,-9,9,-45,10,14,0,6,-1,-55,24,16,-73,-20,35,-12,-61,-32,-19,5,24,-2,16,41,-15,-2,1,-6,-44,-10,-48,6,1,-1,-15,-42,-16,-32,5,14,-47,-35,-16,-10,6,11,-30,-9,-36,-67,11,-16,34,-32,7, 23,10,-22,-28,37,-21,-74,-4,-18,-24,-52,12,-60,-42,10,25,-9,1,-30,0,-26,-47,-43,40,11,-59,10,-25,14,20,-21,-1,21,-3,-65,7,-41,24,21,-55,-16,-14,-5,8,-42,-5,-77,4,5,0,0,-37,-1,-14,4,8,-23,-56,-9,-4,29,52,-18,9, 16,29,-4,-26,15,-2,-60,-14,7,9,-106,21,-53,-28,-40,-30,26,15,-74,30,-51,19,-29,35,6,-45,13,3,27,-11,-39,13,15,-11,-65,12,-42,13,5,-52,-19,3,0,40,-12,-27,-65,-46,-59,-7,-11,-60,-2,14,-27,7,-8,-37,-21,-18,12,49,-31,20, 
  /* [10][0][][] */ 72,7,-9,5,-16,1,-32,27,23,83,-21,-2,-20,4,-18,-65,-11,14,-18,-3,-37,25,-46,44,-43,-14,15,38,-23,-31,-67,61,-13,17,-47,21,62,21,-13,20,-29,31,-2,4,2,0,-30,-6,-68,38,45,-100,28,-10,43,38,-75,-89,66,-79,-17,11,-26,-3, 49,-11,-8,-40,-8,-60,-22,87,-2,49,11,25,-69,-18,-77,-52,13,13,-23,-23,-21,7,-71,22,-96,-57,23,74,-21,14,-8,28,-10,7,-97,-36,-13,31,-19,-15,-64,26,-2,0,31,45,-34,21,-54,12,30,-58,-5,-44,28,-13,-20,-79,-18,-56,-1,-63,-106,7, 68,-24,-6,-81,16,-27,-101,72,-24,63,30,8,-14,-15,-19,-32,4,34,-18,-55,5,10,-23,7,-45,-93,8,58,-17,47,-31,12,2,-16,-127,-68,13,29,25,-27,-17,25,17,-37,-26,-1,-39,54,-12,-102,-11,-47,-1,-62,-53,-71,-17,-59,-27,-17,-7,-74,-15,4, 20,-34,3,-21,33,-3,-72,52,-26,42,-5,16,16,-6,23,8,-3,-2,-1,-29,20,4,-37,2,-20,-33,16,36,3,40,-7,-22,14,17,-37,-44,5,35,30,-36,29,-14,37,-33,-23,-17,-3,17,36,-33,-96,-12,-13,-41,-51,51,35,3,5,14,-27,-30,-17,-8, -21,-26,-8,-15,39,-30,-26,-27,28,-22,0,15,-26,8,-9,20,-10,-32,-5,-44,-4,4,-16,-69,0,-3,4,16,5,25,1,-11,0,14,28,-43,-17,63,88,6,16,-12,14,-37,-12,46,4,-1,62,-51,-100,7,24,-37,-57,46,21,17,-11,24,-30,26,-44,-20, 
  /* [11][0][][] */ 23,17,10,32,9,38,-60,-33,36,-64,4,-25,0,26,-24,48,-32,17,17,-45,-4,2,-17,-20,24,-5,6,-46,-18,9,-6,14,-56,20,-19,-28,-13,-3,-25,4,24,-34,20,-6,-42,34,33,12,34,-18,-14,-45,32,32,42,-2,-38,-9,1,4,13,-43,28,15, 2,17,4,12,-42,35,-52,-26,1,-27,-40,-21,26,0,-25,-23,-55,-48,-27,-9,-30,2,-46,-33,7,-12,-32,-33,32,-3,-5,27,-15,6,-18,-48,-8,-20,-20,21,3,-2,-4,-45,-13,22,12,-6,-19,-22,-37,-85,12,35,42,-7,-50,-25,-24,-2,3,-8,10,2, -39,-1,-18,-6,-96,-68,-52,-51,-7,-24,-7,-37,-41,-44,-8,-28,-54,-49,-79,3,-49,10,-76,-46,11,1,-24,-48,4,-12,13,21,-75,21,-28,-13,8,-46,13,10,20,6,11,-110,13,12,-3,6,-8,-70,-32,-65,31,15,22,-51,-51,-59,-40,9,-79,-15,-12,8, -24,2,-63,23,-73,-51,33,-67,-43,-43,-51,-57,-48,-26,-7,-23,-45,-16,-43,1,-34,32,-45,-50,5,11,16,-79,14,-45,25,10,-46,20,-48,-4,-3,-63,12,-16,3,4,-3,-57,33,-19,-96,6,2,-83,-35,-20,17,29,-6,-12,-48,-3,2,6,-45,-9,-95,-3, 21,-19,-35,-5,-27,-33,9,3,34,-9,-127,-33,-9,-22,-2,-52,-40,-2,-86,42,-4,24,-53,22,3,-6,39,-84,23,-41,34,33,-4,-18,-42,-17,-20,-67,-38,-12,0,31,1,-19,28,-16,-76,-8,-8,-55,-20,-63,8,24,24,32,22,-15,14,4,-16,13,0,-7, 
  /* [12][0][][] */ 52,-37,-8,13,-22,35,16,32,-6,26,-6,-10,-43,5,39,-19,-38,50,-2,8,-5,-20,-36,-16,-2,60,8,-20,-14,0,7,2,-10,-18,18,-6,63,5,-10,18,48,47,23,13,-3,-30,-41,4,30,42,25,-18,9,32,19,-11,0,-20,50,-32,-32,14,11,42, 21,8,22,26,-27,9,0,-4,16,7,-17,4,-81,-15,0,9,-4,3,-42,-6,-3,-19,-12,4,3,47,24,-4,-2,2,-20,-13,8,-62,-38,17,15,-15,-40,-71,37,20,2,49,11,-10,-68,57,29,40,3,-69,24,-43,3,-1,-32,-53,-3,-46,-60,-20,-29,-17, -4,28,-62,49,-8,21,-56,-42,64,-12,-50,-3,-127,0,-4,13,8,8,-81,-8,20,-21,10,9,-11,28,47,16,1,-14,-8,1,3,-22,-71,26,-9,-20,-23,-35,-23,29,-19,-21,-75,-6,-63,15,19,-21,-32,-53,-2,-60,-2,2,-22,-2,11,-3,-48,24,-98,-41, -6,27,-78,-18,10,8,21,-49,30,-46,-61,11,-54,-19,-32,51,12,11,-54,6,-11,3,9,1,1,19,36,-16,10,-42,21,9,8,16,-64,39,-32,-14,17,-28,-6,-9,-42,-79,-18,8,-49,-12,14,32,-61,-24,4,-28,-11,-24,-10,-25,0,-1,-29,-22,-43,-92, -24,31,-23,-42,17,-21,20,9,33,-5,-51,9,-28,-25,6,47,54,25,-33,12,-22,23,30,-4,21,-25,23,19,13,-46,4,32,8,27,-39,-6,-80,17,48,-22,0,-50,29,43,37,12,-21,-43,5,-34,-1,23,-13,-2,-9,-22,8,-16,14,5,-17,-34,-6,-43, 
  /* [13][0][][] */ 22,6,-20,-31,37,10,-20,-47,-18,75,1,41,11,-1,-29,13,1,-5,-35,49,14,-2,-34,32,22,-58,9,18,27,20,-18,-6,50,18,1,-9,-55,-23,18,26,-28,4,14,-23,-23,40,43,-48,29,-80,-5,-19,-6,27,2,-17,-46,23,-42,11,-18,10,5,-78, -2,-14,-69,-29,-10,10,-38,-74,9,0,17,19,-25,-44,-21,-10,-7,-9,-105,13,-3,-38,-45,9,18,18,15,46,13,-10,5,-7,29,-1,1,-17,-38,-35,31,8,18,-41,-16,-68,-3,29,47,-54,-3,-65,-38,-51,-10,-3,10,-46,-20,-43,-9,14,-46,-11,-40,-127, -13,15,-49,-51,-7,3,2,-39,16,-4,-59,4,-31,-41,7,7,0,7,-58,13,-40,-7,1,10,21,7,30,-4,7,-50,23,16,20,9,-34,-58,-37,-38,29,2,16,-17,19,-29,1,66,-38,-16,16,-28,-45,-34,12,-44,5,-29,-1,-52,7,18,-31,-29,-18,-120, -17,-16,-35,-18,-7,-12,-10,41,16,19,0,10,-49,-6,14,-5,-11,-1,-17,23,-56,17,42,-11,15,-7,12,-14,-3,-80,42,0,5,-4,-35,-35,-13,-35,6,29,2,-16,38,-5,-17,48,-31,14,3,-18,-44,13,5,-34,1,-10,-15,-49,9,14,-15,-19,9,-74, 3,3,-5,9,-4,4,4,29,-22,13,3,3,-35,11,34,-20,-3,20,7,23,-8,33,36,-21,45,29,26,-15,0,-45,56,33,10,-16,-8,7,0,-18,22,62,-1,-5,37,-29,-30,33,-36,33,-24,-5,-29,36,29,-31,3,19,13,-17,26,29,-16,8,7,-41, 
  /* [14][0][][] */ 37,-6,5,13,24,-29,11,8,-9,0,13,-32,-12,55,-36,12,-23,-10,15,-62,-11,6,5,-7,-10,10,5,-6,-43,-8,-42,-101,20,21,-3,-6,3,-21,3,-3,1,4,-17,-6,-25,20,4,22,11,-7,-15,1,12,-9,-18,26,-9,-1,27,-72,3,2,3,-4, -5,-16,17,17,11,37,-14,33,12,21,-1,-93,10,10,-15,3,-28,-17,21,-82,-21,6,12,-47,-23,4,-24,-20,-57,3,14,-38,-18,13,-7,-27,7,-11,-11,8,-1,2,-21,-19,-1,17,9,-2,-16,-34,-12,8,39,-1,-6,-14,-29,-12,4,-108,20,11,13,0, -34,-19,20,6,5,-16,-30,15,7,0,-18,-127,64,-3,-9,-59,-17,-19,-26,-44,-1,-30,-47,-43,-9,-9,-15,-20,13,5,9,-2,16,-26,-15,-2,20,-8,25,43,33,11,-4,-37,5,46,13,-25,-16,-12,-45,-42,13,32,40,-17,-89,-15,-28,-11,39,0,-17,-15, -25,-45,10,-72,63,-4,-37,-31,-7,-7,-14,-24,1,-27,21,-42,36,3,-70,20,48,-55,-108,23,-17,-31,-50,-75,30,-3,-24,11,60,-42,-35,16,16,-66,10,42,23,37,-4,-57,-54,8,30,20,10,-12,-12,-37,7,-3,28,-92,-48,-37,-42,20,-52,25,-28,-34, -38,-36,6,-97,15,27,13,19,-24,-9,-7,11,-9,-63,38,-33,0,9,-11,15,27,-16,-25,50,-15,-43,-52,-73,20,-22,-20,11,80,31,-25,-43,-37,-22,22,-60,-10,-8,-2,-28,6,-41,-69,2,16,1,-24,-37,-65,7,3,-32,22,-8,-41,1,-43,16,2,-60, 
  /* [15][0][][] */ 42,-39,13,31,6,-3,3,2,13,-6,10,10,20,16,-6,24,1,5,1,-9,11,1,8,17,18,13,18,6,23,-15,-4,-24,11,-54,4,4,10,30,-8,27,-26,6,3,0,0,22,8,11,39,10,22,12,27,39,5,8,7,12,15,-21,2,24,5,9, 27,-13,-4,-5,17,-19,4,-2,0,-2,-2,22,-18,-34,1,1,-1,11,2,-14,-16,-7,5,14,-1,-8,11,14,-68,8,-44,-15,22,-20,-1,-12,-23,25,-11,-13,-21,-6,-12,-3,4,5,4,-33,6,5,13,-4,10,19,9,-43,-14,4,4,-21,-8,-9,-9,-1, -3,-13,-2,-25,-4,-20,-31,-8,4,-6,-7,-20,-14,-92,-1,-33,10,-21,2,8,-7,-5,-1,-10,-10,-16,-36,5,-111,12,-73,-35,-28,-8,-13,-53,-10,8,-52,-12,-29,-45,-19,-5,0,2,-11,-52,-37,-23,-33,-14,-51,4,-40,-70,-45,-14,-8,-18,3,-17,-12,2, -16,-2,5,1,0,-3,-59,-14,-24,-9,-29,-46,4,-62,4,-33,0,-33,-4,-12,-25,-30,-2,-23,-24,-10,-11,-23,-127,3,-19,-14,-57,10,-31,-39,-30,-21,-44,32,-40,-49,7,-11,13,1,6,-86,-34,8,-55,-28,-47,1,-27,-24,-51,1,-11,-24,-2,-48,-7,-3, -24,15,4,15,25,-7,-41,8,4,-26,-4,-28,12,-18,28,9,31,-34,10,-4,13,-1,-12,-5,-2,22,15,21,1,0,28,-8,-25,20,-16,35,-6,22,-29,35,-6,43,39,-17,29,-4,-2,-51,-22,16,-29,-18,22,-1,2,-1,-20,-21,8,-2,2,-59,0,1, 
  /* [16][0][][] */ 15,15,-24,20,-1,36,-31,26,-32,-50,32,-54,-32,66,-11,22,-8,-25,2,-101,-7,7,7,-90,2,9,27,-27,22,-8,28,-118,0,6,10,27,-7,-15,-1,-30,11,-93,45,-29,-50,-18,-16,17,1,11,-25,19,-3,13,-124,15,20,17,-38,-71,-4,5,-5,-21, 29,10,-9,34,-17,58,-65,9,26,31,-4,-42,-41,15,-87,35,-37,-28,7,-111,-55,15,-33,-66,0,-27,25,-29,12,-34,18,21,-11,12,15,-17,13,-33,-39,-13,9,-127,9,-68,-15,-36,-42,28,-22,7,-9,25,3,16,-55,15,10,-17,41,-48,-1,8,-37,12, 5,-11,14,25,-79,-9,-35,22,42,42,-33,-44,-43,6,-68,11,-72,4,-9,-35,-49,25,-85,-12,52,-31,30,-2,-22,-18,24,4,-81,25,-9,-92,21,-58,-8,-22,-6,-57,0,-42,1,-40,-62,28,-27,19,-9,-11,-12,-7,-12,32,-40,-63,22,-69,-55,-7,-66,12, -3,-11,7,10,-87,-41,2,15,23,36,-53,-8,-47,-26,-33,-15,-59,10,-29,0,-35,13,-63,-20,59,-52,5,-7,-11,-42,-48,15,-36,24,-95,-78,16,-76,45,-23,2,-16,14,-33,17,-19,-9,-32,-53,-26,18,-28,14,35,14,9,13,-66,16,-84,-97,-10,-39,27, 4,20,-22,-10,-63,-89,6,-13,38,17,-72,4,-14,-53,-30,-79,-53,-2,-52,42,16,13,-12,-12,56,-26,43,5,10,-59,-113,21,7,27,-8,-36,13,-63,38,-26,20,-1,27,-18,6,-22,19,-40,-31,-51,15,44,0,1,44,-8,68,-17,-12,-4,-16,-17,-3,20, 
  /* [17][0][][] */ 27,16,-67,-22,54,30,-59,-40,1,-47,-57,14,-86,-41,6,-11,8,16,-72,19,1,32,-28,26,10,-18,-15,-97,10,-5,-33,33,48,27,-60,6,33,9,9,-13,-42,-61,-4,-49,-1,11,-8,17,45,42,5,-41,-6,-65,15,9,-14,-47,59,20,0,21,-15,7, 39,27,-53,-99,21,8,3,-42,-17,-45,-3,27,-75,-30,14,10,13,11,-81,12,-57,-25,-77,21,15,-43,-29,28,-10,-17,-7,-1,26,16,-97,-41,16,59,-5,-58,-55,-17,-22,-12,4,11,-31,10,25,11,51,-1,6,-47,49,-5,28,0,5,-8,9,-4,5,13, 28,26,-38,-79,26,15,-3,11,-23,-23,-32,15,-17,-14,-34,0,-3,-37,-39,19,-109,-1,-94,11,6,-71,-28,56,2,30,-9,-10,12,12,-94,1,1,30,-49,-84,-59,-8,-54,32,-10,23,-30,16,-47,18,34,-1,-11,-40,-7,2,-4,-57,-50,-21,-9,-31,18,32, -30,-8,17,-10,7,20,-8,40,-9,-73,-107,31,-4,8,-43,-6,-34,-51,-32,-2,-119,-18,-57,27,1,-37,6,22,-10,43,22,-60,-5,6,-59,-22,6,36,-89,-91,-8,19,-34,17,-9,30,28,12,4,25,-7,0,8,-24,-48,-11,13,-62,-26,-11,-25,-26,0,2, -30,-53,33,-14,2,-22,-18,14,-44,-103,-127,-4,-25,6,-47,-2,-62,-75,-48,-7,-67,-11,-25,14,-1,-27,25,-3,13,44,27,-105,14,-18,-36,-112,-13,-1,-35,-28,5,-22,15,-5,28,29,-40,0,62,-2,-1,17,38,14,-55,-12,8,-32,2,2,-22,18,-3,-4, 
  /* [18][0][][] */ -67,11,52,-14,6,-15,-79,6,-65,-60,4,-5,25,-117,33,-81,16,-80,2,-18,-40,-122,-7,-5,14,-3,-31,30,-99,0,-22,-7,90,25,-38,2,-16,-27,-23,32,-54,-26,-21,-22,46,27,-5,-103,-52,-1,-65,-71,-77,-29,-35,-18,-127,-70,-86,-28,8,-93,2,-22, -33,16,-18,6,14,-57,-64,36,-101,-40,-10,-12,5,-58,20,-6,7,-33,-10,-30,-11,-12,-68,17,14,-27,-14,88,-15,13,24,-25,27,6,-63,91,21,11,-28,38,1,13,-1,-39,22,31,-51,-17,-36,5,-26,-27,-18,-37,4,10,-64,-97,-84,27,-44,-37,-118,-26, -35,17,-45,19,23,-77,-24,42,-55,-12,26,21,32,8,-9,1,3,5,-3,-21,0,27,-50,18,10,-56,3,42,29,23,-10,-60,22,0,-62,21,21,36,-66,-20,29,4,10,-33,33,-7,-48,16,19,28,-60,-46,17,-35,2,13,-120,-107,-14,35,-23,-48,-42,5, -53,9,-26,7,-56,-15,2,43,33,-17,-61,15,6,8,-34,12,-15,2,5,-8,4,19,2,-54,14,-17,2,14,5,-15,24,-29,18,19,-51,-28,0,23,-85,-1,-1,38,30,-5,1,-4,25,10,12,-6,-10,12,22,-68,5,36,7,-7,7,15,-36,-33,-37,17, -2,-31,-22,38,-21,8,14,-28,23,22,14,-27,8,19,-13,33,-51,31,15,-64,-20,32,46,44,-113,22,34,-3,25,-58,31,31,30,-61,13,-33,7,-47,-62,-33,-27,40,-28,12,-8,-30,-12,26,-5,22,20,-7,34,-88,-54,30,-4,-4,11,39,-62,40,-14,-42, 
  /* [19][0][][] */ -29,35,-35,-28,-18,-13,20,-23,4,-9,-5,6,-8,-42,7,20,32,39,10,-11,22,-31,8,1,25,34,9,44,23,-16,20,13,7,7,8,73,-21,-3,-26,-83,-84,33,-28,-41,-28,-9,10,-71,-1,9,-45,-23,-25,10,11,33,12,4,-92,-2,8,-8,-20,-55, 16,-11,-31,-40,-9,22,-3,15,16,10,0,37,-6,-36,33,-7,45,11,10,-7,-39,12,-9,-10,9,5,19,-34,38,10,-36,44,17,39,14,21,-14,-29,-5,-58,-104,-17,-9,-58,-14,-27,8,-52,2,17,-95,-14,-4,-30,-35,-44,15,14,-70,2,1,-34,-25,1, -20,5,20,-27,-13,33,20,-31,11,33,-4,-5,50,-21,-20,-41,-14,-22,-40,-3,-45,14,-31,-8,-27,44,-8,-77,-45,5,-62,4,22,31,20,-26,8,-12,-50,36,-4,-29,7,14,-2,-32,-4,-44,-50,28,-12,-15,-34,20,-94,26,-36,-6,-37,-1,0,-28,-58,-21, -34,1,23,-26,-10,23,8,0,28,-29,37,-44,-45,-45,-99,27,-59,-90,-54,25,68,19,-16,34,-74,47,-5,-55,-51,-58,-3,-37,-46,20,11,93,43,16,-95,65,27,-15,-7,8,24,-52,-63,-4,-54,29,10,-54,11,8,-23,1,-127,-80,2,-86,-22,1,-8,12, -9,7,25,17,-13,-25,-17,32,-14,-39,10,-21,-23,-79,-4,60,-53,-7,-33,6,98,8,14,46,-24,-6,15,5,28,7,43,-38,-75,-36,-42,121,22,-10,-73,-30,1,59,-47,70,30,46,-40,13,-34,33,-5,-98,17,53,29,44,-46,-67,8,-26,-26,25,40,23, 
  /* [20][0][][] */ 39,-21,8,-19,15,-40,9,13,-11,32,13,22,-21,-3,-4,24,-13,8,8,26,6,-13,-10,20,-58,9,-4,25,46,7,21,23,-11,-15,18,-7,14,15,-18,26,9,13,-9,13,-13,12,13,30,-7,-12,14,22,34,-16,1,-4,9,-2,-36,23,-14,-3,-12,-3, 81,-24,8,-7,-17,-63,-6,9,-48,18,-6,34,-28,13,1,12,-23,-5,-9,-14,-10,17,-37,-9,-80,-11,-35,-3,9,19,20,-19,-30,7,-8,8,10,10,-21,13,17,-1,-1,20,8,3,-17,6,17,-31,-6,2,12,-32,-25,-23,-31,-63,-24,16,-42,17,-14,22, -1,-35,14,-11,-78,-47,-6,-12,-52,-36,-20,13,-18,1,7,-26,-29,-65,0,-34,-24,-9,-21,-56,-83,-40,-37,4,0,0,-3,-50,-51,5,-48,8,14,-3,-21,-56,10,-31,13,12,1,-24,-6,8,16,-63,-32,-94,11,9,-51,-32,-34,-1,-8,8,-14,-8,-27,4, -80,-2,20,-9,-22,-47,-31,0,-43,-80,-70,-83,3,3,4,-37,-25,-69,-3,-11,-84,-39,-26,-88,-70,-30,-62,9,-1,6,-23,-32,-57,21,-64,-25,15,-16,-64,-14,4,-29,12,-3,2,-17,-29,-7,15,-34,-37,-10,-1,16,-18,-14,18,-46,-8,-14,1,-59,-5,13, -72,-37,18,-10,-31,-30,-7,-4,-34,-25,-32,-127,-1,2,7,-47,-15,-92,9,-51,-44,-51,-8,-50,-13,-7,-59,23,-1,23,-11,-38,-29,46,-21,-31,19,0,-26,-4,12,-51,19,-2,7,-1,16,10,40,-22,-31,12,-21,-3,-9,-21,1,-6,8,-28,-6,-55,-1,17, 
  /* [21][0][][] */ -82,-12,-20,-38,8,39,18,-1,50,-48,10,69,15,-60,-58,25,-1,6,-18,7,51,21,-20,6,-3,24,18,25,11,-48,8,24,-25,-9,23,4,-93,28,-57,6,-127,1,-86,-9,-7,-25,-7,-24,-56,11,-5,30,-38,-51,25,-1,13,-23,-56,57,-2,-36,-20,-110, -37,-48,-18,19,30,-39,18,16,-2,15,36,-22,30,-4,-94,41,-16,-15,-23,-31,17,1,-8,20,-70,50,5,20,2,-14,13,-21,-12,-57,-3,50,-9,23,-71,11,-16,26,-38,-2,-42,40,-13,-6,-13,-10,-9,16,-4,-42,-18,29,-25,-52,20,12,-39,-37,-102,-57, -25,-31,-22,-55,36,-84,17,31,18,-15,15,-2,30,19,-51,17,4,-13,-35,-25,24,9,-116,50,-39,42,14,-4,-3,9,52,-30,64,-10,-4,27,-17,16,-15,-15,15,31,0,-14,-14,-13,-48,15,27,-27,-3,6,3,-28,2,13,-69,-108,29,24,-86,-14,-90,-46, -42,-58,-3,-2,-11,-12,4,-17,12,0,-62,14,-26,6,-37,-12,-10,-11,-7,-9,-14,23,-45,59,-60,6,29,-33,-4,-1,23,13,38,14,-108,-32,2,11,-16,-48,0,-10,8,7,7,-8,-70,17,29,9,9,-45,24,-10,-36,-1,-47,-75,-14,8,-26,-13,-95,0, -4,-98,25,-2,9,-8,57,35,40,0,-49,-31,-28,4,-22,-12,-27,-64,-35,18,4,7,-20,73,-63,59,46,-38,11,16,-22,20,-36,38,-45,-108,14,-29,-30,-33,-12,-17,19,29,44,-27,-94,-35,7,88,40,-61,17,43,-40,-1,-37,-43,3,-34,-28,-37,-56,25, 
  /* [22][0][][] */ 33,14,-8,19,-3,2,4,-14,91,43,21,13,-26,42,-2,41,22,-1,1,3,4,13,-6,-1,27,-12,82,25,60,17,30,32,24,10,38,-5,-7,29,27,-41,34,3,12,-24,-29,-7,-35,7,43,2,-30,49,9,-52,29,42,6,-30,12,0,-35,-30,-79,23, -16,22,-8,7,-97,-1,10,-55,68,-12,-64,-17,-40,18,-44,15,-2,-20,-50,24,-22,8,-84,-24,32,-10,42,-13,1,-16,-39,8,14,27,-75,-25,-14,-11,49,-29,-1,-38,0,-28,26,-31,-81,12,3,-25,36,-20,1,-23,23,5,-44,-73,-10,13,-33,13,-127,24, -46,-20,-49,-37,-94,-68,34,-37,84,17,-103,-9,-58,-16,-13,-1,-16,-31,-67,15,-43,14,-13,-39,43,-13,54,-35,4,-9,-27,1,-28,31,-97,-76,-20,-99,70,-28,5,-9,-3,-17,37,-28,-56,-28,-25,-12,13,23,9,-12,19,32,-14,-69,13,11,-85,-8,-49,12, -56,-21,4,-16,-56,-77,12,-8,33,35,-91,-27,-11,-16,-13,-78,-54,-34,-34,43,-49,22,9,-40,45,5,18,-19,22,4,-37,-36,-30,38,-49,-42,-2,-83,31,-50,-1,3,41,21,-7,-33,-27,-13,-10,-22,-16,19,-42,10,22,26,18,-19,14,-27,-45,3,-8,11, -65,-30,28,-15,-39,-27,24,-24,60,-8,-73,-83,-15,9,32,-27,-87,-40,-31,36,-62,-9,-2,-69,58,-21,-11,-50,31,-4,-59,-28,-5,3,-42,-42,26,-83,24,-19,22,-19,58,18,22,-13,-22,-30,-39,-13,1,21,-94,-14,19,-58,0,9,31,12,-1,-18,7,42, 
  /* [23][0][][] */ 61,-26,-49,-6,43,-36,14,-26,-55,-8,-17,78,7,4,-51,49,2,-7,-16,-15,-13,-9,-11,-41,-33,15,-22,26,23,16,26,-19,-23,-4,0,-53,-15,26,-40,-38,3,-2,-9,-21,-57,40,2,57,32,-15,-7,16,41,-14,-22,-43,39,-14,-47,48,-14,-47,-33,13, -56,-42,-7,-32,-92,-64,-9,-24,-24,-30,-36,23,2,-4,-50,11,-39,-81,0,-38,-54,-27,-37,-111,-64,-13,-62,-11,-6,12,10,-80,19,7,-9,-56,11,35,-53,1,17,-20,5,-6,12,34,-14,15,36,-34,-24,14,0,-7,-18,-33,-1,-27,-16,10,-40,-70,-35,16, -68,-41,20,-20,-58,-15,-12,-2,-25,-69,-75,-76,-3,-2,7,-16,-10,-96,-1,-3,-76,-36,-32,-14,-55,-30,-32,18,2,6,-10,-51,30,30,-52,-39,1,2,-30,-47,18,-35,12,13,29,26,13,11,29,-9,2,-11,-9,15,-31,3,10,0,-8,18,-4,-47,-22,12, -7,-21,7,-10,-29,-59,6,-1,-30,-14,-127,-84,5,0,-9,-57,-23,-48,-5,41,-52,-36,-21,-6,-41,-11,-38,5,-3,14,-15,-21,22,52,-37,-17,-5,-92,-28,-3,7,4,16,3,1,20,-18,0,34,0,-8,-14,-29,9,-22,-15,23,-42,33,5,-13,-7,6,6, -39,-45,15,-25,6,-31,-3,14,-25,-3,-14,-67,2,28,11,-42,-17,-47,-12,27,-9,1,-13,-26,-28,-8,-48,-19,5,28,-32,-67,-8,9,15,14,-9,-60,-11,-9,8,-7,37,12,9,12,-14,41,34,37,-9,7,-34,11,-5,-11,3,-1,-2,-35,-17,-20,-17,12, 
  /* [24][0][][] */ -8,14,-22,23,18,12,9,11,27,-52,-6,15,1,-18,-18,3,-9,10,-21,25,20,10,1,17,6,7,5,-27,-9,-6,-25,34,18,-4,3,5,61,10,38,7,-5,-26,-1,-3,23,10,10,40,43,20,4,-3,-5,21,-32,-9,-1,0,63,-15,6,-27,1,16, -19,8,-55,17,22,29,-17,-35,21,-32,-18,16,13,33,-15,-50,14,26,-27,14,25,1,-29,8,3,-3,3,-74,-11,11,-78,6,38,9,-12,6,8,-55,34,15,-25,-18,0,2,23,10,31,65,65,-27,14,-20,-25,-36,-34,-26,-83,-17,31,-6,1,-5,-67,0, -19,-6,-44,-3,24,6,-52,-53,23,-41,-33,5,-127,10,-7,-13,14,-15,-44,6,24,-48,-50,4,11,-64,-25,1,3,-26,-4,21,29,26,-34,-15,18,-5,25,-28,-65,-31,-58,-31,28,-9,-46,22,28,-90,-20,-23,-30,-31,-14,-49,-62,-30,50,13,-13,-52,-59,-25, -34,-1,-80,-78,1,-30,-8,35,16,-36,-64,-3,-75,-41,3,11,12,-19,10,6,7,-25,-80,3,8,-64,-29,4,-19,-25,25,13,3,6,-49,-61,-74,7,6,-45,-54,-15,-64,4,-10,22,-25,-71,-1,-35,9,11,-45,-37,5,-16,-18,-2,-17,23,-19,-44,-32,-62, -39,-5,-84,-14,27,-66,3,59,8,-56,-65,2,-29,24,-37,32,7,-36,-12,3,-48,29,-67,51,19,-72,21,40,19,30,55,-6,15,-5,-100,-89,-42,46,22,-14,-2,-5,21,-53,-55,88,27,-2,17,-5,-43,23,1,-72,1,-9,-7,-18,-53,10,-22,-69,-25,-24, 
  /* [25][0][][] */ -14,4,3,-33,-2,-13,6,1,19,-2,9,7,9,20,6,16,-17,7,-2,-24,-4,-2,2,-4,-14,9,8,-41,-9,-12,1,-4,4,19,2,-25,-8,20,-16,-36,-12,-21,3,-6,19,-39,0,11,-6,4,10,7,-2,-6,36,-22,-3,-1,6,29,-10,-5,-11,-6, -8,22,-9,-37,-33,-6,4,5,-17,6,-8,8,10,0,-15,7,-56,-9,-9,-27,-97,-9,12,-17,-25,-6,-75,-38,36,-33,-41,-7,14,-9,13,-60,-51,0,9,-17,-14,8,-39,-6,15,-53,12,-2,9,3,4,0,26,-31,21,-11,9,1,-3,7,-13,-6,0,-19, -14,-84,-4,-31,-51,-2,5,15,-61,23,23,-43,7,8,-25,12,-30,-8,-4,-37,-58,-22,5,-27,-53,8,-74,-127,-35,-41,-25,-17,4,-15,20,16,-49,-46,17,-35,-3,14,-18,11,5,-62,2,-1,25,11,0,8,6,1,13,-65,10,10,-13,-11,-29,8,-3,-25, -53,-30,9,-24,-15,1,3,2,-10,6,16,-92,4,-25,-19,0,-17,-12,1,-23,-44,-21,4,-34,-75,0,-69,-68,-22,-30,-45,-4,-10,-26,10,0,-59,-62,-13,-37,-12,-8,4,8,9,-64,0,-4,20,-1,-3,1,5,-3,-32,-46,5,-2,-9,-13,-23,9,-6,-35, -35,10,5,-29,-18,-28,11,11,3,11,6,-28,-4,-41,-14,0,2,-17,-7,-25,-34,-26,-15,-17,-7,-14,-70,-49,-28,-23,-17,-24,-18,-8,3,-2,-33,-40,-12,-28,-16,-15,41,4,5,-57,2,-41,11,9,2,12,-54,-23,-33,-13,12,5,-5,-21,-19,-5,5,1, 
  /* [26][0][][] */ -31,-98,-9,-5,-59,21,8,2,-61,-15,-19,-26,-5,-25,-39,-26,-56,-50,-19,-61,-9,18,-35,-30,-98,3,-27,27,24,-13,25,-58,-48,-37,-8,13,30,14,-77,-9,-1,10,27,-41,-25,-33,0,23,19,15,10,-9,31,16,43,-29,17,2,-85,6,-21,-5,2,-38, -76,-33,-3,-56,-112,-11,9,41,-95,-26,-21,9,7,-8,7,-48,-61,-24,-57,-11,0,-60,-53,-43,-34,8,-7,3,4,-60,17,-17,-26,-11,-3,7,15,9,-19,8,-3,13,16,-28,-14,-59,-51,18,13,9,0,25,30,11,-7,-50,1,1,-86,5,-83,-39,-6,-24, -127,-29,-19,-105,-103,-60,-12,35,-88,-71,-30,-28,-8,-13,25,-25,-5,22,-22,23,1,-65,-65,-59,2,-2,-28,-48,5,-7,19,-10,-47,-38,-24,25,-1,-10,-13,-3,-5,24,19,-41,0,-11,-26,8,2,-81,-42,11,-5,-9,22,-32,-21,-25,-68,8,-38,-2,-68,-26, 19,4,-16,-16,-4,11,21,15,-72,-44,-58,-2,32,-19,20,14,20,33,-7,25,-14,-42,-15,14,16,-6,-31,-58,6,38,30,21,-1,20,-8,23,-10,-25,-5,-16,3,19,-2,-9,-19,-43,3,14,10,-15,-15,-21,-18,-14,22,0,25,-2,-8,24,-31,19,-23,-26, 39,28,-27,-27,61,-4,10,1,-9,17,-37,-10,25,-57,17,21,5,-5,-2,5,-9,-23,-3,43,5,-20,-18,-37,-10,30,-11,24,-17,17,-15,6,-42,12,14,-6,-23,-21,11,-1,5,-42,7,-24,12,10,12,-2,-47,-18,-47,17,26,26,3,19,7,15,-6,-41, 
  /* [27][0][][] */ -60,20,-125,-19,14,-56,-42,72,-37,-20,-73,1,26,5,24,-26,-38,0,5,-90,-22,-71,-29,-70,-24,25,-18,-66,-40,-58,-46,-6,-39,-21,-13,-21,-47,-71,-47,16,-70,-33,-59,-97,30,42,22,-18,-21,-20,-56,-27,-76,-68,-4,11,-75,-12,-55,-34,12,-28,-53,-35, -29,-71,-65,3,-67,-51,-27,24,-82,-32,-101,-53,-49,-29,10,-28,-25,-49,-24,-35,-53,-19,3,-127,-42,-17,-69,10,-50,-38,-16,19,-33,-22,-58,1,18,-9,-51,-64,-31,-51,-68,-59,-71,9,-8,-82,-51,-21,35,24,-71,40,22,-60,-8,-72,-5,-27,7,5,-83,-2, -1,-4,-59,31,-44,-3,3,-3,-18,20,-50,-110,-68,-63,22,-13,-43,30,-10,-46,7,-23,-94,-64,-2,-42,16,-68,-108,-4,-84,-9,14,4,-14,-4,-84,-3,-8,-90,-49,-32,-81,-36,-21,19,34,-59,-29,-21,8,-107,-14,-92,-12,-57,-49,-42,-99,-62,-26,-35,-16,-34, 4,-62,-70,-24,-102,12,-31,0,-9,-54,22,-95,-8,-13,-62,-28,3,-75,12,4,20,-3,5,-71,-35,-15,-52,-50,-39,-51,3,-14,-44,-57,64,-21,30,-5,-63,67,-1,-16,-49,-23,-54,-20,-56,-3,30,34,-27,-42,-23,-34,-50,30,-44,45,-36,-54,22,-83,-115,-83, -42,-34,-47,-24,-49,-67,-21,31,43,-17,31,-113,-98,2,-43,-4,-11,2,20,-73,18,-91,-20,-24,-17,-45,-91,-23,-18,-12,-22,-58,3,-34,-51,-81,-59,-68,23,-61,-93,-43,-34,-48,-86,13,-71,-25,-18,-40,72,-61,-71,35,-32,-37,-69,27,25,-63,-1,26,-17,-89, 
  /* [28][0][][] */ -59,29,34,-33,26,-5,-25,50,-19,3,8,-51,-23,4,0,-25,-13,-127,12,33,-4,2,-19,-38,-49,-14,-28,25,-3,5,5,-74,1,22,-7,-3,30,-12,4,-12,30,12,0,-4,37,-7,-33,8,2,4,-29,-19,-16,5,-15,9,-39,-49,-25,-3,-22,-47,-23,-1, -8,15,1,9,24,-16,-30,40,-26,3,7,-40,-15,8,-39,-7,-48,-52,14,-24,-60,2,-45,-26,-50,-42,-16,-5,2,7,10,-52,22,2,-31,-40,3,-2,52,-34,12,-1,9,-11,13,-11,-6,17,14,-5,-15,-17,-11,-7,8,3,-14,-58,-5,-1,-40,-25,-23,17, -11,-17,-8,16,1,-33,-8,59,-14,18,-67,-55,1,5,-6,-4,-46,13,17,-22,-84,9,-24,-29,-31,-42,5,-25,7,10,-8,8,31,8,-12,-70,2,-10,6,-68,5,-17,16,-31,-6,5,-13,14,16,-27,7,-29,7,-19,-7,13,2,-36,18,12,-39,-2,-16,13, 11,-1,-23,12,-35,-21,-2,26,10,0,-36,-18,19,3,-29,-16,-33,25,24,-19,-59,17,-10,19,-4,-5,1,0,-15,-26,-37,18,27,18,7,-42,9,22,1,-14,-12,4,10,-23,-41,11,-10,12,4,-43,0,-7,13,-49,-14,18,19,8,6,-50,-24,-1,-19,11, 41,18,-53,29,-3,-38,-16,-58,-5,16,43,18,26,7,1,7,-8,25,-10,-6,-28,2,-1,20,-34,-7,9,-21,-27,-57,-32,33,31,-19,30,-23,-3,-8,5,17,-9,23,-18,-46,-67,34,-14,9,-40,-65,10,23,51,-5,-58,8,5,12,0,-89,-30,26,-18,1, 
  /* [29][0][][] */ 21,-36,-17,16,10,-23,-32,-49,-17,55,23,39,36,45,38,16,-13,7,3,28,-29,2,19,29,13,-29,33,15,50,-3,14,36,40,-26,-7,-27,28,51,27,6,-20,-4,11,-42,-23,-20,18,31,-20,-25,11,9,29,36,-15,-25,-11,-7,28,72,-12,30,8,18, -3,-26,-20,0,-12,-23,-26,12,15,53,16,-8,11,-30,37,-40,-1,-17,-7,-9,-9,5,16,1,15,-4,-10,-10,-12,35,13,-36,-13,-5,24,23,39,20,-1,-27,-68,5,-14,-51,-26,25,17,-32,-27,-9,-13,37,29,23,-39,-6,-4,-9,8,21,-2,-8,-5,-18, -42,30,-34,27,-15,-35,-127,-30,-24,-17,86,-48,36,-10,25,7,47,-66,28,-47,-18,9,-3,-37,16,-10,11,-31,-22,8,10,-83,-91,-16,36,-7,36,17,5,-1,-70,-22,-26,-84,-10,-16,-15,-17,-64,-56,-101,5,-11,22,-52,35,-102,-1,-19,-16,30,-62,-30,12, -20,41,1,12,8,24,-113,-47,3,-89,62,-104,20,9,56,18,-14,-44,21,-24,-6,27,-14,-31,-8,-43,12,-74,-52,0,31,-61,-124,-1,-3,-88,-4,-41,-49,21,-16,-31,-7,-66,16,-19,-1,1,-40,-14,-42,-80,-63,-8,-53,51,-65,-26,14,-30,10,-41,3,16, -13,43,-20,-29,-28,50,-40,-3,18,-58,50,-102,24,10,71,20,-9,-11,27,-62,21,9,-11,-20,4,-17,32,-43,-13,22,25,-59,-66,-48,-39,3,-23,-4,-47,-10,-34,19,-19,-55,18,-13,42,8,2,-40,13,-35,-34,-21,-42,42,17,9,5,-66,15,-36,22,-27, 
  /* [30][0][][] */ 6,39,1,-14,20,-6,-13,6,3,-4,13,-35,-11,52,28,-15,17,-7,5,-9,16,49,-24,23,23,18,39,13,-1,52,-2,2,-28,-12,2,7,12,-11,11,21,37,31,51,-40,75,13,-8,-27,73,-34,-2,5,-1,13,-8,11,-8,7,-6,-88,-11,43,25,14, 32,12,-22,-18,-3,-47,-31,-35,-10,68,4,-3,26,3,-5,22,6,0,3,1,10,7,-64,25,17,9,16,22,33,28,-3,-4,-34,3,-10,33,-10,-41,20,21,-12,32,23,-38,41,7,3,-50,51,-41,-34,-23,-14,-14,-33,14,-16,1,-25,-59,-1,-27,-22,-48, 16,-11,-58,-8,-42,-54,-60,-60,19,83,-22,14,-31,59,-53,17,-9,-3,-79,5,27,-32,-14,8,5,-32,18,19,30,6,-19,-24,-45,24,-53,14,-7,-54,-73,0,-71,22,35,-47,-40,15,-58,6,1,-53,-43,-60,-3,-55,-31,-1,-41,4,-36,-13,-22,-105,-74,-57, -2,-6,-127,1,-53,14,-67,-62,28,14,-50,3,-20,-13,-69,17,-35,7,-69,17,48,-32,-19,1,-1,-44,27,7,20,-32,-5,-15,-41,19,-62,-41,-36,-59,-21,1,-43,19,-29,-60,-78,38,-53,-22,-47,31,-60,-28,-12,-28,-44,35,-66,-36,-38,31,-24,-95,-32,-94, 16,-12,-65,-17,0,35,-20,47,41,50,36,8,12,-27,-18,-3,11,27,-12,30,20,11,29,-13,32,64,56,-6,6,-81,-14,15,-22,-5,35,55,-1,-26,99,17,-29,3,-77,1,-38,45,-86,-73,17,33,-32,6,-28,-13,-44,18,-55,-88,-12,36,-31,-45,-29,-97, 
  /* [31][0][][] */ 48,17,4,-31,-11,-19,-37,6,-40,34,-34,-40,5,-18,-20,-44,51,-22,-34,17,-18,-4,-48,16,-20,-12,-25,36,2,-17,28,1,-9,20,-39,49,7,-1,-102,73,-13,16,-4,-14,14,0,5,23,-43,15,2,-72,12,-33,-16,2,-80,-116,-54,-16,2,3,-35,-20, 49,-26,1,-10,7,-33,-12,-19,-27,9,-13,-22,-10,9,-25,33,26,-31,-20,37,-49,34,-28,32,-34,-24,-11,31,14,26,42,-2,1,14,-53,-4,19,17,-69,24,4,25,-12,11,-17,14,-6,8,8,14,31,-77,36,7,-12,9,-63,-59,-5,3,-49,2,-14,4, 69,-44,7,8,25,-77,2,-11,-54,12,-24,-16,18,14,2,44,-20,-29,-18,25,-34,24,-10,-23,-46,-21,-26,32,27,46,26,-45,33,25,-26,-1,13,-13,-102,-35,1,23,-5,16,27,-29,-15,7,3,0,10,-40,22,-5,-16,-23,-43,-45,20,-16,-57,23,13,32, 6,-57,12,9,-30,-60,-4,-3,-45,-11,-21,-46,17,18,-60,41,-50,23,-5,-4,-7,11,-1,-84,-15,-32,-3,10,12,27,2,-75,17,-7,-31,-10,-6,-4,-64,-11,-12,0,5,29,18,-32,-15,28,11,-41,29,7,12,0,-38,-78,-34,1,18,-27,-17,19,-7,19, 35,-15,-11,18,16,-48,22,-28,-7,-21,30,-60,20,11,-4,62,-40,10,3,-18,4,4,13,-3,-33,-34,-7,7,12,4,-46,-127,68,-93,-6,-17,1,-1,-17,-12,11,-14,-1,-1,32,-50,-7,27,29,-38,19,20,-17,-5,-18,4,18,9,7,-20,-7,26,1,4, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 32,1,5,64 } };
const TfArray<32, float> quant10_scale = { 32, { 0.0088287945836782455, 0.010202521458268166, 0.0023049567826092243, 0.0069922902621328831, 0.0056586773134768009, 0.0073065017350018024, 0.0081557091325521469, 0.0079009067267179489, 0.00700794393196702, 0.0092392116785049438, 0.0068101156502962112, 0.0091283572837710381, 0.0076184752397239208, 0.008675621822476387, 0.0088605005294084549, 0.011783074587583542, 0.0079735834151506424, 0.0078060138039290905, 0.0070372992195188999, 0.0059981336817145348, 0.010642267763614655, 0.0066050267778337002, 0.0066400514915585518, 0.0088445413857698441, 0.0087218144908547401, 0.012283585965633392, 0.0087344525381922722, 0.0019439379684627056, 0.010389327071607113, 0.0065265605226159096, 0.0071280882693827152, 0.0073288693092763424, } };
const TfArray<32, int> quant10_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int8_t tensor_data11[32*1*5*32] = { 
  /* [0][0][][] */ 6,-27,20,33,-3,-49,-107,32,-65,-7,16,8,-6,-1,4,-26,42,56,31,-8,-9,34,53,19,-24,-7,-46,5,28,-11,9,20, -92,-49,-10,3,7,-41,-69,-48,-15,-12,-50,8,10,-17,16,-32,-13,51,-29,38,-37,15,-2,4,-51,-51,-26,31,4,-30,1,16, -100,-47,-3,47,11,12,11,-55,-4,4,-53,-10,2,-31,64,-127,47,-1,-31,16,-57,49,15,-51,-4,-49,1,-6,-4,-96,-29,0, -45,-55,-9,69,11,23,12,-79,0,-17,-43,-20,49,-29,-4,-75,-56,3,-28,22,-17,8,-16,-5,-18,-78,-2,19,-13,-101,-3,14, -25,-39,-7,49,8,-9,13,-52,-4,13,-86,-110,-54,-52,28,-57,28,28,12,23,-27,-36,7,-54,-31,-21,88,31,-21,-75,-75,38, 
  /* [1][0][][] */ 1,-8,-7,21,6,-1,-1,-4,3,51,-22,8,7,-3,10,-7,-52,2,4,6,0,-17,-19,1,-4,-10,20,-8,6,-22,-2,-2, 1,7,4,9,4,21,-19,-3,-32,-28,-21,6,17,6,8,-16,-19,4,5,-1,-13,-5,-17,-7,-13,3,39,2,17,-44,-4,-7, -54,5,5,0,-7,-15,-26,-9,-6,33,-4,15,9,8,5,-25,-18,13,2,-2,1,-13,-4,-25,-13,1,-2,-7,21,-67,-14,0, -25,-35,5,6,1,-62,-6,-17,4,17,6,-63,2,-2,-62,-45,2,17,-23,5,-23,-11,-4,-27,-31,3,33,-1,-5,-94,-16,-11, -13,-41,12,-10,5,-127,-1,-15,1,-28,-3,-64,-10,-42,-18,-22,6,2,-24,5,13,-28,-2,-19,-56,7,-6,-9,-4,-100,-29,-11, 
  /* [2][0][][] */ 40,-20,7,-18,7,19,-1,-113,-1,-28,-91,-3,-80,-17,-10,-92,-10,-41,-29,-41,33,58,14,21,-32,-5,-41,-11,-41,-19,-42,-40, 8,-36,5,4,-3,15,-5,-127,6,-3,-39,-9,-32,-45,-69,-82,20,-22,-37,-18,21,25,22,10,-98,-8,-14,0,5,-22,-44,0, 21,-7,10,2,11,-1,-25,-60,-4,-15,-74,-52,-25,-22,-61,-48,-45,-52,-25,27,22,-12,-3,31,-12,-40,-35,-15,22,-31,13,10, 8,4,4,-8,-8,-10,-53,-40,-17,-23,-47,-54,14,-26,-55,-10,-27,-53,-16,-2,17,35,3,19,14,-5,-32,-14,18,14,14,-10, 15,12,-12,-26,20,-6,-38,-20,-78,-27,-14,-52,36,-4,-30,-15,-14,2,-18,-13,31,34,14,32,28,14,-54,-17,30,23,3,3, 
  /* [3][0][][] */ 44,-31,-11,-11,-6,5,-48,-21,-22,-37,-4,43,-2,-18,24,-116,-2,-8,46,-1,24,-17,-3,6,6,-50,42,-20,19,-70,-11,66, -10,6,26,-44,-34,-37,-14,-53,-27,-72,-2,-125,-24,-18,-58,24,-106,-73,7,-91,-75,-53,-97,-16,-10,-9,15,-16,5,-8,-94,6, -22,31,-11,-50,-95,-79,-5,9,-48,-84,-1,-29,-14,-105,7,28,-21,-89,-36,-34,-59,-51,-61,-11,23,-115,-5,-2,-18,16,-57,-80, -25,5,-11,-77,-43,-68,4,33,-47,-127,-37,-16,-46,-37,37,49,-40,-34,28,44,5,-102,-10,-4,-14,-76,-36,-28,-20,24,8,-32, -33,-23,33,-6,-24,-47,-6,-19,1,-41,8,-20,-12,1,-55,27,-53,-43,50,-8,-18,31,-68,-9,-13,11,9,7,-12,29,66,87, 
  /* [4][0][][] */ -78,1,-10,-14,-5,8,1,-29,-2,-43,-93,45,-127,-54,-1,3,-12,-42,-32,-81,-84,-52,-3,15,-88,31,-4,5,-24,-12,-123,-4, 0,7,-20,-56,-38,-5,-2,-29,-2,-48,-90,44,-92,-42,-1,4,-47,-46,-13,-56,-74,-8,-36,-10,-44,18,-23,2,-100,-10,-32,-17, 12,7,-20,3,-15,7,-13,4,4,-84,-80,39,-82,4,1,4,19,-15,-19,3,-1,16,-19,10,-45,34,-5,-11,-102,1,-18,-35, 35,2,-6,-20,-3,6,-8,-4,0,-11,-60,27,-13,0,6,-16,15,-39,5,11,13,14,14,31,-24,-15,17,-11,-1,-25,-20,5, 1,-5,-8,-2,-4,24,-11,-43,-9,7,-13,44,4,3,6,-3,21,-24,6,-13,-1,9,0,10,-25,38,23,-2,13,-28,2,16, 
  /* [5][0][][] */ -38,5,10,-40,-63,-3,3,24,-19,-4,2,50,-28,11,24,-4,-42,43,8,-49,-56,-3,-13,-17,31,-38,-33,-6,-94,-28,-4,-127, -32,13,-21,-45,-88,-11,8,-1,-35,34,-5,-12,-28,16,20,-15,-46,36,21,-19,-36,18,-8,9,19,-15,-37,-17,-38,-36,-4,-26, -39,10,-6,-15,-62,-26,20,5,-74,0,-4,-2,-41,27,32,-92,2,20,26,-14,-10,25,-3,-3,35,11,-15,-7,-10,-21,-17,9, -49,-36,-2,-76,-20,-38,-21,-4,-77,44,-6,-31,-33,19,-21,-61,18,15,24,-20,-18,12,0,-17,24,14,-23,0,9,-7,-14,12, 6,-31,-18,-53,-15,-56,12,-10,-55,-26,-17,-59,-5,33,71,-43,7,15,62,-14,-13,19,-15,-25,47,-21,-48,-3,4,28,-23,4, 
  /* [6][0][][] */ 11,-5,-17,-61,-33,-17,-26,18,-64,4,-13,-27,-68,6,30,10,-2,29,42,2,-2,15,-15,82,66,-22,-34,3,-1,-31,-54,12, 18,-14,-13,-46,2,-41,-101,1,-79,-29,-2,-63,-90,10,-2,-127,-8,-9,26,-11,16,22,6,-39,-3,-12,-50,2,20,-11,-47,17, -35,-9,-9,-37,-11,-70,-38,-65,-20,-73,-4,-104,-29,6,-112,-19,-57,5,10,-27,-19,-7,-1,75,-31,2,-52,-16,12,4,-45,10, -60,9,-1,-101,-13,-113,-1,-34,-12,-56,-34,-105,-3,-58,-42,-26,-55,-51,-2,-63,-90,-79,-36,-64,18,24,-40,22,-8,34,-16,-17, -15,17,-2,-123,0,-74,-15,-28,11,-31,-51,-40,-26,-32,-8,18,-35,-29,-18,6,-19,-100,-90,21,-15,20,1,22,-31,30,-5,-88, 
  /* [7][0][][] */ 6,12,13,-31,-14,-62,12,26,-6,-27,-25,-21,21,-11,15,18,10,-32,-37,29,-85,24,-20,-22,80,37,-86,17,-13,11,-11,-47, -17,6,5,-68,6,-64,-3,41,-45,-30,9,-44,-4,-19,19,4,-12,22,4,-10,-46,-21,-31,-61,14,-51,-87,11,-19,-11,1,11, -40,1,-15,-37,-16,-80,3,-6,-78,-3,25,-45,11,9,-32,2,-24,42,9,24,10,-22,2,8,43,-39,-35,-7,-41,-21,5,8, -80,-28,5,-12,-18,-68,-17,64,-127,-29,13,-27,-13,4,22,11,-26,12,33,20,25,-16,0,18,-28,-19,-11,7,-10,3,5,-12, -38,-71,-22,6,-5,-30,-29,8,-53,-19,11,-23,-20,3,-66,-32,-35,68,12,-28,18,51,-6,22,39,3,-3,-3,-28,-3,-8,8, 
  /* [8][0][][] */ -26,-11,1,-12,41,10,-33,-127,-9,-9,-13,-91,119,-118,-32,-25,-12,-48,-120,26,22,-37,-25,-12,49,29,26,-13,-30,-51,-41,-17, -74,7,-9,7,-4,24,-78,-42,-10,17,31,-72,-1,-77,-20,-13,10,-5,-71,21,-4,-24,-83,-4,37,-5,21,-8,-80,-57,-33,-22, -76,4,27,37,27,-1,-113,-57,-67,16,7,-11,38,-40,3,19,-8,28,-9,-8,-11,0,-41,20,14,-32,27,5,-34,-46,-7,-10, -46,1,-6,45,8,21,-93,-76,-98,19,-12,-12,22,-16,35,18,0,24,-3,-6,-33,-10,5,3,17,40,25,-2,-62,-4,-5,-2, -37,-54,8,10,-4,5,-55,-7,-42,17,17,-17,-38,-10,-84,-13,2,38,-3,27,-27,12,34,14,8,10,17,-10,-17,-74,-92,14, 
  /* [9][0][][] */ -38,-51,-8,-41,-29,21,-19,-22,-47,38,2,40,-4,17,15,22,-10,-37,-1,-65,16,-41,-27,13,-15,-50,14,-9,62,-41,-24,-21, -18,-105,-14,-32,-95,15,-42,-27,-38,7,35,-11,5,16,-13,-47,6,-23,27,-81,5,-39,-28,-3,-15,-20,14,5,-21,-37,1,-18, -44,-69,-9,-21,-98,11,-16,-16,-6,43,26,57,24,15,-26,-58,2,-4,12,-89,-25,-6,-8,-32,-11,6,18,6,38,-50,-4,-13, -31,-48,-12,-13,-107,1,-16,-22,2,-11,39,-15,18,16,-35,-27,-8,11,-6,-78,-37,-6,5,-115,-8,-19,47,15,-22,-71,40,-27, 3,-68,1,-18,-114,13,1,-62,15,-55,32,4,49,33,0,-15,-48,-30,-16,-109,-77,-24,-12,-127,-11,1,22,1,-38,-122,45,-63, 
  /* [10][0][][] */ -41,-6,-15,-31,62,-84,-6,-72,0,-14,52,-39,41,-100,-91,-10,41,-1,34,4,11,-33,-58,11,0,1,-63,-24,49,-11,-1,-26, -20,-26,-23,-25,-6,-83,-21,-126,12,-43,45,-76,5,-48,-46,-83,-9,-10,16,10,-7,-63,-25,12,29,-10,-61,-3,40,-75,7,-30, 23,0,5,-13,33,-7,-62,-26,-15,-11,48,-50,52,-8,-16,-127,23,-12,2,1,-11,-16,21,-6,27,11,-34,20,20,-46,-1,-12, 30,8,-10,-18,10,21,-97,-17,-16,-1,10,-3,21,0,-36,-94,12,-4,-41,-29,-45,22,33,6,11,14,-39,12,-4,-39,51,1, 47,-11,-8,7,-33,25,-55,24,-3,-20,32,1,59,38,14,-27,-1,10,-4,-37,-15,37,29,3,29,24,-35,9,-75,-8,29,7, 
  /* [11][0][][] */ 9,9,12,-56,-17,1,-14,13,7,-63,12,63,-3,-16,14,-4,56,-27,15,-15,17,-62,6,9,-6,-56,33,4,20,-2,27,10, -1,-17,5,-73,-33,34,-61,5,-13,-4,-11,33,-14,9,-5,5,12,-40,9,-50,-24,-45,23,-1,7,6,0,-16,29,-30,-3,-7, -34,-127,2,-14,-38,14,-35,-33,-1,3,14,50,13,18,8,-116,42,-30,11,-71,-27,-31,3,-28,3,-29,23,12,13,-87,-1,-9, -35,-101,2,-56,-21,31,-22,-38,-9,33,29,5,23,8,-10,-113,59,-3,14,-96,1,-35,36,-9,3,-17,16,-1,13,-85,7,-11, -35,-48,-12,-17,-44,-19,-3,-94,6,-40,20,-37,23,25,-7,-73,13,5,-21,-90,-30,-52,-3,-62,-24,-1,24,-7,-50,-63,60,-30, 
  /* [12][0][][] */ 19,-12,19,-38,-96,-46,4,22,-5,-13,-47,-4,-24,22,-38,1,-42,-35,-20,-89,33,-31,-80,29,-11,-12,18,-3,1,5,-34,-25, -5,-55,-14,-4,-45,-46,3,-17,2,8,-2,-97,-12,-41,-127,-19,-1,-42,-34,-12,-14,-37,-39,18,4,-27,-26,0,-19,1,-58,-6, -27,-93,10,14,9,-26,3,-32,-2,-13,-13,-5,-43,-124,-1,-66,26,-10,-1,16,-64,-41,-7,-16,-55,-45,-5,13,11,-104,-35,6, -15,-5,-10,-4,10,1,-2,-12,-5,-14,-26,-30,5,-65,28,-27,-2,-29,5,11,-9,-11,-5,-39,23,-51,15,1,5,-57,15,-7, -3,4,9,58,22,31,-30,3,-36,18,1,-18,35,8,21,-39,-22,-20,-33,-3,-9,-4,-14,-43,28,-43,-8,12,-10,-19,29,-9, 
  /* [13][0][][] */ -16,-19,0,4,6,-33,-46,24,-26,-51,22,16,18,-21,-4,26,-17,-68,61,30,-22,13,-23,-14,-73,25,-58,7,-6,18,46,-34, -71,-2,15,-26,20,-49,-84,-7,-25,-55,-37,11,42,22,-54,-39,-35,-56,27,10,-36,23,-14,3,-2,7,-39,24,-19,-34,44,-50, -49,6,2,-77,7,-49,-72,-25,-11,-64,3,-1,-10,9,-58,-34,-68,-12,-5,37,-83,31,-24,-28,8,9,-85,-28,-30,-13,11,-22, 3,-7,-6,-40,-5,-26,-127,-50,-61,-34,-15,-12,37,-21,-34,-65,-78,4,-14,-24,-50,37,-10,3,16,2,-42,-15,-32,-30,2,1, -15,-38,-11,-12,22,-10,-84,-11,-53,-23,21,21,0,-31,-37,-84,-8,17,0,30,-26,28,14,10,66,-45,-24,18,-22,-60,-43,18, 
  /* [14][0][][] */ 38,36,7,-19,7,-41,-9,29,7,-82,-97,39,-16,-21,14,-24,46,-71,-43,-3,-101,-14,-78,-95,-55,-1,4,15,-35,-6,-15,-39, -7,-9,8,-70,-2,-55,-7,5,-1,-127,-96,8,-32,-10,-54,17,91,-98,21,-7,-106,-30,-26,-62,-61,-9,-37,2,9,-5,-17,-18, 8,25,-21,-16,6,-17,-25,28,-9,-82,-43,30,-20,-26,-52,3,-41,-91,13,-4,-57,-18,29,-53,-105,-36,-27,-1,8,12,4,-5, 6,11,6,-6,-2,-4,-27,26,1,-77,-37,-2,-13,-27,-22,30,58,-61,14,5,-74,-4,31,-52,-72,-28,-22,-11,4,21,2,-1, -1,26,-2,-61,-2,-10,-6,-31,5,-71,-5,-10,-9,-34,-64,-45,8,-25,33,-2,-33,17,13,-25,-32,-8,-29,6,4,-31,8,2, 
  /* [15][0][][] */ -6,9,-12,-20,-68,-70,8,67,9,-70,56,-11,-67,-67,-127,3,93,10,-19,-11,-6,-17,16,13,-81,15,-8,21,-25,-4,-32,13, -14,7,-6,9,-62,-49,-29,24,-10,-81,-23,16,-53,-64,-82,5,-59,28,-17,-8,21,-29,29,18,-91,-12,3,0,-2,21,-30,16, -12,10,-17,-26,-60,-18,-64,49,-52,-6,39,20,-50,-47,-56,9,81,12,-15,10,27,-15,4,-4,-97,8,18,-6,-2,-5,-42,9, -62,-105,6,-8,5,-14,-31,63,-8,10,15,-16,-26,-58,-33,-9,-39,14,-9,4,-32,-39,12,32,-77,2,21,-17,6,-21,-47,11, -25,-79,-29,30,-2,-21,-17,-109,-3,-23,19,1,-21,-64,-112,17,-26,56,-73,-52,79,-80,35,17,-54,22,-4,8,-4,-27,-64,21, 
  /* [16][0][][] */ -40,-2,-13,-4,3,17,-8,-9,-12,11,9,17,31,10,1,-88,29,-45,-41,-48,-63,-13,38,-77,37,-41,-20,-14,29,-48,51,-24, -19,-14,9,-45,-53,50,-20,10,-12,0,-23,51,36,30,2,-66,-20,-76,-31,-55,-82,-15,58,-78,2,-25,-25,3,-1,-15,17,-55, -2,-11,6,11,-86,45,-26,-4,4,-3,44,76,3,19,-3,-9,-18,-125,-67,-35,0,-56,44,-99,-72,-68,-30,-11,-67,18,-5,-28, 14,-4,6,-13,-20,4,-1,6,-7,37,-25,13,-29,-5,-35,-17,-66,-127,-72,-5,-19,-54,-16,-41,-85,-39,-52,-7,-34,9,15,-13, -1,-3,33,14,-14,34,3,8,-21,6,79,48,6,-50,-14,7,78,-29,-45,-5,-57,-6,21,-60,5,13,-23,1,-33,19,24,26, 
  /* [17][0][][] */ 26,7,-6,19,7,-21,6,15,-1,11,-56,5,12,23,29,-2,-47,-7,-17,30,-32,-52,-39,-67,18,-15,-21,-8,-71,1,43,-121, 15,5,13,10,5,-20,2,27,5,2,-67,-17,10,3,8,-2,-35,0,-30,-41,-28,2,-17,-36,33,-11,-35,17,-77,-14,20,-127, 10,16,-4,-11,-34,22,-3,15,-2,-17,-62,-35,-9,24,-14,15,-27,-26,-30,-18,-1,12,15,-46,24,-53,-51,10,-95,8,66,-76, -2,12,0,1,-49,35,-14,9,1,-20,-59,-37,-5,21,-31,6,-30,-85,-5,-19,-17,-12,4,-89,-8,-112,-37,-2,-93,6,-11,-101, -13,12,6,34,-40,32,-20,6,-7,-22,-7,-14,-11,42,-16,13,-31,-48,-27,8,-34,-11,-11,-63,-7,-77,-50,11,-60,21,63,-81, 
  /* [18][0][][] */ -74,6,-3,-28,30,-72,3,-89,-9,-116,-33,-94,-59,-127,-62,26,-63,-64,-108,13,-13,-10,-6,-26,-40,22,-42,-14,-53,-41,-88,-68, -85,11,-7,-12,29,-83,-32,-65,-19,-75,-1,-87,-73,-65,-65,29,-81,-18,18,6,15,-14,-73,-80,-45,-21,-18,-19,56,-17,-32,-39, -44,-8,3,-29,18,-94,-56,-49,-10,-63,6,-37,-46,-56,-44,16,5,-1,34,-14,21,-23,-62,4,-67,-27,-37,8,39,-9,-5,-12, -20,-27,-11,-36,20,-73,-55,-34,-32,-52,-4,6,-17,-73,-6,33,23,-13,32,-50,0,-64,-33,15,10,-8,-49,11,24,-21,1,19, -13,-47,-3,-11,-33,-19,-89,-17,-24,-80,27,28,13,1,8,-75,15,-60,27,-31,0,-63,-11,-16,26,6,-37,-4,60,-36,35,9, 
  /* [19][0][][] */ 15,26,19,40,17,-2,-4,-40,5,24,-78,-40,15,-61,30,-3,-92,-127,-28,-12,24,-18,-115,-24,-41,-52,45,29,-36,-2,-11,-71, 4,20,14,43,13,23,-13,-24,0,13,-73,1,5,17,36,6,22,0,-41,-20,47,6,-1,28,3,-21,32,-7,-23,19,1,-39, -35,36,3,39,-4,-14,-17,-24,-1,4,-83,-38,-32,-4,39,4,23,30,-40,-21,30,-3,14,30,-90,-22,-18,11,21,0,-112,-2, -30,21,10,-36,-28,-55,-10,-59,-4,20,-70,-29,-7,-84,8,-16,-74,35,-106,-12,7,-30,-17,-6,-86,-55,-8,-18,1,-20,-73,-8, 33,5,5,15,-13,-17,-4,-21,13,-73,-104,-40,-30,-107,-24,-11,-59,-42,-73,-10,-48,-6,-89,-106,-46,-66,-5,5,-27,13,-42,-29, 
  /* [20][0][][] */ 38,-16,6,12,31,-103,-3,44,-13,-96,35,-10,-4,-37,-59,57,14,-125,52,26,-27,-24,-115,-94,-124,59,-18,-25,37,18,96,-94, 48,-4,10,-28,-36,-54,-15,27,-34,-81,20,-5,-11,1,-36,61,28,-109,40,46,-69,-35,-51,-37,-72,-19,-61,33,54,23,36,-17, 59,4,6,-31,-41,-85,-40,7,-115,-73,-3,-15,12,15,-16,70,46,-127,50,43,-73,24,-14,-44,-81,-3,-52,-16,70,24,79,3, -61,-1,-27,-58,-26,-41,-106,-16,-70,-104,-19,11,-5,10,-16,-47,-11,-96,26,33,-75,34,6,-91,-51,24,-64,-3,25,-28,4,-9, 8,22,25,6,-14,8,-77,-15,-36,-64,-19,4,12,-9,5,12,44,-27,-15,22,-36,55,27,-62,-3,35,-40,-5,9,-23,67,-16, 
  /* [21][0][][] */ 2,11,1,-47,18,-20,-8,36,15,-88,-27,10,-4,-36,-6,41,-70,-50,49,11,-46,-30,-60,-11,-52,-8,24,8,-34,-12,-8,7, -1,17,17,-7,19,-13,3,-8,-7,-92,-8,16,1,-21,22,15,-62,-33,19,-2,-36,-21,-69,-12,-36,-28,12,-22,15,-44,-18,32, -34,12,-3,-61,10,-19,-21,2,-6,-65,0,-8,-32,-11,9,26,-66,-47,36,-5,-22,-44,-60,-14,-24,-14,26,0,39,-24,-36,29, -21,19,-4,-30,6,-39,-16,-7,-9,-83,-5,-11,-18,-82,-7,24,6,-58,41,-2,-16,-51,-72,2,-8,-10,-20,-9,-22,-1,-25,5, -8,16,7,-23,-21,-5,-6,-9,-49,-127,18,-15,1,-25,-7,61,-12,-41,-23,14,-10,-32,-3,5,-21,-63,-18,-11,63,-8,12,-4, 
  /* [22][0][][] */ -34,5,13,11,15,26,-25,8,-4,5,53,-5,-21,31,-81,-87,15,-6,-79,-14,-34,8,29,-112,-43,-44,-1,-27,-27,-44,-12,-17, -22,15,-2,45,-6,38,-54,45,-23,3,80,-5,-29,85,-92,-53,-12,-9,-33,-14,5,3,-18,-50,-43,-47,24,0,-78,6,19,14, -62,-25,-19,83,10,-45,-84,28,-127,-8,10,-61,-56,-36,-56,-13,-22,0,-34,34,22,-6,-46,-5,-88,-18,18,40,-25,31,47,31, -74,-56,-11,84,25,-36,-79,19,-109,-52,67,-64,-9,-57,-24,-37,-37,-6,-46,7,8,-9,-13,-2,-39,-12,80,14,-14,26,-41,23, -41,-32,-22,34,-34,16,-30,50,-49,-75,30,74,1,-95,106,-46,-35,54,-102,-52,70,-25,4,38,19,-43,69,-21,-24,33,-41,16, 
  /* [23][0][][] */ 12,4,6,73,-10,11,1,16,-1,21,-86,29,10,-7,-19,17,-35,-58,41,0,-9,21,-27,-7,-16,7,19,-22,-52,5,23,-44, -5,3,-9,33,-5,-2,-44,-1,-10,46,-81,20,-8,-9,14,-4,-28,-35,4,10,-53,0,20,-24,-13,7,41,-3,-16,-8,5,-39, -60,9,-3,44,4,40,-127,-11,-40,-58,-36,35,5,1,-1,-39,-64,-10,5,15,-55,18,43,-41,-17,-7,36,-4,6,-27,13,-33, -65,-11,18,25,-1,2,-56,-23,-19,64,-37,51,9,16,2,-53,28,8,-16,14,-40,15,6,-40,-29,1,-7,-22,-12,-27,2,-14, -46,-63,25,27,6,-2,-19,-25,2,-2,-11,-26,-5,-14,19,-62,-85,-5,-25,38,-22,6,44,-21,-22,5,66,-9,-22,-62,-16,-1, 
  /* [24][0][][] */ -38,7,-14,-16,12,-44,-63,-69,-8,-68,-19,-45,31,-32,-87,-10,-38,-48,21,8,7,-40,-32,12,27,-10,-84,8,32,-32,-35,-12, -38,25,27,-20,5,-46,-22,-59,-26,-54,2,-36,36,-40,-66,24,-32,-21,-68,10,-23,-48,-77,-59,44,4,-15,4,-10,11,-48,-11, -73,1,21,-44,11,-27,-22,-60,-32,-42,5,-48,24,-42,-5,9,-69,38,-48,9,-57,-37,-83,1,24,-24,-40,17,-127,8,-62,-68, -21,5,-9,-55,-18,-77,-18,-45,1,-49,22,-101,-11,-50,-5,-39,-97,29,-9,-33,-68,4,-66,54,78,-9,-102,4,-83,-47,-102,-23, 30,-21,-22,-19,3,-120,-15,-67,5,-34,14,-68,-109,-22,-34,-60,-26,43,39,-26,-50,45,8,51,-3,19,-72,0,-28,-90,-60,5, 
  /* [25][0][][] */ 46,-12,-3,-3,7,25,-125,37,-127,23,-13,37,31,27,-23,-5,-4,-10,7,7,18,13,12,-1,-2,-84,2,-2,14,1,26,12, 7,-37,5,-53,-25,-12,-84,4,-78,27,-11,-13,9,15,-19,2,-22,-7,15,1,-3,-14,-1,4,-51,10,25,6,10,7,22,23, -44,12,4,-26,-24,-3,-21,-50,-32,30,8,-3,-9,7,-20,55,-77,-18,-6,-49,-48,-69,-70,-7,-22,-70,40,-1,9,14,-13,7, -17,33,-9,-50,-21,-7,-7,-26,-24,14,0,2,7,2,-28,45,14,-43,-30,-32,16,-108,-95,-52,-1,-119,37,-2,12,21,-24,-108, 11,16,33,-64,-15,-13,2,-16,-12,-65,26,77,-23,-34,14,50,32,-24,-8,-27,24,-52,-26,12,4,-19,-26,-12,-34,21,-42,-119, 
  /* [26][0][][] */ 8,39,-7,-20,-3,-26,-2,-10,16,-28,-44,-15,-3,6,41,-35,1,-20,-101,6,-13,-15,-67,-108,-8,-25,-4,-16,-94,4,5,-42, -19,-6,-12,5,0,2,-17,-23,0,9,-23,-57,28,14,-40,-49,-35,-23,-127,-1,-101,-10,-12,-42,2,-40,-18,11,-92,-15,-14,-62, 10,22,-4,-4,4,-17,-15,-3,2,-13,-20,-49,-8,13,28,-30,-34,2,-124,3,-7,7,-52,-3,9,-38,-14,0,-89,-3,-3,-49, 2,17,-34,24,-1,-8,-11,-17,0,8,11,-46,30,27,-11,-4,-15,-35,-73,-50,3,-7,-6,-50,53,-33,-11,9,-37,-1,27,-50, -16,11,-9,12,-35,10,-17,-19,10,-16,24,-28,21,45,-61,-54,-8,-37,-34,-42,-49,9,10,-36,11,-31,-57,-15,-21,5,7,-30, 
  /* [27][0][][] */ -4,-25,-8,-8,-8,29,5,-71,1,-26,2,-13,-30,-30,-66,-26,-18,-3,-80,-36,110,1,0,26,-73,-9,26,-3,13,-11,-20,15, 5,-29,0,46,-68,-9,-6,-48,3,-69,36,-74,-66,-107,-93,-70,-35,6,-61,-57,-70,-1,22,53,-127,-8,-26,1,-16,-19,-86,6, 10,5,-3,-22,-71,26,-15,-12,-13,-41,-17,-75,-82,-38,-48,-59,-25,-35,-31,-6,117,16,-17,-28,-46,11,-28,-16,23,1,-39,-5, -15,-2,-23,7,-33,10,-22,22,-5,3,4,-50,-67,-43,-35,-67,-16,19,-48,-3,3,38,-14,-5,-36,1,-3,3,-16,20,-11,13, 53,-6,-1,2,5,-8,1,-23,-9,3,51,15,-58,-36,-74,-52,18,38,-57,14,3,22,25,54,-95,2,-32,-22,5,5,-34,21, 
  /* [28][0][][] */ 2,-17,7,-6,-61,-24,-7,-6,0,-30,-117,-28,-127,-113,-82,-39,-19,-53,-53,-70,-97,-14,-55,14,-49,6,-20,-13,-69,0,-88,-95, 36,9,-17,-18,-56,0,-2,20,-1,-26,-86,-50,-93,-77,-63,-35,57,-57,-17,-10,1,3,-23,6,-76,-4,-4,-15,-16,6,-14,-27, -18,7,-7,-5,-24,-23,4,5,0,-46,-52,28,-12,-33,-39,-16,9,-44,-8,-11,11,14,48,-6,-13,1,-10,0,3,-14,-6,2, 29,7,-9,-12,-16,11,3,-23,-3,-8,-35,11,-8,-20,-17,3,37,8,-12,-17,0,-5,-10,16,-25,1,-20,5,-4,3,2,-7, 25,2,-5,-6,2,2,-71,23,-14,-18,-30,-7,-16,-13,-44,-14,11,5,0,-9,-31,12,42,-2,-26,8,-18,3,1,10,-19,5, 
  /* [29][0][][] */ -25,-33,-3,-15,7,8,-3,-73,-8,-20,-45,-49,3,-127,7,-1,-48,-61,-104,1,-22,-28,-70,-59,-94,27,1,-3,-81,-5,-77,-42, -46,-1,6,53,-4,12,-5,-17,-6,15,-28,-2,2,-72,2,-6,-14,-19,-42,10,-12,-1,-59,-52,-40,-9,40,9,-67,0,-36,-8, -59,15,10,29,5,27,4,4,-15,18,-49,-44,10,-45,39,9,-70,41,-4,11,-17,3,-22,-44,3,6,1,8,-47,-11,-4,-30, -43,17,8,71,-4,-16,-4,16,-20,-10,-59,-51,-1,-14,-28,10,1,39,-31,11,-52,8,0,-25,2,-30,35,9,-59,-31,-5,-8, -89,32,1,32,7,19,-18,9,7,36,-13,-23,15,10,59,-2,-14,19,-19,-7,-57,-11,11,-34,20,23,34,-6,-41,-16,-26,-7, 
  /* [30][0][][] */ 26,14,11,7,21,-39,-52,-6,-42,13,-7,0,38,74,25,15,-20,-22,19,26,-2,34,-2,23,15,-42,-27,12,22,7,45,11, 12,-4,-3,-4,-10,-12,-68,-7,-56,1,-9,-28,11,-21,27,-27,-10,-2,36,-37,-3,0,-12,5,28,-60,-28,-3,-12,8,3,13, -8,7,-33,17,-77,-80,-9,-13,-49,-13,-4,-71,25,83,12,-2,-8,-3,19,-55,-10,-64,-33,-7,33,23,-81,16,42,29,8,-12, 1,14,-14,31,-127,20,-14,16,-38,-6,16,36,-3,-54,73,39,-1,-45,-63,-49,-40,-75,-17,-60,43,19,-104,-18,3,38,55,-34, 8,1,-14,-13,-66,30,-25,-12,-31,-7,24,-3,52,81,55,55,-75,-43,-50,-41,-30,-13,-4,-22,78,20,-20,34,-92,44,18,-90, 
  /* [31][0][][] */ 13,7,6,-27,-46,-63,-9,30,-4,-12,-127,36,-57,0,30,37,-23,1,-52,-92,-87,-17,-37,-35,-8,13,-31,2,-72,-12,-13,-93, -13,5,-1,4,-61,-20,7,21,-2,-3,-57,32,-31,-2,21,15,-27,-6,7,-38,-18,-27,-23,9,4,8,-17,-15,-54,-14,-2,-84, -19,6,18,-22,-43,-10,4,19,-9,17,-27,26,-33,2,26,18,-66,31,21,-9,-13,-2,-22,-7,23,-3,-20,11,-61,5,-4,-71, -21,-1,10,-43,-32,-2,-4,-8,-20,3,-9,42,-27,4,6,24,-49,5,3,17,-30,0,-24,-17,-3,-29,3,5,-10,2,-1,3, -4,-39,-15,-12,-33,0,-20,12,-25,16,-12,40,2,14,23,22,-23,13,35,13,-10,19,-20,-12,14,46,17,7,-4,-6,13,12, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 32,1,5,32 } };
const TfArray<32, float> quant11_scale = { 32, { 0.0059375762939453125, 0.011899929493665695, 0.008699675090610981, 0.0054696309380233288, 0.0099314562976360321, 0.0080498578026890755, 0.0065093557350337505, 0.0071819201111793518, 0.0064651970751583576, 0.0077916369773447514, 0.0062140007503330708, 0.0070423167198896408, 0.0090825138613581657, 0.0068808454088866711, 0.0072204391472041607, 0.0063518807291984558, 0.0059944726526737213, 0.0079565923660993576, 0.0075582400895655155, 0.0067917280830442905, 0.0045273471623659134, 0.0075950161553919315, 0.0050629707984626293, 0.0070148967206478119, 0.0066527272574603558, 0.0073303552344441414, 0.0077658980153501034, 0.0063039669767022133, 0.010158353485167027, 0.0084453867748379707, 0.0054147602058947086, 0.0090285772457718849, } };
const TfArray<32, int> quant11_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int8_t tensor_data12[16*1*5*32] = { 
  /* [0][0][][] */ -9,9,35,-13,22,45,48,16,42,-32,19,-39,3,-11,-52,-29,-46,-31,-16,15,-39,-27,-2,-33,32,1,7,14,11,23,0,-27, -5,3,10,-11,-5,-3,9,22,27,-23,5,-44,21,-3,-31,-37,-53,-50,-4,-1,-36,-24,-14,-14,49,0,6,0,6,0,8,-1, -11,9,4,7,-4,25,16,5,22,-39,17,-45,10,-5,-50,-16,-78,-44,-39,5,-43,-57,0,-5,30,-20,7,0,17,18,10,-11, 8,21,11,-11,10,6,29,15,16,-50,11,-50,-11,-5,-49,9,-90,-38,-14,21,-60,-29,-2,-6,4,-2,-9,7,12,-11,-3,5, 4,18,18,4,-4,31,19,13,37,-26,-3,-18,-59,1,-54,-3,-127,-55,-40,17,-51,-14,6,-18,55,9,-39,11,-9,2,1,-16, 
  /* [1][0][][] */ -18,12,-16,-34,6,-29,-62,-31,10,-8,4,-8,15,-14,-16,-24,50,47,-127,3,3,-38,-33,14,-44,11,12,-8,13,10,-7,-20, -6,3,-21,9,-2,-40,-55,-26,5,-31,-6,-1,-11,14,-5,-3,23,22,-92,7,-1,-19,39,22,-60,32,6,0,28,9,-5,4, 16,-15,-11,10,0,-20,-62,1,3,-23,-17,16,22,17,6,1,16,15,-53,-6,17,-8,18,34,-33,4,-5,3,20,-6,-22,8, 15,-8,-46,-27,8,-29,-23,13,-13,-14,-32,15,-2,-7,2,8,22,9,-56,9,-7,-16,26,29,-35,-9,-33,-1,8,10,-38,-10, 13,43,-27,-41,-17,-54,-18,7,-10,11,-26,14,-49,37,-8,1,14,-69,-38,-16,-8,-18,23,25,-39,-22,-58,11,-37,-49,-68,-57, 
  /* [2][0][][] */ -123,15,26,13,10,-46,-5,-50,-6,-72,-8,-54,39,-26,27,-13,25,9,-27,39,9,-1,1,-20,-8,46,37,45,60,-24,14,-6, -81,-11,-9,6,-16,-43,-1,-101,-39,-127,-25,-15,-32,-31,46,-11,12,28,10,39,5,0,-3,-20,12,49,19,12,34,-34,21,-29, -64,-51,-46,26,-50,-45,-4,-48,-16,-63,-91,17,-5,-21,25,-11,21,-2,11,42,-9,6,3,-64,32,42,28,-27,-12,-4,-5,-6, -113,-20,-46,1,-60,-43,-3,-112,-60,-62,-92,-24,0,-32,35,1,-56,5,20,17,-9,29,-49,-113,51,2,14,-68,-57,-2,-21,-59, -88,-29,-15,24,-20,-117,14,-99,-41,-53,-47,-51,-64,-33,36,-25,-9,-3,4,57,-28,41,-62,-97,-1,48,17,-27,-15,-68,-41,-66, 
  /* [3][0][][] */ -25,41,-48,-56,23,55,-30,-4,-5,8,-25,-2,-20,-23,-24,-43,-10,2,-106,20,-96,-13,-12,24,-10,13,-6,-29,-8,22,-19,28, -20,3,-75,-22,5,-36,-5,3,-19,29,-42,-4,-16,-54,-15,-87,-11,-6,-65,-7,-127,-5,-12,2,-11,6,-10,-58,-24,15,8,33, 0,26,-85,12,7,44,10,12,-36,5,-60,11,-9,-46,0,-23,-3,10,-1,-39,-1,8,-17,15,-6,15,-14,-25,-13,21,1,-2, -3,5,-76,3,9,-11,7,17,-43,-3,-36,9,-33,11,-4,-16,1,9,1,-41,2,-8,-23,11,-1,25,-13,-24,-31,-14,-13,31, 2,21,-28,10,9,31,11,4,-54,29,-18,-10,-50,3,-14,-34,-17,-20,-29,-36,3,17,-11,15,-2,34,-11,-41,-72,-4,0,25, 
  /* [4][0][][] */ 61,60,-42,-12,60,-23,19,17,59,-21,-16,21,-4,-74,37,111,-13,-80,-56,-2,-7,-4,-20,-20,-29,-3,-59,16,63,96,-90,4, 26,18,-82,-94,36,-45,0,18,6,-41,-13,1,14,-112,7,-29,5,-106,-98,-3,-20,-26,23,31,-46,-87,-83,38,-12,42,-106,-12, 39,15,-12,-78,53,-10,-14,-15,56,-71,3,8,12,-86,17,81,11,-85,-71,5,2,-63,-11,-2,-40,-45,-21,24,30,13,-110,-48, 28,16,2,-36,-2,-42,-27,0,18,-12,7,-18,4,-127,53,37,-13,-32,-78,24,-16,-13,28,41,-32,-20,-21,30,4,-5,-108,-42, 23,27,-6,-35,13,-76,24,3,-1,-27,-17,-1,-24,-114,-3,59,4,-18,-63,87,-17,-30,9,14,0,-13,-41,41,65,47,-88,-25, 
  /* [5][0][][] */ 25,-81,-41,-35,0,-1,-98,-12,-51,23,18,12,-58,48,52,0,-6,7,52,-41,60,-26,-96,-3,-59,-51,-56,-28,11,-76,14,2, 40,-121,-5,-43,-18,-33,-86,-12,-46,0,2,-10,-62,27,16,22,9,-19,-45,-9,-7,28,-32,13,-111,-103,-54,2,38,-35,-33,-12, 10,-65,-10,17,16,-30,-53,-2,-31,-39,-13,7,-86,-2,40,8,12,10,89,-73,96,29,-19,3,-114,-34,-35,-20,-4,-28,-6,24, 25,-14,-75,-33,-9,15,-14,-11,-125,32,3,37,-107,3,21,18,-11,5,41,-62,-50,18,-42,33,-79,-6,-23,-110,23,-47,24,2, 44,16,-3,7,-59,-7,-10,-19,-127,11,14,-8,-32,12,2,-21,5,-36,7,-12,105,18,-69,29,-12,32,-45,-116,-5,-95,19,-16, 
  /* [6][0][][] */ 26,-54,24,25,44,1,41,14,9,-80,-33,-12,-80,14,19,-12,12,-31,-18,-12,37,-15,-45,11,14,-3,-53,-13,62,-13,-30,2, 19,-64,14,10,29,5,25,-37,-24,-80,-39,4,-15,-19,13,22,-8,-31,-5,-33,-2,-3,-52,-1,39,33,-34,-26,-23,-14,14,1, 12,-53,13,15,42,-75,-27,-6,-15,-63,-30,0,-32,-42,2,-1,19,-30,22,-19,-8,19,-34,-12,39,36,-34,-44,-43,23,-14,13, -38,-42,-27,10,72,1,24,-5,-21,31,-7,1,-41,16,-16,-10,-55,-96,25,-40,17,11,-67,-4,22,26,-29,-48,-87,-12,24,-22, -127,-7,-20,34,32,8,9,-25,-53,86,29,-12,-14,-3,-35,-101,-27,-61,25,-36,5,57,-50,-34,-12,37,-33,-63,-107,-44,56,-67, 
  /* [7][0][][] */ -23,8,9,-76,-10,-5,-127,-45,-3,51,28,40,6,-21,14,8,19,7,3,3,10,8,-5,-12,-6,11,8,-30,3,-14,10,-6, -4,-2,17,-40,5,1,-72,-83,-12,18,0,23,-6,-22,13,8,33,3,61,-1,-8,8,-4,2,-33,10,4,-11,-24,-10,12,-4, -1,-4,19,-69,-24,-4,-118,-20,1,45,19,15,32,-11,-14,-15,54,15,7,-25,-4,2,11,2,-41,-2,31,-17,-70,-5,26,-12, 14,-10,-22,-77,-46,-35,-58,-40,1,4,5,17,-12,-1,-57,-72,14,-18,37,11,-10,-15,19,2,-58,36,-12,-21,-92,-19,17,-43, 2,-6,-25,1,-53,-118,-27,-58,-11,65,-2,26,-25,-14,-36,-27,35,1,47,20,7,-44,24,4,-63,26,-28,5,-43,-28,34,-79, 
  /* [8][0][][] */ -31,-10,-44,12,-14,8,0,18,-30,-68,-90,-32,-19,-28,29,-22,-23,2,5,-1,7,40,-9,-30,14,-10,-3,-71,-13,11,11,23, -22,-22,-41,18,-11,2,-6,4,-44,-29,-65,-59,-35,4,17,-4,-22,-5,11,14,2,21,-7,3,3,-7,6,-43,-9,1,-2,5, -11,-25,-7,7,-26,-6,8,39,3,-65,-12,-82,-5,26,8,-14,-57,9,5,19,8,7,-19,-4,31,12,4,-32,-21,-4,9,9, -8,-37,-14,3,-32,3,-4,1,5,-127,-8,-81,-20,-1,6,-4,-64,-8,-1,5,4,25,-16,4,23,8,-19,-32,-23,-18,0,-9, 3,-52,2,-4,-29,-7,-13,38,-16,1,8,-10,-25,16,11,3,-72,-1,17,19,3,18,-17,2,27,2,-5,-30,-47,-17,-4,3, 
  /* [9][0][][] */ -20,-40,37,-29,-55,-65,-22,-2,13,-11,62,6,-5,4,-15,53,33,-3,85,-18,0,19,45,-30,-1,41,-21,38,-38,-46,37,-64, 2,-56,0,16,-38,-80,-11,12,-6,0,13,11,-44,-7,-14,7,-11,14,24,-16,-22,21,22,-22,-3,28,-12,48,-12,-25,3,-18, -8,-9,19,36,13,-59,6,3,-5,-1,1,18,-21,-15,2,20,9,-31,17,20,-1,5,24,-10,-17,-45,-27,27,-7,-14,-20,10, 3,-11,11,9,15,-86,31,22,-7,20,5,-10,-13,-57,-11,30,10,-91,40,-5,-6,15,-45,-51,-46,-5,-38,19,-15,-29,-9,-2, -38,-25,2,37,-13,-57,11,40,6,-36,15,-28,7,-24,-21,30,-31,-52,-11,-10,-11,32,60,-127,15,-17,-20,38,-2,-68,-14,-40, 
  /* [10][0][][] */ -33,-73,-125,-91,-46,8,60,-19,-105,-3,-48,-33,14,-127,-49,29,-10,-1,-53,-7,-55,21,31,-69,-28,38,5,72,-12,5,-11,26, -41,-69,-35,-29,-53,36,-29,36,-84,-29,-27,-23,39,-99,0,27,-6,0,-24,-9,-73,-12,34,-67,-15,-73,16,-28,18,8,5,21, 20,-37,22,8,15,-10,31,23,-29,-22,19,-40,11,-60,11,23,15,5,-8,-42,-11,10,15,-47,8,-11,44,20,20,-15,3,14, -10,-54,-1,-3,10,5,14,25,-38,-30,-42,-25,21,-34,-21,9,-27,-26,-9,-28,-3,8,57,-30,-48,15,-30,51,-12,-56,20,7, -19,-53,25,75,-14,2,46,-4,-85,-20,-31,-10,15,-58,-30,12,8,-20,-27,22,3,10,45,-40,14,74,-114,23,-59,-25,69,-60, 
  /* [11][0][][] */ 40,17,-7,-12,-40,-10,-60,15,53,-127,24,-92,31,41,-28,-89,-21,44,-9,-19,25,-11,-12,42,-25,-118,53,-56,-76,40,-11,-17, 31,0,12,-93,-22,-21,0,-5,15,-82,44,-90,35,2,-31,-46,-21,-2,-30,-2,12,-18,17,12,21,-28,-28,-48,-35,20,-23,-25, 8,5,35,-18,-40,-26,2,-16,12,-9,42,-3,52,22,-27,-25,-19,-36,10,-39,-8,18,18,18,20,-18,32,-2,-32,24,-15,-49, 14,-10,-10,-13,-26,-22,-33,1,41,-19,14,-6,51,12,-32,-30,17,-11,5,-34,-14,5,14,13,16,10,3,-40,-37,5,34,-57, 37,-12,-33,-21,2,-18,-31,-7,29,0,18,11,76,10,-13,5,-10,-46,32,-41,7,-18,15,-11,19,-10,-34,-29,-38,-16,41,-65, 
  /* [12][0][][] */ -36,-29,-44,1,-82,9,-7,41,11,-51,-9,-80,7,68,-8,-17,15,78,-50,-59,42,8,43,-23,-9,34,28,-50,-6,12,26,40, -25,-50,-51,33,-67,-9,-7,10,-21,-72,-15,-53,1,2,-20,25,15,-19,-48,-26,0,-17,16,-3,8,23,2,-6,-34,-1,20,2, -1,-27,-31,-22,-127,13,31,24,-23,-15,-14,-16,30,24,-41,-5,-12,92,-53,-13,10,-76,36,7,-28,-4,-3,17,-64,6,9,19, 25,-62,-5,-48,-53,8,7,16,-48,-16,0,-17,3,3,-51,6,-26,-8,-58,-71,-8,-96,-27,3,-57,-22,43,20,-27,-9,0,1, 23,-44,13,-9,-32,22,10,20,-33,-33,10,-10,-9,-10,-50,-33,22,33,-28,-57,-4,-26,67,-7,-36,-9,41,5,-48,-3,10,-11, 
  /* [13][0][][] */ -17,45,-42,9,4,19,0,-12,-18,5,-10,10,25,-65,-10,-26,-1,2,-34,-7,-8,-21,-14,30,-35,45,-3,-1,-33,29,14,24, 5,25,-52,-37,20,23,-31,-3,-4,10,-14,9,12,-35,-33,-26,-10,4,-72,-2,-6,-28,-17,14,-6,33,-6,-2,-20,3,17,41, -2,18,-6,-54,29,14,13,-11,-5,23,-30,9,15,-37,-32,-5,-10,3,-67,6,-81,-45,5,22,-15,-4,5,-5,-35,-7,21,8, 10,50,-66,15,-2,23,2,8,3,-8,-43,18,-28,-63,-93,-9,-8,-19,-25,2,-127,-25,-2,-21,-18,6,-24,-20,-37,28,9,32, 0,13,-39,-36,28,30,13,-11,-5,51,-26,1,16,-71,-81,-24,-12,-42,-25,-19,-85,-29,5,51,-45,29,5,-19,-39,40,-2,6, 
  /* [14][0][][] */ -28,-56,0,52,44,4,7,-26,-7,-68,-14,-99,-78,-10,-28,-13,7,-67,-14,13,22,41,-5,-41,-5,43,-80,10,22,-127,38,-21, -69,-41,29,24,3,-27,14,-35,-100,-101,-76,-99,-68,-24,-36,-29,-20,-7,-18,25,-23,-7,-31,-33,17,1,-11,11,-32,-108,14,-25, -35,-47,-12,11,-11,-45,17,21,-81,-36,-60,-34,-56,-62,21,-4,18,22,-24,4,0,-14,6,-44,2,9,-14,25,41,-37,-7,19, -5,-23,-47,5,19,-49,-25,21,-40,-57,-33,-12,-48,35,21,24,-4,-5,-4,-29,20,10,11,14,-27,-48,-20,4,9,-24,-53,12, -1,-20,-11,47,-1,-17,20,33,-28,-41,-10,-10,-78,-8,31,45,-11,-25,7,-71,5,-4,19,15,-30,17,-50,-11,4,-33,-44,30, 
  /* [15][0][][] */ -27,-9,36,-4,51,7,2,-35,-31,42,-27,28,-70,-45,23,3,-18,-44,36,-14,-4,47,-41,-7,-7,19,-47,14,52,-29,-10,10, -24,22,17,-21,35,10,2,-52,-60,-12,21,29,-71,-68,17,6,-22,-104,-4,18,19,-2,-53,-20,-46,36,-70,13,14,-56,7,-1, -17,22,43,23,-2,5,11,-107,-63,20,32,-1,-45,-66,-6,-1,-4,-47,-37,23,8,-6,-90,-1,6,27,-57,11,16,-62,21,-41, -10,16,-18,48,33,-38,-17,-83,-52,-45,5,-9,-44,-44,15,5,9,-37,-12,12,8,-28,-65,5,42,11,-18,14,31,-12,-11,-34, -4,-33,56,-1,41,-6,10,-127,-75,-43,-22,10,6,-59,-2,-34,-20,-36,-5,23,-5,-46,-91,2,17,36,-32,13,0,-26,5,-50, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 16,1,5,32 } };
const TfArray<16, float> quant12_scale = { 16, { 0.0081069869920611382, 0.0066857491619884968, 0.0047873924486339092, 0.0081486478447914124, 0.0044514895416796207, 0.0042185494676232338, 0.0052943308837711811, 0.0058741997927427292, 0.0091201905161142349, 0.0055463989265263081, 0.00482170470058918, 0.0049563273787498474, 0.0047100894153118134, 0.0068024559877812862, 0.0063483794219791889, 0.0061200601048767567, } };
const TfArray<16, int> quant12_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(8) int8_t tensor_data13[8*1*5*16] = { 
  /* [0][0][][] */ -22,-40,-84,-33,-26,16,34,27,22,54,-2,51,-34,-127,-11,-17, -15,-16,-69,-69,5,16,-30,2,-20,60,-17,4,21,-69,-9,21, 18,3,-85,-84,13,21,-18,7,-52,41,34,-1,1,-45,13,30, 12,6,17,-66,6,25,18,5,-63,46,21,10,-10,-21,31,21, 14,-4,32,-46,0,12,36,3,-50,42,12,-6,13,-10,64,16, 
  /* [1][0][][] */ 5,0,-19,24,-49,-24,-43,14,93,87,-3,-80,107,54,15,-73, 9,2,-43,7,23,-86,-72,-4,-24,-42,7,-42,54,19,-26,-82, 31,36,7,-20,14,-60,-83,14,16,22,24,65,84,-10,28,-123, 6,57,-15,-7,19,-35,-49,-8,10,17,47,-36,75,10,-2,-127, -5,6,-4,1,6,-39,-31,-2,-12,13,32,63,40,4,-42,-58, 
  /* [2][0][][] */ 125,-67,-60,25,-38,-127,12,-73,-19,-29,41,14,28,23,-61,-61, -10,-47,-40,27,-24,-6,22,-26,29,12,61,3,30,9,5,-59, 2,-33,-20,55,-23,26,43,-5,27,22,46,-5,18,22,24,-14, 7,2,-4,22,-29,13,39,-16,14,26,63,-4,39,27,36,19, 12,-3,15,16,-30,-5,36,-14,23,32,53,-27,45,44,92,12, 
  /* [3][0][][] */ -10,-25,12,-38,0,7,1,-27,77,13,2,-1,-26,-127,9,14, -42,-39,61,-71,-9,-30,-13,-33,21,10,-22,-8,-16,-94,-29,18, 25,-41,1,-61,-31,-24,21,24,2,-12,22,3,-18,-74,-16,2, 19,-29,49,-52,-57,-10,-3,5,-6,1,-9,10,-13,-31,-9,-1, 6,-20,22,-23,-55,-26,-23,17,-2,-13,-35,18,9,-1,26,-7, 
  /* [4][0][][] */ -127,7,-47,-18,-36,-25,-77,-37,-1,-61,-21,-91,-46,-30,-44,-19, -61,5,1,10,-6,10,-12,-23,-4,-31,-20,-17,-12,-12,36,-42, -95,38,5,9,-1,70,15,14,-2,1,7,-20,2,-1,56,-9, -100,35,19,-6,4,55,36,33,7,13,-7,-19,14,-4,7,17, -100,24,-5,-6,10,59,27,62,-22,24,-40,-15,5,-11,-11,7, 
  /* [5][0][][] */ 77,-12,-35,-62,-34,-23,39,106,-21,1,-72,-68,-93,-114,18,75, -82,-22,-47,31,-16,-11,39,-47,-114,-34,-8,12,-9,62,-33,92, 40,55,-86,51,17,-6,19,63,-127,-71,-10,16,-34,74,-55,-26, 9,26,-6,52,12,-16,-1,36,-76,-22,-26,13,-24,52,-70,11, 9,34,30,67,0,-33,-18,88,-51,-34,-47,16,-20,76,15,23, 
  /* [6][0][][] */ -25,40,-59,43,-32,37,-23,-41,36,-127,-58,-22,42,-16,19,-59, -51,0,-59,-4,-22,16,3,-20,17,-63,-43,59,41,13,-34,-15, -21,5,-29,7,-25,25,-5,20,0,-25,-6,68,20,8,-28,-17, -4,-5,28,3,-27,13,0,3,5,-22,-7,67,23,10,-58,-17, 5,28,33,6,-29,22,18,33,5,2,-23,68,20,16,19,-19, 
  /* [7][0][][] */ 15,3,74,31,104,-12,-9,-18,8,-48,15,3,-2,38,8,-23, 15,19,4,13,-20,-11,-5,-14,35,-34,1,22,-13,7,14,0, 12,29,4,-7,23,-8,-18,-15,16,-24,-6,17,-2,-1,9,7, 30,4,-33,6,13,-7,32,-47,-7,-9,-44,25,20,14,-10,-26, 43,-104,-72,-23,49,-14,95,-127,-52,-13,-44,11,2,-13,4,-56, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 8,1,5,16 } };
const TfArray<8, float> quant13_scale = { 8, { 0.0050423103384673595, 0.0032013242598623037, 0.0043125534430146217, 0.003497391939163208, 0.0040238341316580772, 0.002877664752304554, 0.0045668999664485455, 0.0046507888473570347, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(8) int32_t tensor_data14[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension14 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 50, 1, 64, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data16[4] = { 1, 1, 25, 64, };
const TfArray<1, int> tensor_dimension16 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data17[4] = { 1, 25, 1, 32, };
const TfArray<1, int> tensor_dimension17 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data18[4] = { 1, 1, 13, 32, };
const TfArray<1, int> tensor_dimension18 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data19[4] = { 1, 13, 1, 32, };
const TfArray<1, int> tensor_dimension19 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data20[4] = { 1, 1, 7, 32, };
const TfArray<1, int> tensor_dimension20 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data21[4] = { 1, 7, 1, 16, };
const TfArray<1, int> tensor_dimension21 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data22[4] = { 1, 1, 4, 16, };
const TfArray<1, int> tensor_dimension22 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data23[4] = { 1, 4, 1, 8, };
const TfArray<1, int> tensor_dimension23 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,1,50,13 } };
const TfArray<1, float> quant24_scale = { 1, { 0.051489371806383133, } };
const TfArray<1, int> quant24_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,1,50,64 } };
const TfArray<1, float> quant25_scale = { 1, { 0.049587324261665344, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,50,1,64 } };
const TfArray<1, float> quant26_scale = { 1, { 0.049587324261665344, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,25,1,64 } };
const TfArray<1, float> quant27_scale = { 1, { 0.049587324261665344, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,1,25,64 } };
const TfArray<1, float> quant28_scale = { 1, { 0.049587324261665344, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,1,25,32 } };
const TfArray<1, float> quant29_scale = { 1, { 0.1167449951171875, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<4, int> tensor_dimension30 = { 4, { 1,25,1,32 } };
const TfArray<1, float> quant30_scale = { 1, { 0.1167449951171875, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<4, int> tensor_dimension31 = { 4, { 1,13,1,32 } };
const TfArray<1, float> quant31_scale = { 1, { 0.1167449951171875, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<4, int> tensor_dimension32 = { 4, { 1,1,13,32 } };
const TfArray<1, float> quant32_scale = { 1, { 0.1167449951171875, } };
const TfArray<1, int> quant32_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<4, int> tensor_dimension33 = { 4, { 1,1,13,32 } };
const TfArray<1, float> quant33_scale = { 1, { 0.15127561986446381, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfArray<4, int> tensor_dimension34 = { 4, { 1,13,1,32 } };
const TfArray<1, float> quant34_scale = { 1, { 0.15127561986446381, } };
const TfArray<1, int> quant34_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const TfArray<4, int> tensor_dimension35 = { 4, { 1,7,1,32 } };
const TfArray<1, float> quant35_scale = { 1, { 0.15127561986446381, } };
const TfArray<1, int> quant35_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<4, int> tensor_dimension36 = { 4, { 1,1,7,32 } };
const TfArray<1, float> quant36_scale = { 1, { 0.15127561986446381, } };
const TfArray<1, int> quant36_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const TfArray<4, int> tensor_dimension37 = { 4, { 1,1,7,16 } };
const TfArray<1, float> quant37_scale = { 1, { 0.20720511674880981, } };
const TfArray<1, int> quant37_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const TfArray<4, int> tensor_dimension38 = { 4, { 1,7,1,16 } };
const TfArray<1, float> quant38_scale = { 1, { 0.20720511674880981, } };
const TfArray<1, int> quant38_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const TfArray<4, int> tensor_dimension39 = { 4, { 1,4,1,16 } };
const TfArray<1, float> quant39_scale = { 1, { 0.20720511674880981, } };
const TfArray<1, int> quant39_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const TfArray<4, int> tensor_dimension40 = { 4, { 1,1,4,16 } };
const TfArray<1, float> quant40_scale = { 1, { 0.20720511674880981, } };
const TfArray<1, int> quant40_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const TfArray<4, int> tensor_dimension41 = { 4, { 1,1,4,8 } };
const TfArray<1, float> quant41_scale = { 1, { 0.20017021894454956, } };
const TfArray<1, int> quant41_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const TfArray<4, int> tensor_dimension42 = { 4, { 1,4,1,8 } };
const TfArray<1, float> quant42_scale = { 1, { 0.20017021894454956, } };
const TfArray<1, int> quant42_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const TfArray<4, int> tensor_dimension43 = { 4, { 1,2,1,8 } };
const TfArray<1, float> quant43_scale = { 1, { 0.20017021894454956, } };
const TfArray<1, int> quant43_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<2, int> tensor_dimension44 = { 2, { 1,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.20017021894454956, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<2, int> tensor_dimension45 = { 2, { 1,12 } };
const TfArray<1, float> quant45_scale = { 1, { 0.2733185887336731, } };
const TfArray<1, int> quant45_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<2, int> tensor_dimension46 = { 2, { 1,12 } };
const TfArray<1, float> quant46_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant46_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,14 } };
const TfArray<1, int> outputs0 = { 1, { 24 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 24,9,2 } };
const TfArray<1, int> outputs1 = { 1, { 25 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 25,15 } };
const TfArray<1, int> outputs2 = { 1, { 26 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 26 } };
const TfArray<1, int> outputs3 = { 1, { 27 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 27,16 } };
const TfArray<1, int> outputs4 = { 1, { 28 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 28,10,4 } };
const TfArray<1, int> outputs5 = { 1, { 29 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 29,17 } };
const TfArray<1, int> outputs6 = { 1, { 30 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 30 } };
const TfArray<1, int> outputs7 = { 1, { 31 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 31,18 } };
const TfArray<1, int> outputs8 = { 1, { 32 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 32,11,5 } };
const TfArray<1, int> outputs9 = { 1, { 33 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 33,19 } };
const TfArray<1, int> outputs10 = { 1, { 34 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 34 } };
const TfArray<1, int> outputs11 = { 1, { 35 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 35,20 } };
const TfArray<1, int> outputs12 = { 1, { 36 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 36,12,6 } };
const TfArray<1, int> outputs13 = { 1, { 37 } };
const TfLiteReshapeParams opdata14 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs14 = { 2, { 37,21 } };
const TfArray<1, int> outputs14 = { 1, { 38 } };
const TfLitePoolParams opdata15 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs15 = { 1, { 38 } };
const TfArray<1, int> outputs15 = { 1, { 39 } };
const TfLiteReshapeParams opdata16 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs16 = { 2, { 39,22 } };
const TfArray<1, int> outputs16 = { 1, { 40 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 40,13,7 } };
const TfArray<1, int> outputs17 = { 1, { 41 } };
const TfLiteReshapeParams opdata18 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs18 = { 2, { 41,23 } };
const TfArray<1, int> outputs18 = { 1, { 42 } };
const TfLitePoolParams opdata19 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs19 = { 1, { 42 } };
const TfArray<1, int> outputs19 = { 1, { 43 } };
const TfLiteReshapeParams opdata20 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs20 = { 2, { 43,1 } };
const TfArray<1, int> outputs20 = { 1, { 44 } };
const TfLiteFullyConnectedParams opdata21 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs21 = { 3, { 44,8,3 } };
const TfArray<1, int> outputs21 = { 1, { 45 } };
const TfLiteSoftmaxParams opdata22 = { 1 };
const TfArray<1, int> inputs22 = { 1, { 45 } };
const TfArray<1, int> outputs22 = { 1, { 46 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 4160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 10240, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 2560, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension25, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension27, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension29, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension31, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension32, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension33, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension34, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension35, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension36, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension37, 112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension38, 112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension41, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension43, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension44, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension45, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension46, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 47;
  for(size_t i = 0; i < 47; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 23; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 23; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  46, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 23; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
