/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 29.07.2021 01:19:45

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 2944;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[34];
TfLiteEvalTensor tflEvalTensors[34];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[16];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,800 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0038449754938483238, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 192, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[16] = { -2217, -28986, -9410, 1621, -4793, -51480, -17069, -16752, -20228, -16711, -3567, -10318, 7158, -5998, -2750, -14337, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const TfArray<16, float> quant2_scale = { 16, { 5.5241220252355561e-05, 8.7513035396113992e-06, 4.131455352762714e-05, 5.0321497838012874e-05, 4.6410164941335097e-05, 3.4063661587424576e-05, 4.5492939534597099e-05, 7.2861203079810366e-06, 5.0189042667625472e-05, 1.0817892871273216e-05, 6.6539236286189407e-05, 4.1142295231111348e-05, 4.890608397545293e-05, 4.0750866901362315e-05, 8.045436698012054e-05, 7.255790478666313e-06, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[32] = { -3832, -2143, -964, -3051, -2805, -3177, -3959, 2304, -1592, -1654, -4211, 1692, -1919, -4033, -2848, -3402, 276, -3987, -4329, -677, -6114, -4612, -3797, -3551, -747, -3837, -1998, -5187, -2203, -3504, -2569, -2650, };
const TfArray<1, int> tensor_dimension3 = { 1, { 32 } };
const TfArray<32, float> quant3_scale = { 32, { 0.00025948384427465498, 0.00047175647341646254, 0.00021089073561597615, 9.5962474006228149e-05, 0.00029166424064897001, 0.00039140100125223398, 0.00035948763252235949, 0.00030002134735696018, 0.00054719485342502594, 0.00066141481511294842, 0.00030358173535205424, 0.0004981516394764185, 9.5871568191796541e-05, 0.0003681619418784976, 0.00041845117812044919, 0.00034129753476008773, 0.00048258007154799998, 0.00029607361648231745, 0.00024174820282496512, 0.00067709380527958274, 0.00021490374638233334, 0.0003124325885437429, 0.00028076971648260951, 0.00032659634598530829, 0.00034674766357056797, 0.00040507945232093334, 0.00018209223344456404, 0.00021085843036416918, 0.0003933343687094748, 0.00041580430115573108, 0.00034455975401215255, 7.8838798799552023e-05, } };
const TfArray<32, int> quant3_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[64] = { 404, -1965, -368, -1224, -539, -1005, -1320, -535, -3459, -1533, -50, -2510, -1166, -914, -1601, -1173, -2173, -897, -267, -1278, -1263, -725, -2548, -1556, -724, 0, -2807, -254, -3252, -1026, -1113, -2088, -822, -831, -4830, -2873, -1313, -909, -1364, -2823, -800, -2035, -1773, -1835, -63, -813, -880, -3827, -2816, -1864, -719, -1496, -1833, -2261, -2258, -1725, -3438, -2335, -3021, -610, 835, -1006, 584, 356, };
const TfArray<1, int> tensor_dimension4 = { 1, { 64 } };
const TfArray<64, float> quant4_scale = { 64, { 0.00089284410933032632, 0.00063854263862594962, 0.00074898923048749566, 0.00085431482875719666, 0.0010780261363834143, 0.00097122206352651119, 0.00093941774684935808, 0.00079614849528297782, 0.00059272226644679904, 0.00066759996116161346, 0.0007868485408835113, 0.00066912663169205189, 0.00072526797885075212, 0.00079669244587421417, 0.00075188459595665336, 0.00083840079605579376, 0.00072848540730774403, 0.00052619073539972305, 0.00071920908521860838, 0.0008076517260633409, 0.00065789971267804503, 0.0011808486888185143, 0.00036938322591595352, 0.00072902365354821086, 0.0009089093073271215, 0.00083296193042770028, 0.0001448953989893198, 0.00085594132542610168, 0.00051644828636199236, 0.00061203073710203171, 0.00076710921712219715, 0.00083427660865709186, 0.00075729400850832462, 0.0010904866503551602, 8.6786800238769501e-05, 0.00047653148067183793, 0.0011445081327110529, 0.00098663184326142073, 0.00066787388641387224, 0.00046381066204048693, 0.0012652070727199316, 0.00086537882452830672, 0.00096999487141147256, 0.00062720890855416656, 0.00096721143927425146, 0.00083276646910235286, 0.0013881177874282002, 0.00046524821664206684, 0.00051023496780544519, 0.00083320558769628406, 0.00064832251518964767, 0.00082300510257482529, 0.00064244418172165751, 0.00068998767528682947, 0.00066977797541767359, 0.00078477751230821013, 0.00047476941836066544, 0.00066168798366561532, 0.00012149890244472772, 0.00063449924346059561, 0.00077287486055865884, 0.00070851383497938514, 0.0010064496891573071, 0.00083657982759177685, } };
const TfArray<64, int> quant4_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[64] = { 752, -286, 245, 97, 373, 61, -38, 275, -784, -778, 591, 558, 418, -1434, 126, 453, 131, 248, -724, 217, -19, 169, 67, 86, 371, -48, -574, 539, 316, 349, 380, 511, 635, 115, -116, -144, 510, 418, 198, 213, 104, -1, 1, 275, -738, 344, 70, 165, 471, 669, 132, 389, -312, -2, 177, 237, 131, -943, -978, -7, 0, 581, 222, -72, };
const TfArray<1, int> tensor_dimension5 = { 1, { 64 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0017565161688253284, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[12] = { -40, -125, 23, -395, 497, -388, 165, 7, 75, 406, -7, -312, };
const TfArray<1, int> tensor_dimension6 = { 1, { 12 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0012988176895305514, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[64*192] = { 
  16, -9, -63, -3, 16, -6, 20, -8, -13, -10, -25, -29, 5, 3, -4, 2, -48, -46, 1, -45, -8, -10, 25, -28, -25, -3, -10, -8, 22, -8, -1, 8, -9, 26, -3, 6, -30, 0, 9, -20, 12, -33, -57, 13, 3, -11, -40, -11, 43, -5, 10, 1, -57, -11, -62, -3, -4, -40, -10, 12, 7, 19, 0, 10, 8, -42, -27, -25, 24, -4, 8, -12, -33, -44, -29, -37, 6, -13, -13, -21, -18, -92, 1, -14, -23, -64, -21, -10, -46, -4, -3, -41, 25, -16, -2, 46, -16, -26, 7, 9, -26, 1, -3, -2, 7, -69, -20, -3, -7, -70, -50, -5, 16, -43, 8, -23, -50, -33, -73, 7, -11, -7, -3, 3, 21, 33, -8, -7, 17, -25, 29, -6, 2, 4, 3, 7, -5, -17, 49, -31, -76, -58, 3, -3, -13, -65, -1, -11, 15, -31, -2, 1, -25, -14, 4, -20, 6, -13, -4, 17, -22, -15, -4, 17, -17, 24, 16, 21, 6, -44, -20, -24, -13, -71, -14, -1, 7, 24, 3, 0, -11, -14, -60, 13, 7, -8, -2, 14, 26, 17, 1, 4, 
  3, 7, 0, -30, -52, -11, -15, -18, 8, -38, -2, 3, -56, 14, -1, 11, 0, -36, -1, 7, -26, 14, 4, 24, -35, -26, -3, 2, -22, -19, -46, 12, -80, -6, 3, 17, -4, -21, 0, -6, 11, 23, 1, 6, -22, 1, -2, 10, 42, -8, -12, -14, -8, 10, -11, 18, -11, -10, -9, -34, 7, 0, 15, 17, -33, 12, 39, -24, -51, -70, 10, 16, 8, 8, 17, 1, -57, 5, 17, 1, 15, -14, 7, 0, -34, 15, 7, -23, 2, -63, -2, 5, -41, 10, -46, 19, -23, -1, 5, -6, -59, 2, -5, 16, -14, -3, 2, -6, -50, -33, 14, 21, 35, -4, 3, -72, -2, 5, 16, 11, -38, -10, -3, -14, -9, 3, -31, 24, -16, -33, -44, -57, -26, 23, 75, 39, 4, -26, 28, 12, -25, -37, 2, 6, 7, -7, 22, 18, -33, 19, -16, -3, -24, -38, -6, 31, -47, 7, 9, -21, 31, -8, 3, 3, -49, 57, -8, 5, 29, 18, 3, -11, -15, 1, -15, 15, 10, 8, 7, -30, -18, -7, 2, -2, -30, 3, 5, -25, -13, 7, -44, 15, 
  -15, 27, 12, -21, 2, -25, 3, 13, -15, -3, -14, -3, 20, -12, -10, -4, -34, 7, -7, -14, 5, -2, 13, 10, -11, -1, -2, -42, 31, -8, 13, 7, 13, -3, -8, -16, -2, -14, -2, -20, 17, -21, 0, -7, 19, -13, -46, -14, 15, -19, 8, 25, 9, 7, -43, -8, -26, 25, 4, -3, -28, -14, -23, 0, 16, -1, -3, -13, -17, -4, 7, 11, -35, 39, -28, -55, -4, -19, 3, -7, -36, -5, 14, -37, 2, 18, 2, -1, -15, 18, -7, -47, 8, -33, -19, 14, 27, -11, 2, 18, 18, -16, 23, -9, 6, -31, -25, -36, 19, -15, -12, 38, -30, -6, 7, -2, -15, 5, -38, -13, -23, 4, -3, 20, -5, 6, 13, 12, -2, 3, 14, 6, -43, -14, 18, -20, -10, 22, -34, -26, 16, 20, -12, -14, -3, -16, 28, -13, 4, -18, -6, -8, 4, -10, 6, -10, 13, -19, 6, 27, 5, -32, -5, 29, 2, -17, 1, 37, -12, -15, -23, 15, -29, -24, 2, -12, 10, 23, -24, 24, -12, 17, -29, -26, -20, 15, 10, 2, -20, 6, -23, -55, 
  26, 10, 3, 14, 6, 3, 2, 0, -4, 20, 10, -33, 15, -33, 18, 6, -32, 12, -13, -19, 12, -31, 27, 2, 15, 13, -1, -15, 32, -25, 8, 1, -25, 8, -1, -5, -36, -9, -31, 16, -10, -38, -31, 0, -22, -63, -60, 25, 2, 3, 3, -4, -58, 1, -47, -17, 8, 7, 4, 21, 14, -23, -15, -20, 21, -2, -7, -2, 10, -32, 11, -21, -51, 12, 5, -71, 2, -22, 11, -3, -79, 1, -3, -44, -1, -23, -20, -16, 11, 4, -2, -9, 17, -9, 7, 8, 31, 4, -7, -7, -9, 3, -6, -23, 17, -34, -14, 2, -25, -12, -30, -17, 8, 21, 5, 1, -14, 2, -44, -17, -7, -10, 7, 21, -24, -14, -6, -31, 2, -22, 29, 17, 3, -22, 20, 8, -60, 9, -12, -34, 22, 10, 6, 6, 40, -18, 14, -27, 9, -18, 6, -29, 15, 19, 6, 9, -13, -24, -29, -27, 27, -10, -8, 13, -22, -50, -5, 18, 15, -20, -56, 11, 3, -15, 12, 6, 36, 65, -9, 23, -11, -13, -51, -9, -1, 2, -7, -18, 0, -8, 3, -6, 
  14, -5, 0, -58, 15, -29, -4, -8, 2, -11, 7, -23, 13, 0, -21, 21, 6, 22, 17, -3, -23, -6, -13, 5, -23, 6, 1, -25, 2, -7, 1, 8, 27, -4, 2, 2, 15, -20, 13, 29, -54, -33, 6, -1, 15, 4, -11, 7, -10, -20, -21, -15, 1, -12, -21, -4, -4, -14, -4, -25, 25, 4, 6, -2, -12, -45, 3, 11, -3, -22, -51, -2, -6, -39, -36, -23, -5, 1, -36, 9, 20, -50, 13, -1, -51, -24, 26, -49, -51, 13, -1, -74, 6, -67, -28, -10, -4, -41, -7, -2, 31, -72, 11, 5, -35, -7, 4, 3, 28, -65, -29, 10, -16, -72, -25, 5, -5, -44, -39, -8, -26, 18, 5, 18, 24, 6, 25, 3, -20, 18, 25, -12, 16, 30, -4, -2, -18, 8, 18, -6, -35, -14, -15, 3, 22, -16, 21, 28, -8, -40, 15, -1, -34, -5, 4, -64, 36, -33, 35, 11, -44, -35, 5, 26, 12, 46, 5, -2, -4, -21, 7, -2, 10, -4, -29, 10, 9, -35, -7, 37, -29, -56, -38, -27, -2, 12, 1, 45, 14, -8, 1, -6, 
  1, -7, -14, -29, 8, -45, 1, -6, -8, -8, 10, 20, 1, -13, -25, 18, -15, 4, 2, -37, -20, -8, 7, 2, 14, -5, -5, -14, 9, -5, -17, 0, 2, 6, -4, 33, -26, -23, 3, 43, -16, 1, 10, 5, -5, 11, 1, 0, 18, 2, 20, -33, 9, -9, 7, 11, -19, 18, 3, -17, -29, 19, -12, 2, -26, 3, -1, 0, 4, -33, -29, 7, -15, -83, -5, 13, -32, -1, -15, 1, -10, 4, 34, 3, -19, -15, -6, 19, -16, -22, -6, -2, 19, -13, 5, 10, -29, 1, 1, -11, 6, -21, 3, 18, -12, 5, 9, -4, 15, -5, -7, 16, 20, -30, 7, -10, 15, -17, 15, 0, -19, -3, -2, 23, -18, 17, -21, 11, -48, -38, 25, -51, -30, 11, -41, 41, -10, -45, 6, 33, -15, -25, 5, 8, 24, -22, 29, -6, 16, -48, -3, -28, -35, -32, 1, 21, -43, -11, 18, 8, -24, -2, 0, 15, 8, 7, 12, 25, -69, 2, 19, 14, -28, -12, 1, 25, -2, -17, 5, 9, 9, -40, 27, 7, -17, 25, 3, 20, -1, 36, -41, -3, 
  -10, -58, -2, -8, 18, -11, -46, 8, -16, 0, -12, 12, -13, -16, 2, -27, -1, -26, -13, -34, -16, -40, -3, -30, -15, -26, 5, 6, -4, -19, -13, -17, -6, -42, -6, -31, 12, 9, -25, 17, -3, 5, -30, 14, -6, -7, -33, -4, 4, 14, -9, -8, -49, -40, -44, -32, 14, -31, 6, -33, -2, -35, -14, 2, -31, -47, -22, -9, 0, -6, -28, -2, -8, 10, -7, 25, 3, -12, -11, -17, -21, 25, -31, 12, 5, -19, -5, -10, -1, -20, 0, -58, -5, 4, 7, -28, -2, -67, 4, 0, -8, 16, -22, 3, -25, -7, -48, 20, -8, -31, -30, 21, -2, -10, -11, 10, -28, -20, -10, 2, 4, -31, -11, -2, -85, -32, -38, -8, 15, 40, -10, -18, 6, -29, -11, 35, 7, -15, 30, -37, -27, -6, -39, -14, -10, 18, -16, 26, -15, -26, -5, -28, 1, 33, -6, -12, -17, 8, -6, -31, -11, -32, 1, 2, 9, -38, -45, -8, -3, -27, 7, 13, 7, -10, -8, 2, -35, 82, -14, -18, 11, 18, -17, 6, 22, 7, -3, -2, -14, -33, 10, -7, 
  -16, 0, 5, -19, -16, 2, -11, -45, 0, 10, 0, -23, 1, 13, -11, 0, 21, 25, 15, -7, 3, -15, -2, -56, -17, 8, 11, -23, -4, 12, 4, 6, -3, 20, 3, 14, 23, -5, 0, 20, -32, -2, 19, -38, -26, -19, -1, 13, 1, -20, 3, -22, 11, 14, 2, -11, -16, 12, -13, -8, -27, -29, -32, -15, 6, 5, 28, -8, -12, 5, -6, -80, 12, -4, 18, -16, 15, 12, 0, 13, 23, -8, 20, -16, 15, -17, 26, -23, -19, 14, -2, -13, -9, -10, 8, 1, -10, 3, 5, -31, 10, -4, -9, -6, -16, -2, 14, -20, -7, -8, 5, 16, -44, -10, -3, 4, 4, 7, 4, -29, -15, 25, 4, 11, -49, -5, -50, -16, 4, 3, 12, -5, -12, -13, 3, -88, 0, -22, -89, -87, 23, 37, -21, 10, 46, -10, 19, -33, 0, -27, 6, -32, 0, 17, 0, -1, 26, -5, -1, 7, 7, 0, -2, 19, 9, -4, -28, 7, -11, -11, -1, -20, -35, -15, 5, 20, 11, 16, -6, -8, -27, 8, 3, -29, -7, 14, 4, 6, -19, -26, -28, -14, 
  50, -44, 13, -14, -48, -45, -29, -40, -10, -21, -58, 25, -14, -9, -4, -31, 0, 41, -23, -54, -15, -57, -1, -5, -52, 0, -2, 24, 35, -30, -40, 2, -8, -17, 4, 4, -15, 8, 19, -4, 4, -11, 9, 8, -8, -23, -33, 28, 26, 9, -30, -64, -28, -11, -13, -4, -33, -6, -5, 22, -13, -22, -20, 24, 36, 13, 23, -26, -1, -30, -26, -15, -24, 8, -27, -22, 1, 4, -6, -7, -3, -18, -6, -49, -3, -12, 1, 0, -4, -6, 3, -11, -10, -36, -14, -30, -22, 2, -1, 0, -7, -3, -22, -13, -37, 9, -47, -25, -32, 6, -74, 28, 51, 36, 6, -10, -14, 10, 21, -97, -35, -7, 4, -35, 19, -38, 25, -12, 36, -43, 39, 15, -16, -19, 16, -1, -20, -21, -12, 15, 8, 16, -5, 7, 7, -1, -24, -29, -2, 8, -8, -16, -34, 35, -3, -9, 7, -31, 42, -26, -18, -19, 5, 10, 27, -46, -18, 31, 23, -9, 28, -29, -4, -16, 9, 42, 5, -4, -7, 8, -14, -13, 3, -31, -30, -14, 5, -7, -45, -21, -34, -9, 
  17, 18, -49, 6, 17, -27, -32, 3, -7, 34, -43, -22, 24, -27, -24, 3, -16, 1, 17, -54, 0, -22, -4, -20, 34, 1, -4, -23, 19, 0, 10, -27, 1, -5, 2, -11, -39, -7, -36, 17, -17, -50, -42, 18, -8, -10, -65, 36, -28, -6, 3, 11, -20, 10, -54, -38, 2, 9, 0, 39, -5, -52, -16, -33, -7, 14, 40, 6, 16, -13, -13, 2, -89, -20, -19, -23, 19, -17, -7, 4, -1, 16, -65, -8, 18, 0, 11, -61, 12, -6, -2, -47, 13, -9, 13, -81, -4, -12, -6, 1, -30, 4, -54, -11, -34, -16, 3, -17, -33, -1, -36, 11, 20, 10, 10, -15, -8, 5, -21, 15, 30, -4, -2, 23, -30, -27, -15, -27, 30, -2, 31, -20, 7, -47, 7, 41, -6, -16, 57, -33, 1, -46, -25, -25, 9, 5, 9, 2, 3, -26, 4, -4, 18, 31, 2, -5, -16, 2, -28, 5, 13, -25, 4, 16, 7, 15, -21, -14, -20, -54, -15, -4, -6, -16, -8, 0, 9, 53, 8, -34, -1, -1, -6, -20, 15, -27, -3, -29, -1, -7, 19, -38, 
  -3, -11, -10, 8, -31, 14, -25, -19, -47, -25, 23, 15, 3, 5, -14, -16, -20, 11, -7, -15, -42, -21, -8, 6, 2, -4, -4, 22, -28, 0, -21, -25, -4, -56, -7, 0, -1, -27, -3, 29, -27, 12, 6, -22, -27, 1, -10, -14, 34, 1, 1, 12, 6, -28, 3, -3, -26, -8, 3, -16, 2, 7, -5, -4, -15, -21, 14, -11, -42, 6, -27, -15, -38, -57, -12, 15, -25, -2, -31, -29, -51, 19, 14, 0, -2, -62, -16, -6, -1, 14, -5, 8, -9, 8, -34, -34, -16, -75, 1, 21, -4, -27, -4, -4, -8, -2, 10, -19, -25, 0, -4, -2, 22, 1, -14, -5, 16, -55, 7, 4, -12, 3, -1, -5, 10, 14, -14, -1, -10, -3, 22, -16, -21, 42, -49, -26, -11, -8, 49, -10, -12, -7, -17, -13, 23, 9, -4, 18, -36, -40, 9, 18, -15, -18, -5, 17, -16, 14, 19, -10, -1, -27, -7, 0, 1, 12, 13, 31, -4, 20, 24, -75, 9, -7, -13, -20, 22, -4, -31, -10, 46, -55, 13, 8, -15, -1, 5, 0, 17, -5, 6, 13, 
  3, -1, -27, -9, -39, -35, -14, -39, 1, 7, -2, -36, -21, 13, -18, 22, -22, -14, 16, -6, 6, 13, 15, -19, -1, -3, 3, 27, -17, 5, -38, 3, -33, 28, 0, 1, -9, -30, 14, -18, 4, -2, -23, -23, -16, 5, -19, -8, 9, -20, -4, 7, -20, -5, -23, -50, 10, -57, 1, 12, 15, -15, 5, 5, 6, -17, -65, -37, -25, -18, 2, -20, 24, 20, -4, -41, -27, 4, 1, 12, 3, -45, -63, 3, -19, 2, 6, -4, -79, 13, 1, -16, -38, -6, -23, 0, -9, 34, -2, 8, -11, -30, -19, -34, -4, -25, -6, -50, 6, -50, -10, 13, -22, -10, -40, -8, -12, -3, -37, -18, 12, -26, 6, -21, 25, -7, 10, -1, -23, 2, -40, -15, -4, 3, 31, -2, -51, -15, -19, -22, -41, -11, -16, -20, 14, -26, -58, -53, -16, 8, 23, -32, -37, 15, -4, -22, -14, 17, 27, -22, 19, -16, 1, 18, -29, -4, -55, 4, 45, -27, -43, -1, 13, -38, 6, 22, 2, -4, -17, -6, -6, 13, -24, -57, -22, -3, -8, -18, 10, -18, 11, -4, 
  16, -4, -11, -29, -13, 7, -10, 2, -28, -27, 13, 4, 12, -10, -33, -12, -5, 22, 11, 11, 5, -5, 17, -20, -23, 16, 0, -14, -42, -13, 2, -41, 9, -27, 0, 12, 22, -54, -11, 31, -13, -10, -6, -31, 6, -1, -5, 34, -20, -26, -11, -8, 7, -10, -8, -29, -50, 8, -1, -12, -42, 0, -35, -18, 4, -17, 21, 9, -45, 5, -28, -11, -46, 26, -17, -12, 11, 4, -69, -23, 1, 4, -11, 10, -8, -4, 17, -20, 14, 11, -2, -17, 28, 7, 3, -28, 27, -32, -2, 4, 16, -41, -12, 15, -34, 1, 2, -62, 24, 16, -1, 9, 13, -15, -8, 20, 18, -12, -7, -25, -7, 14, -2, 18, -8, -6, 13, -44, -34, -11, 8, 9, 0, 35, -4, 14, -24, 11, 0, -41, 19, 28, -20, -26, -14, -2, 12, 1, 3, 3, 11, -33, 1, -7, 2, 12, 25, -16, 11, -11, -1, -36, -3, 3, 41, -13, -4, -8, -45, -16, -12, -22, -2, 12, -5, -2, -14, 6, -11, 10, -4, -18, -10, -16, -20, 38, 4, -7, -2, 6, -11, -69, 
  -23, -2, -57, 26, -7, -4, -17, -37, 19, 12, -19, -19, -46, -18, -1, 31, -19, -53, -29, -3, -8, 2, 26, -18, 6, -31, -1, 13, 8, 3, 2, -40, -37, 36, 1, 13, -11, 16, -19, -36, -19, 1, -22, -19, -17, -14, 34, -4, 5, -16, -8, -2, -40, -7, 13, -10, -12, -39, -4, 15, -19, 9, 33, -28, -27, -14, 13, -6, -20, -5, -11, 19, 3, -38, 25, -16, -12, 1, -3, -45, 21, -34, -12, -13, -5, 16, -4, -50, -30, -18, 5, -3, 4, -41, -32, 11, -52, 17, 5, 19, -23, -66, -34, 30, -17, 5, -35, -24, -8, -11, -23, -10, 33, 2, -39, -25, 1, -26, 25, -18, -13, -41, 5, -23, 31, 23, -3, -23, -8, -17, -17, -12, 25, -4, -7, 45, 10, -14, 49, -2, 8, 11, -24, 7, 16, 6, -8, 8, -53, -5, 11, 0, 19, -9, 2, -26, -8, 0, -20, -7, 4, 7, -5, -6, -13, 3, -13, -20, -32, 15, -27, -17, -21, -1, 7, 9, 51, -5, -35, -21, -33, -14, 20, -3, -35, 14, -2, 25, -28, 8, -23, -26, 
  22, 7, -7, 20, 5, -17, -10, 15, -30, -5, -8, -24, -2, -28, 7, -36, 2, -5, -62, -33, 0, 4, 16, -4, 14, 21, 0, -19, -2, -23, 18, -15, 18, -20, -4, 21, -37, 6, -6, 31, 0, -28, -19, 5, 3, 11, -16, 12, 27, 8, 11, -22, -27, 6, -42, -31, -6, -10, -1, 16, 3, 3, 18, -19, 2, -20, 30, 16, 13, -24, -12, -9, -43, 22, 8, -31, -15, -5, 7, -8, -34, -5, -26, -26, 2, 9, -7, -23, 10, -14, -1, -20, -19, -13, 6, -47, -3, 8, -4, -5, -11, -6, -26, 6, -3, -18, -39, 8, 12, 13, -42, -6, 14, 1, 18, -3, -21, -5, -27, -25, 9, -9, -5, -9, -30, -27, 34, -23, 12, 9, -20, 33, 30, -42, 7, 9, -9, 17, 26, -27, 29, 6, 22, -34, 35, -12, -34, -40, 9, -8, 10, -18, 13, -35, 4, 12, 1, 21, -2, -18, -7, -8, 4, 22, -8, -29, -16, -11, 25, 18, -31, -6, -25, -15, -6, 2, -7, 58, -12, -18, -15, -23, -24, -10, -25, 3, 3, -1, -32, -6, -19, -1, 
  27, -17, -10, 4, -2, -20, -30, 0, -16, -24, -42, -23, 14, 0, -31, -42, -47, -13, -2, -21, -13, -1, 18, -47, -6, 1, -16, -25, 22, -28, 9, -19, 3, 0, 0, 27, -25, -39, -8, -1, -24, -48, -24, -26, 31, 27, -42, -9, -5, -49, -14, 34, -13, -19, -30, 9, -6, 5, -13, 16, 11, -1, -13, 10, 10, 24, -16, -5, -9, -13, -7, -9, -32, -21, -22, -14, 19, 18, -13, -5, -48, -3, 10, -56, -3, 24, -14, -12, -2, 6, 5, -47, -8, -17, 5, -12, -11, -11, -8, -20, -10, -43, 11, -19, -44, -73, -59, -20, 12, 9, -43, 28, 10, 16, 4, -6, -10, -7, -38, 5, -40, 10, -1, 15, 2, -7, 10, 4, 15, -10, -9, 13, 22, -4, 16, -15, -32, 16, 12, -32, -1, -1, -27, -11, 19, -17, -3, -4, -4, 7, -16, -34, 9, 14, 5, 0, 43, -23, 25, 13, 9, -29, 0, 21, 12, 14, -1, 7, 12, -28, -26, -19, 13, 7, -15, 18, 4, 48, 5, -18, -24, 10, -56, -8, -13, -12, -1, 26, 13, 15, 8, -32, 
  -5, 11, 29, -3, -14, -5, -40, -30, 10, -7, -8, 2, 1, -46, 10, -20, -17, -2, -33, -29, 2, -20, 28, -9, 25, -9, 6, 5, 20, 3, -6, -37, -19, 11, -1, -11, 0, -13, 2, 8, -8, 6, 9, 21, -21, -9, -20, 40, 5, 14, 11, 0, -32, -22, -4, 16, -8, -34, -1, 10, -10, -57, 4, 6, -53, -47, 21, -2, 12, -33, -64, -1, 6, 16, 9, 4, 13, -60, 8, -37, -13, -14, -7, 17, -13, -27, -3, -18, -1, -27, 10, 4, 21, 12, 6, -14, -31, -4, 2, 28, -31, -5, 11, 9, -35, 3, -1, 10, -26, -12, -15, 34, -17, 19, 0, 6, -26, -41, 13, 3, 8, -4, 2, -19, -25, -20, -36, 10, -17, -32, 33, -5, 6, -33, 11, 43, -7, 15, 24, 0, -27, -47, -13, -42, 6, 1, -9, 2, -8, -49, 5, 0, -13, -43, -2, 17, 29, 19, -5, 15, -2, -21, 7, 16, -14, 37, 19, 8, -18, -57, -16, 25, -13, -22, -7, 34, -22, -14, 6, -46, 4, -29, 11, 5, 17, 31, 4, 19, -17, -31, -29, -20, 
  -2, -2, 1, -37, 2, -23, -5, 1, 2, -42, -10, -59, 19, -7, -26, -29, -2, 20, -5, 9, -11, 12, 0, -13, -36, 10, 2, -36, 12, 11, 15, -5, 13, -24, 5, -12, 0, -6, -39, -43, -15, -36, -13, -4, 2, -42, -15, -19, 54, -28, -7, -45, -19, -2, -32, -10, -3, -9, -1, 7, 3, -71, -10, -57, 21, 4, 8, 1, -2, 2, -21, -3, 20, 14, -57, -42, 4, 3, -19, -6, 4, 20, -17, 16, -8, 18, -11, -15, 10, 13, 9, -11, 30, 6, 0, -14, 1, 11, -2, 14, 10, 1, -42, 3, -28, -4, -14, 12, 11, 8, 8, -13, -26, 10, -10, -11, -4, 8, -42, -35, 19, 4, 3, -22, 3, -33, 3, -21, 15, 6, 15, -6, 24, 6, 14, -8, 12, 12, -10, -7, 15, 31, -48, -18, 44, 18, 7, -5, -14, 4, 13, -16, 8, -77, -2, 12, 72, 7, -6, -21, -19, 7, 2, 37, 10, 23, -88, -13, -21, 9, -43, -20, -40, 4, -21, 42, -5, 38, 0, -18, 29, 15, 9, -7, 22, 32, 13, -42, -12, -44, -30, -66, 
  -17, -10, 4, -31, 0, -20, -1, 5, 16, 7, -7, -30, -14, -4, -25, 19, 17, -39, -27, 2, -44, 32, -10, -34, 14, -61, -3, 15, 10, -53, 25, -49, -3, 14, -7, 10, -19, -14, -39, -19, -29, -2, -10, -1, -4, 14, 6, 4, -10, -8, -25, -5, -10, -2, -24, -13, -14, -40, -5, -61, 12, 6, 4, -23, -42, -9, 5, -15, -7, -42, -4, -20, -11, -12, 12, -51, 9, -28, -2, -14, 25, -22, 0, -2, -71, 38, -15, -48, -6, -41, -1, -27, 18, -1, -6, 22, -2, -12, 3, 10, -29, -35, -11, 2, -24, -15, -4, -30, -52, -21, -3, 2, 7, -6, 9, -24, -45, 11, -10, -31, -24, -39, -1, -22, 25, -27, -21, -6, 11, -35, 15, 2, 20, -9, 3, 26, 2, 4, -31, -17, 32, 42, -60, 6, 46, -25, 49, 5, -1, 23, -5, -46, 16, -1, 5, -33, -3, -9, 7, -12, -28, 30, -8, 23, -27, 12, -2, 6, -10, -10, 28, -7, -50, 3, -34, 2, 38, -10, -40, -24, -6, -18, -8, -11, 12, 0, 6, -5, 2, -13, -8, -40, 
  -27, -13, -10, -1, -63, 2, 11, 14, -25, 28, 7, 4, -25, -61, 13, -35, -22, -57, 1, -44, 20, -19, 22, 3, 31, -45, -2, -10, 18, -20, -31, -10, -8, 3, 0, 12, -52, -7, -44, 30, 20, -17, -31, -14, -42, -19, 2, 10, 46, -19, -23, 14, 3, -13, 6, -16, -23, -8, 4, -26, -9, 11, -5, -4, -20, 1, 22, -27, -55, -7, 11, 15, -66, -15, 3, 13, -127, -40, 6, -3, -2, 0, -25, -37, 17, -16, -1, 5, -26, -24, 5, -13, -23, 0, -21, -3, -17, -8, -3, 25, 14, -29, -17, -27, 9, -31, 1, -13, -4, -20, 3, -16, 46, -3, 4, 9, 2, 0, 0, -21, -27, 2, 4, 7, 2, 1, -33, -26, -12, -5, 17, -18, -25, -2, 62, 9, -4, 24, -66, 34, -30, -16, 25, -3, 17, 16, 25, -11, -1, -1, 13, 33, -4, -5, 0, -33, -29, -5, 3, 8, -8, -10, -9, 21, 18, -6, -25, 6, 1, 12, -20, 2, 23, -30, 4, -10, 9, -32, -43, 14, 20, 4, 12, 21, 3, 3, -1, 20, -6, 10, -7, -28, 
  10, 0, 6, -51, -54, -29, -3, 0, -18, -17, 9, -23, 12, -8, -10, -11, 0, 29, -6, 13, 8, 17, -26, -8, -10, -3, 3, 3, -6, 7, -6, -3, 2, 7, 7, 10, 2, 14, -9, 10, 0, -20, -3, -8, -19, -7, -2, 22, -18, -27, -20, -32, -7, 26, -12, -9, 0, -2, 4, -13, -22, -13, -3, -45, 1, 24, 15, -17, -19, -25, 16, -10, 1, 20, 2, -16, -33, 5, 12, 19, -4, -33, -25, 13, 1, 15, 16, -18, -31, 13, 2, -10, 1, -9, -6, -5, -6, 5, 2, -7, -6, 1, -43, 4, 8, -1, 13, -24, -52, -12, -15, -13, -13, -20, -3, 10, -5, 17, -26, -47, -27, 19, -5, 11, -18, -15, -20, -42, 21, 20, 40, -7, -11, -7, 57, -32, 8, 27, -54, -14, -7, 29, -47, 21, 33, -17, 11, -51, 15, -16, 10, -59, -4, -26, -9, -29, 20, -23, 48, -2, 15, 11, 3, 6, 11, -27, -16, 10, 15, -25, -4, -5, -19, -20, -29, 3, 17, 29, -36, 19, -30, 15, 7, -25, -4, -12, -4, 5, 13, -14, -21, -5, 
  -47, 8, 2, -6, -9, 11, -19, 12, -15, -15, 13, 9, -4, -6, -75, -1, -8, 23, -8, 7, -33, 2, 20, 5, 1, 3, 0, -13, 1, 22, -8, -6, 12, -12, 3, -3, 11, -96, -17, 10, -20, 0, -40, -70, 9, 11, 4, 3, 18, -62, -39, -7, 8, 1, 11, -32, -32, -27, 1, -27, -9, 7, -12, -29, -27, 1, 14, 5, -88, 30, -15, -3, -56, 4, -10, 11, 2, 16, -67, -6, 5, 10, 5, -4, -37, -7, 2, 11, -6, 7, 2, 15, -1, 10, -41, -36, 11, -5, 2, 10, -2, -23, -24, -26, -54, -6, -40, -43, 8, 7, 3, 5, 30, -45, -11, -3, 3, -79, 6, -23, -19, -49, -4, -3, 9, 12, 3, -20, 6, -27, 19, -27, 7, -33, -9, 41, -27, -6, -9, -1, 2, -39, 2, -93, -4, 15, 22, 1, -9, -57, -3, -65, 15, -29, 0, 24, -2, 11, -7, 5, -4, -23, 5, -6, -46, -4, -45, 24, -35, -4, -13, -8, -28, -10, -26, 37, 1, -39, -25, -70, 51, -50, 7, -34, -5, 20, 9, -4, -9, 27, -46, -27, 
  10, 12, -34, -26, -1, 9, -2, 9, -26, -8, -72, 3, 21, -15, -3, -24, -17, -68, -28, -16, -43, 6, 7, 12, -39, -10, -2, -86, 7, -30, -16, -8, -4, -41, 2, 17, -10, -28, 1, 25, -5, -31, -71, 4, 20, 22, 4, 19, 44, -52, -13, -27, 11, -29, -7, 12, -30, -12, -7, 7, -31, 1, -5, 11, -2, -28, 2, -12, 3, 24, -7, 16, -17, -20, -41, 8, 6, 10, -39, -38, -46, 1, 12, -60, -61, 4, -2, -3, 7, -7, -1, 15, 6, 1, -13, 12, -2, -55, 7, -11, 4, -9, 8, -10, -17, -13, -65, -2, 12, 26, 15, -26, 41, -22, -1, -16, 0, -59, 1, 9, -30, -30, -6, 10, 7, 4, 12, 26, 4, -51, 14, -7, 13, -12, 12, 18, -15, -33, 3, 12, 32, -12, -15, -54, 42, -6, 35, -21, -32, 3, 7, -16, 19, -27, -7, 15, -8, -4, -16, 10, -29, -26, 4, -9, -80, 2, -3, 16, -39, 17, -23, 10, -37, 0, -26, 14, 50, -50, -17, -46, 25, -39, -13, 0, -47, 15, 12, -2, -5, 36, -54, 6, 
  -12, -19, -25, 15, 14, -13, -52, -3, -13, 13, -9, -9, -11, -67, 0, -17, -36, 17, -7, -46, 8, -17, 23, -13, 10, -54, -8, -17, 14, 13, 5, -36, 8, -15, 0, 14, -6, 9, -18, 0, -10, -3, -5, 8, 18, 2, -9, -2, 31, -20, -4, -19, -2, -46, -24, -30, -9, -9, -1, -21, 1, -7, 8, -3, -53, -49, 3, 11, 29, -39, -19, -1, -1, 22, -38, -12, -7, -31, 6, -23, -29, 6, -14, 3, 8, 17, 1, -7, 7, -8, 3, -19, -11, -3, 16, -21, 32, -8, -2, 23, -8, 0, -28, 9, -4, -6, -19, 14, -6, 3, -23, 1, -15, -14, 7, 17, -27, -31, -22, -9, 8, -6, -4, -37, -19, -18, -14, -4, -10, -36, 16, 19, 5, -12, 42, 35, 1, -10, -7, -15, 28, 28, -7, 8, -32, 5, 14, 25, 11, 19, 8, -8, 6, -40, 2, 0, 34, -1, 34, 13, -4, 7, 3, 2, 22, -4, 2, -24, -14, -13, 4, 34, -18, -5, -22, 9, -34, -69, 5, -25, -1, -5, -50, -13, 18, -26, 2, 14, -56, -14, -1, -12, 
  -2, 5, 16, -44, -11, -21, -10, 9, -7, -14, -19, -2, 13, -24, -16, -36, 7, -53, 10, -36, -58, -10, -5, 7, -17, -13, -7, -13, 21, 2, -25, -19, -6, -31, 1, 29, -28, 5, 21, -10, -26, -8, -7, 14, 12, -4, 7, -10, -18, 2, -2, 4, -23, -33, 2, 8, 5, 15, 3, 4, 9, 14, -13, 8, -5, -7, 21, -49, -1, -17, -65, 7, -5, -10, -62, -3, -12, 6, -31, -14, -18, -17, 3, -23, -48, -42, 6, 2, -25, -56, 3, 3, 27, 0, -4, 5, -23, -43, 4, 29, -13, 3, 7, -14, -47, -16, -3, 25, -12, -30, -1, 50, 36, -13, 8, 5, -15, -49, 1, 9, -16, 5, -1, 11, -14, 10, -40, 19, -14, 8, 14, -11, -16, 18, -21, 9, 11, -14, 8, -1, -8, -24, -20, -2, 23, -4, -15, -24, -35, -21, 13, -14, 5, -15, 1, 2, 19, -14, 25, 0, 6, -23, -6, -9, -27, 72, 13, 16, -20, -14, 37, -2, -3, -26, -29, 27, -25, -1, -7, 13, 7, -49, 19, 4, 10, 7, -5, -11, 26, -15, -6, 9, 
  22, -31, -28, -5, 12, -22, -14, 12, 21, -7, -13, -23, 21, -58, -43, -76, -31, -14, -21, -40, -67, -17, 22, -3, -41, -19, -1, -48, 7, 13, 2, 17, 9, -26, -8, -2, -21, 4, -22, -39, -22, -57, -40, -3, 9, 10, -1, -12, -6, 0, -7, -10, -59, -36, -37, 6, 7, -6, -8, -20, -13, -36, 14, 12, -27, -37, -5, -18, 3, -20, -17, 13, 21, -11, -14, -30, 15, -52, -12, -26, -26, -17, 14, 4, -33, -6, 13, 2, 6, -45, 5, -10, -4, 10, 14, 19, 30, -29, 0, 23, -11, -3, 12, -5, -35, -51, -7, 12, 0, 19, 1, 34, -1, -27, -3, -11, -7, -45, -29, 9, 18, -15, -3, -22, -44, 14, -16, 6, -18, -29, -16, 12, -28, 9, -4, 16, 4, 17, 19, -17, -2, -23, 0, -15, 31, 7, 9, 13, -13, 0, -8, 2, -1, -40, -7, 2, 18, 4, -51, 28, 8, -16, 2, -15, 7, 7, 0, -14, -25, -7, 3, 28, 7, -5, -4, 0, 15, -53, -5, -42, 6, -22, -23, 2, -16, 9, -6, 19, -6, 3, -20, -5, 
  32, 15, -1, -43, -17, -30, -23, -38, -2, 34, -4, -41, 10, -9, -40, -22, 1, -13, -59, -35, -5, -14, -11, 1, -21, 15, 4, -52, -26, 14, 27, -10, -42, 10, -1, 17, -9, -7, 4, 14, -11, -15, -60, -14, -12, 13, -32, 23, 33, 20, 9, 4, -56, 15, -33, -9, -6, 11, -9, -2, -48, -35, -30, -31, 16, -13, 30, -10, -15, -16, -71, -8, -4, -11, 4, -27, -47, -5, -20, -26, -9, -25, -34, -42, -5, -21, -2, -5, -33, -7, 3, -42, -12, -18, -1, -75, -4, -9, 0, -2, -20, -3, -13, 37, -33, -24, -51, -25, -32, 16, -25, -10, 17, 16, -2, 33, -2, 5, -19, -41, -36, 0, -5, -38, -55, -11, -4, -34, 13, -11, 45, 2, -11, -7, 30, -13, -31, -27, -17, -5, 21, 19, 13, -15, 38, -16, -65, -28, -40, -22, 12, -31, 21, -43, 6, -35, -21, -65, 31, -20, -19, -27, 2, 24, -9, -23, -11, 19, -6, 3, -10, -19, -18, -9, 13, 27, 18, -4, -11, 14, 29, -21, -30, -30, 8, 21, -1, -19, 1, -30, 3, -90, 
  12, -12, -46, -13, -24, 5, -27, -17, 2, 6, -33, 5, 2, 17, -17, -10, -7, 9, 2, 6, -33, -25, 16, 1, -6, 1, 1, 2, -37, 17, -11, -5, 6, -32, 2, 22, 17, -1, 3, -2, -13, -11, -20, 6, 14, 6, 10, -9, 8, -1, -15, -15, 0, -40, -11, -16, 11, -24, 0, -1, 17, 15, 13, -12, 14, -5, -56, -53, 3, 7, -41, -26, -29, -43, -14, 5, -7, 4, -88, -59, 12, 1, -24, -14, -53, -41, -8, 5, -26, 19, -3, 11, -3, -1, -48, -19, -28, -29, 4, 10, 14, -60, -24, -17, -38, -24, -15, -38, 8, 7, 17, 16, 45, 2, -115, -53, -1, -44, 8, -28, 4, -17, -3, -39, 32, 10, 5, 4, 7, 4, -15, 1, -14, 16, -17, -23, -9, -26, 35, 1, 2, -36, -4, -37, -23, 3, -31, -20, -36, 7, 1, 22, -3, 12, 1, 9, 9, 2, 31, -51, 3, -13, 6, -3, -35, -24, -13, 1, -36, 18, -10, -1, 0, 2, 20, 23, 16, -15, -9, -60, -39, -32, -14, -21, 24, -22, 2, -7, 3, -1, -10, 14, 
  -29, 19, -2, -10, 3, -25, -3, 25, -18, -6, 8, -2, 2, -44, -5, -9, -38, -25, 14, -17, -21, -21, 7, -6, -23, -45, 8, 8, 38, -22, -17, 14, -11, -29, 0, 21, -7, -16, 18, -20, 8, -4, 9, -16, 19, -9, -36, 38, -5, -26, 3, 24, -66, 9, -5, 4, -48, -84, -2, 14, -10, 0, -18, 18, -18, -1, -10, -26, -1, 18, 9, 14, -20, 31, -13, 6, -17, -63, 4, 2, -44, -41, 12, -3, -4, -36, 11, -3, -59, -13, 1, -3, 20, -56, -9, 14, -20, -5, 7, 0, -17, -43, 12, 6, 19, -43, -20, 9, 23, -58, -20, 43, 16, -11, 1, -17, -86, -1, -9, 11, -22, -37, 2, 5, -17, -1, -26, 9, 23, -36, 27, -74, -52, -11, 21, 26, -47, -20, 4, -29, -27, -26, -4, 8, -21, -34, -20, -19, -3, 9, 8, -15, -88, -47, -4, -22, -15, -54, -23, 10, 19, 5, 8, 13, -20, -62, 13, 25, -8, -43, -16, -39, -21, -64, 1, -2, 6, -26, 7, -5, -3, 1, -14, 8, -68, 0, 4, -5, 3, 1, -29, -24, 
  1, -14, -50, 8, -1, -20, -33, 6, 2, -33, 2, 1, -29, -2, -5, 11, 11, -12, -7, -24, -9, 14, -9, -2, 20, -17, 0, -8, -8, -1, -4, 0, 22, 17, 9, 13, -54, -41, -22, -4, -25, -17, -6, -26, 14, -10, 15, -18, 39, -39, 4, 0, 8, -12, 2, -43, -20, -1, -6, 6, -8, 7, 4, -23, 15, -65, -34, -7, 2, -14, -21, 20, 9, -15, 15, 4, -31, 12, -11, 9, 13, -7, -9, -9, -26, 23, -15, -7, 16, -4, -5, -17, -19, 17, -6, 14, -5, 4, 0, 6, -24, -71, -24, -27, -41, 2, -12, -71, 22, -4, 8, -17, 52, -29, -43, -24, 9, 13, 8, -14, -30, -26, -8, -22, 18, 8, 41, 1, 2, 7, 1, -9, 11, -18, -4, 14, 16, -24, -3, -12, -14, -9, -39, -4, 7, 1, 28, -5, -27, 25, -2, -19, 3, -31, -9, 6, -8, -5, 13, -56, -31, -2, 1, -6, -71, -12, 0, -22, -38, 7, 4, -14, 0, 15, 14, -2, -6, -25, -43, -53, 13, -7, 2, -29, -44, -25, -1, -18, 24, 18, -2, 5, 
  41, -6, -30, -16, -24, 16, 5, -63, 20, -15, -3, -79, 7, 12, 3, 15, 0, -69, -1, -9, -38, -14, -7, -20, -21, -3, 9, 1, -4, 6, -30, 10, -51, 21, -5, -11, 0, -26, 15, -40, -26, -5, -17, -44, 2, -4, 8, -15, -13, -30, -6, -33, -5, -1, -34, -27, -23, -24, 1, -10, 10, -5, 14, -14, 22, -15, -26, -50, -16, 11, -1, -53, -6, -38, -28, -24, -11, 13, 2, 4, -3, 2, -52, 4, -29, 0, 5, -28, -32, 4, 1, 9, -3, 11, -19, 4, -57, 1, -2, 6, -11, -16, -24, -15, 14, -6, -33, -80, -12, -12, 15, 1, 13, -62, -114, -30, -9, -4, -14, -35, -27, -62, -3, -17, 23, -40, 14, 12, 0, 12, -51, -38, 25, 5, -23, 15, -8, 1, -7, -38, 22, -24, -37, -4, -16, -1, -16, -64, -91, -14, -11, 2, 8, 17, -3, -2, 13, 25, -9, -40, -27, 6, 0, 6, 0, -66, -72, 17, 22, -32, -52, 10, -3, -6, 24, 3, 21, -25, -47, -70, -6, -18, 0, -40, -6, -32, 4, -7, 13, -41, 13, 9, 
  11, 21, 10, -15, -19, -33, -45, -39, -33, -5, 12, 12, -2, -3, -58, 1, -16, 20, 0, 9, -2, 0, -7, -18, -5, 6, -5, 11, -12, 8, -6, -24, -35, -19, 0, 26, 1, 0, -2, -6, -20, 3, 3, -19, -16, -51, -36, 4, -11, 6, 3, 12, -2, -4, 6, -3, -12, 20, 2, 0, 5, 1, -5, 10, 12, 24, 18, -18, -19, -38, -21, -28, -28, 10, -16, 11, -23, -9, -41, -1, -32, -22, -2, -4, 2, -31, 25, -31, -27, 21, -5, 11, -36, -74, -23, -25, -11, -32, 4, -3, 4, 9, 1, 3, -12, 2, 22, -5, -13, -7, -31, 10, 11, 14, -4, 14, -20, 4, 2, 2, -40, 10, 1, 18, 4, -1, -1, 10, -30, 0, 5, -19, 7, 21, -36, 9, -33, -34, 3, 8, -3, -32, -20, 3, -11, -16, 13, -4, -11, -39, 23, -19, -9, 29, 4, -12, 42, -37, 1, 0, 15, -10, -3, 6, 41, 36, 13, 12, 29, -65, 18, -22, 14, -34, -84, 9, -8, 18, -10, 4, -36, -16, 3, -10, -14, 15, -3, 26, 7, -17, 0, 11, 
  7, -11, -2, -6, -14, 22, -64, -98, 11, -19, -23, -51, -60, -2, 8, -1, -3, 9, 6, -14, -47, 5, -6, -23, -1, -8, -3, 0, 5, -6, -14, -33, 5, 21, 6, 29, 3, -10, 6, -28, -47, -47, -24, -3, 1, 5, -24, -8, 3, 3, -12, -20, -39, -40, -11, -27, 25, -6, 2, 1, 6, 9, 15, 1, 36, -25, -4, -23, -4, 30, -3, -13, -9, -65, -23, -43, -26, -16, -66, -31, 1, -38, -91, -42, -14, -10, -15, -29, -41, 1, 6, -23, -7, -9, -6, -31, -26, -42, 2, 12, -24, -29, 2, -21, -8, -112, 6, -3, -5, -20, -11, 37, -19, -11, -53, -18, -50, -77, -47, -38, 14, -10, 5, -17, 29, -26, 2, 15, -6, 4, -19, 6, -17, -46, -29, -36, -21, -17, 23, -55, -71, -41, 13, -25, -36, -22, -55, -26, -26, 7, 10, -10, -38, 0, 0, 1, 17, 3, 21, -32, -20, -6, 4, 15, -49, -21, -26, -9, -4, -10, 14, -16, 11, -15, -6, 36, -19, -34, -27, -12, -32, -33, -3, -38, 18, -39, -1, 9, 6, -21, 7, 3, 
  -11, -49, -3, -38, 18, 1, -8, 1, -15, -3, -18, 5, 6, -3, -12, -9, -5, 32, -17, -14, 1, -30, -6, 4, -9, -22, -3, -24, 24, 15, -11, -15, -18, -2, -3, -7, -17, 15, -12, 7, -11, -11, 12, 8, -1, -15, -6, 23, 28, -20, -13, 15, 11, -15, -8, -9, 10, 12, 8, -20, -39, 6, -22, 4, -10, -20, 5, -56, 6, -6, -5, 15, 16, 11, -57, -12, 10, -26, -23, 6, -43, 9, 19, 14, -26, -17, 1, 11, -16, -22, 2, -14, -2, 3, -30, 4, -17, -32, 2, 20, 10, 23, 1, 17, 4, -29, 27, 26, -3, -26, -3, -2, -11, -15, -11, 2, -9, -41, -13, 3, 21, 18, 9, 19, -2, 18, -42, -25, 16, -28, 13, -16, 1, 5, 18, -13, 2, -17, 37, 31, -28, -25, 9, 4, 12, 10, 17, 6, -21, -38, -2, -30, -41, -39, 0, -12, -12, -21, 13, 16, -2, -33, 8, 0, -7, 20, 43, 18, 2, -17, 28, 7, 7, -23, -19, 31, -45, -24, -1, 18, 2, 0, 5, 1, -2, -21, 7, -2, 13, 23, -1, -29, 
  -16, -6, 14, 11, 6, -46, -26, -77, 12, 8, -15, -8, -29, -58, 15, 2, -22, -3, -12, -15, 17, -8, -7, -48, 8, -13, -1, 21, 36, -3, 15, -10, -30, 8, -4, 5, -25, 5, 0, 39, -66, -11, 6, -4, -61, -22, -41, 34, 7, -2, 7, -30, -11, 5, 11, -5, -4, -28, 1, 15, -9, -13, 4, -4, -24, -10, 24, 18, -3, -9, -6, -42, -15, -15, -1, -1, 2, 2, 9, -31, 3, -18, -9, -31, 0, -36, -9, -56, -3, -45, 6, 14, -17, -23, 7, -34, -24, 3, -2, 3, -41, 3, -6, 6, -16, 5, 7, 7, -18, -36, -43, -8, 3, 13, 17, -21, -15, -17, 18, 14, -22, -47, 0, -1, -20, -9, -35, -16, 3, -30, 13, -13, 46, 18, 29, -17, 6, -17, -4, -13, 27, -5, 35, -15, -10, -64, 2, -58, -20, 3, 21, -77, 17, -54, -2, 27, -20, -122, 31, -3, 19, -7, -4, 5, -17, -28, -10, 36, -20, -35, 21, 21, -7, -76, -21, 26, 8, 4, 8, -13, 10, -63, 19, 0, -6, 20, -4, -20, 12, 7, -30, -41, 
  -39, -20, -37, -23, -35, -13, 2, 6, -13, -27, 8, -1, -13, -40, -16, -21, -21, -1, -45, -56, 6, -12, 27, 3, -8, -16, 2, 13, -18, 14, -29, -6, -30, -8, 2, 27, -28, 16, -3, 17, 28, -6, -37, 4, -23, 14, 13, -3, 17, 11, -5, 9, -5, -1, 26, -4, 3, 1, 3, -14, -20, -5, -15, -5, -30, -5, 11, -40, -42, -20, 19, 15, -6, 3, 37, 30, -18, -62, -2, -5, -6, 13, 6, 6, -13, -13, -1, 13, 12, -52, 13, 3, 18, 9, 1, -29, 20, 7, -6, 9, 1, -4, -15, 0, -15, 21, 0, 0, -37, -2, 22, 39, 43, 4, -33, 26, -15, 6, 24, -4, 3, -13, 5, -3, 1, 3, -27, -2, -7, -21, 22, -15, -10, -38, 14, 29, -19, 22, 22, 19, -20, -26, -40, -31, 44, 0, -1, 7, -69, -36, 7, -2, -10, -4, -2, 1, -9, 2, -9, -15, 1, -6, 4, 15, -9, 32, -6, 12, -23, -3, 9, 9, -14, 1, 6, 29, 16, -20, -27, -20, 43, 0, 0, -19, 22, 3, -4, 5, 24, -5, 0, -7, 
  -8, -35, -46, -9, -6, 0, -22, -12, -18, -10, 7, -5, -22, -16, 8, 3, -51, 33, -9, 2, 5, -23, 11, 3, 15, -9, 1, -1, -18, -40, 0, -13, -23, -21, 1, -10, 23, -2, -10, 34, 28, -23, 4, -13, -15, -3, -25, 25, 26, -11, 3, -32, -5, 1, -23, -21, -6, 4, -3, 0, 12, -5, 11, 8, 3, -15, 6, 7, -1, -7, -2, -6, -31, -5, -41, -8, -12, -36, 5, 17, -28, -35, -25, -49, 24, -59, 12, 8, -23, -20, 8, -67, 13, -61, -6, -5, 6, -32, -2, 36, 1, -44, -60, -15, 1, -54, 1, -2, -3, -29, -66, -15, -12, -4, -2, 11, -30, 0, -23, -18, -16, -19, -5, 7, 22, -3, 2, -12, -5, -34, 4, -14, -46, 36, 36, -8, -69, -10, 36, -40, -6, 10, 6, 21, 9, -33, -28, -59, 27, -28, 14, -7, -19, -10, 8, -17, 31, -5, 33, -15, 14, 0, 0, -10, 14, 26, -27, 8, 41, 7, -2, -22, -6, 10, -9, -11, 11, 36, -14, 20, -3, 8, -25, -16, -3, -9, 6, 22, 8, -24, 8, 12, 
  -9, -29, -28, -24, -54, -41, 4, 6, 21, -11, 7, 0, -34, 4, -10, 13, 16, -10, 9, -3, -8, 12, 10, 5, -10, -3, 10, -8, 21, -10, -35, 14, 12, -1, -1, -12, -2, -22, -38, 13, -16, 2, 11, -67, -16, 8, -6, -25, 2, -18, -5, 5, 10, -8, 8, -44, -45, 22, 19, -65, -3, 2, 14, -19, -36, -8, 1, 9, -67, -21, 14, -2, 4, -5, 25, -11, -27, -6, -12, 25, -5, -3, -13, 3, 2, 10, 14, -16, -5, -8, -10, -18, 17, -16, -5, 6, 7, 22, 3, 26, 8, -68, -29, 16, -10, -2, 16, -41, -2, 2, -2, -10, -22, -46, -17, 4, 6, 1, -11, -36, -29, -1, -6, -2, -5, -8, -19, -16, -21, 4, 5, 24, -31, -17, 26, 7, 11, 11, -32, 13, 16, 3, -25, 7, 37, -11, -14, 6, -5, -11, 16, -3, -21, -36, 2, -6, 3, -9, 37, -7, -19, 22, -2, 18, 7, -10, -3, 12, -30, -8, 21, -22, -19, 11, 14, 15, 7, -16, -26, 34, 4, -16, 16, -43, -1, -9, -8, 7, 19, 1, 4, -11, 
  1, -7, 8, 9, 5, -18, -11, -1, -9, 19, 2, -10, -14, -7, -12, 8, -32, -6, 3, 15, 7, -22, -18, 3, 23, 10, 11, 7, 21, 12, -3, -10, 27, -36, 3, -11, 30, -5, 8, 22, 13, 14, 21, 4, 4, -42, -43, 6, 56, -2, 26, -16, 1, 0, 11, 22, -44, 7, 11, -39, -26, -19, -31, -2, -36, -13, -12, 1, 14, -13, -29, 1, -59, -8, -33, 15, -17, 13, 1, 0, -39, -32, 19, 12, 13, -34, -5, -53, -2, -5, -2, -9, 6, -64, -1, -34, -25, -52, 1, 21, 4, -12, 0, -10, -32, 14, -3, -1, 11, -15, -28, 43, 3, -19, 6, 6, 3, -29, -14, 14, -44, -3, -7, 15, -55, 13, -29, 14, -55, -58, 17, 16, 19, 21, 3, -7, -35, -69, 25, -19, -16, -19, -2, 12, -5, -41, 22, 29, 18, -33, 5, -65, -4, -37, -6, 4, -37, -111, 37, 15, -9, -36, -2, 55, -11, 58, 26, 35, -24, -12, 28, 1, -15, -68, -60, 25, -6, -18, 16, 16, -22, -23, 23, -7, -40, -15, -5, 21, -19, 24, -33, -5, 
  13, 10, 28, 5, -2, -20, -69, -32, -4, -19, -1, 4, -11, -17, 12, -16, -17, -3, 15, -30, 6, -69, -7, -13, 8, -12, 10, -1, -4, 13, 5, -38, -44, -24, -6, 2, -10, 17, 4, 23, -40, 1, 12, -8, -83, -26, -29, 22, 6, 12, 11, 2, -14, -9, 6, 9, 3, 28, -13, 20, -2, -42, -10, -8, 7, -6, 20, 19, 1, -16, -35, -61, -10, 0, 2, 13, 2, -1, 5, -6, -28, 11, -38, -3, -2, -41, -14, -50, 5, 2, 3, 7, -33, 0, 2, -6, -4, -20, 5, 11, 1, 20, -5, 3, -34, -4, -8, -1, -24, -16, -55, 26, -1, 25, 9, -4, -21, 13, 9, 6, 0, 14, -1, -5, -12, -27, -20, 3, 9, -5, 61, -16, 22, -21, -4, 46, -23, -20, 16, 4, -14, 8, 19, 1, 61, -8, 9, -6, 8, -20, 15, -20, 15, -13, -10, -6, 9, -30, 30, -19, 12, -4, 0, 47, 8, -30, -9, 36, -10, -52, 11, 12, -20, -44, -48, -10, 20, 34, -12, 3, -11, -5, -13, 17, -10, 11, 2, -7, -6, -37, -36, -7, 
  5, -15, 7, 13, 0, -8, -3, -6, 0, 11, 9, -11, 3, 10, 0, 2, 10, 7, 11, -4, 17, -7, -12, 4, 13, 5, -1, -42, 27, -4, 1, 12, -3, 10, -6, 4, 0, 6, -15, 46, -3, -7, -11, -15, -20, -32, -4, 16, 19, -11, 4, -60, 5, -4, -9, -24, -14, 28, 0, 4, 6, 11, -26, -12, -5, 0, 21, 0, 11, -28, 5, -2, -9, 8, -60, -16, -4, 2, 5, 16, 12, -8, -36, -8, 20, 3, -4, -7, 6, -1, -6, -19, -16, -19, 18, -22, 0, -7, -2, 15, 6, 4, -17, 29, -9, -7, 2, -9, -6, -21, -23, -9, -48, -9, 5, 28, 2, 6, -20, -16, -10, 21, -4, 18, -28, -9, -18, -42, 13, -20, 23, -1, -30, 0, 14, -19, -35, -21, -1, 1, 11, -7, -20, 4, -6, -43, -14, -74, 17, 3, 3, -23, 3, -37, 3, -26, -1, -28, 19, -4, -1, 3, 5, 10, 18, -7, -5, 21, 11, -8, -16, -31, -6, -28, 3, 19, 0, 66, -13, 28, -40, 23, -10, -11, -25, -8, -1, 7, 6, -5, -35, -29, 
  21, -1, 1, 7, -10, 12, -36, -14, -39, 12, -4, -36, 18, 1, 2, -5, -29, 18, -7, 19, 4, 13, 14, -56, -6, -16, -5, -50, -43, 9, 13, -39, 39, -15, -3, 27, 15, -19, -53, -10, -4, -9, -11, -51, 10, 16, 1, -3, 2, -12, 29, -22, -7, -16, -21, -25, -28, -25, -4, 0, -4, -48, 11, -54, 9, 2, -20, 4, 6, 34, -34, -4, -14, -11, -28, -16, 9, -7, -13, -17, -26, 12, -4, 10, -26, -12, 8, -32, 11, 4, -2, 21, -7, 6, 11, -48, 14, -22, -1, -5, 1, -9, -43, 33, -21, 3, -6, -16, 16, -5, 5, -32, 27, -14, 16, -31, 7, 1, -1, -55, -20, -35, -8, 2, -76, -42, -8, -25, 7, 13, 6, 15, 10, 0, -9, 0, -11, 14, -20, -55, 16, 39, 9, -19, -32, 2, -3, -33, -12, 15, 0, -88, 28, 21, 7, -4, 6, 12, 19, -43, -36, -37, 1, -3, 17, -19, -29, -3, -33, -23, -52, -24, -43, 15, 17, 14, 0, 72, -17, 10, 10, 4, -5, -8, -34, 24, 4, -55, -7, -24, 6, -48, 
  -1, -31, -25, -11, -27, 19, 1, -1, -13, 4, 2, -2, 8, 6, -6, -6, 13, -5, 12, 12, -28, -14, 7, -19, 9, -1, 0, -53, -10, 11, -27, -3, -31, 22, -3, -6, 10, -8, -25, -19, -6, -1, -25, -7, -17, 4, 4, -23, 2, 8, -35, -14, -1, -4, -27, -37, -17, -30, 4, -8, -10, -25, 13, -1, -21, -23, 8, -13, -6, 3, -3, -4, 11, -22, -7, -7, -5, 10, -13, 12, 6, -2, -26, 20, -36, 19, -5, -20, -7, 0, 1, -9, -6, 9, -14, -9, 4, 2, 1, 4, -5, 16, -9, 11, -19, 2, 0, -7, -16, 4, 12, -6, -10, 2, -43, -53, 14, -11, -56, -21, 4, -32, -5, -25, -29, -45, -2, -3, -13, -17, 4, -15, -10, 9, 21, 14, -6, -29, -11, -56, 9, 21, -31, 10, 16, 20, -4, 4, -26, 23, 4, 8, 36, -5, -4, -5, -19, 21, 5, 0, -13, 4, -4, -7, 13, -22, -13, 3, -2, 6, 25, -1, -3, 2, 7, -1, -12, -14, -54, -14, 11, -19, 7, 2, -1, -1, 0, 6, 4, -33, 24, -21, 
  -16, 0, -12, -26, 0, -11, -38, -1, 4, -22, 8, 9, -4, -29, -27, -15, 5, -19, -40, -31, -15, 7, 7, 2, 11, -18, 4, -15, -31, 2, -3, -26, 16, 22, 1, 41, 15, -5, -36, 49, -44, -9, 5, -4, 9, 17, 8, 3, 10, -18, -17, 12, -1, -33, 2, -33, 29, 9, 17, -37, -12, 9, -4, -36, -20, -45, 17, 12, -39, -38, -28, 6, 16, 5, -43, 1, -30, -16, -8, 21, -18, 16, -14, -3, -16, 7, -15, -1, 7, -21, -3, -5, 11, 10, -15, -41, -1, -18, -1, 40, 11, 11, -59, 20, -22, 7, -10, -6, 3, 19, -2, 2, 8, -46, -42, 14, 17, -4, -4, -25, 13, 1, 0, 3, 2, -5, 16, -61, -43, -25, 2, 13, -24, -7, -31, 6, 25, -5, -17, 8, 12, 32, -48, 8, 34, -17, 3, 11, -8, 23, -6, -16, 3, -69, 3, 17, 48, -20, 48, 13, -3, 2, -7, 11, 14, 8, -18, -1, -42, -29, 18, -27, -33, 29, 18, 53, 44, -36, -32, 5, -21, -33, 22, -3, 3, 12, 4, 13, 13, 10, -9, -20, 
  13, 10, -42, 13, 20, -31, -24, 9, 6, 2, -40, -38, 44, -40, -22, -27, -32, 8, -24, -46, -1, 6, 19, -61, 8, -5, 6, -21, 14, -33, 0, -37, 19, 5, -2, 8, -74, -6, -9, -25, -10, -33, -16, -38, -45, -2, -31, -17, -2, -28, 9, 5, -20, -16, -18, -1, -61, -3, -1, -17, -4, -61, -53, -60, -25, -32, -14, 5, 17, -54, -22, 0, 24, -2, -7, 14, -34, -63, -25, -33, -70, -15, 4, 0, -18, 34, -2, 15, -52, -21, -4, -50, -8, -34, 2, -24, 14, -23, 4, 4, 3, -41, 8, -6, 9, -25, -49, -26, 3, -9, -48, -20, 19, -61, -38, -33, -16, -20, -5, 20, -49, -9, -2, -17, -48, -2, 7, -10, 21, 15, 40, -17, 15, -12, 13, 21, -35, 11, -30, -18, 60, 28, -62, -1, -10, -12, 4, -41, -33, 44, -10, -71, -5, 5, -3, -21, 20, -31, 11, -5, -17, -38, 6, -6, -14, -13, 29, -9, -6, -11, -4, -24, -14, -4, 20, 3, 6, 10, 1, 5, -36, -13, -33, 0, 24, -8, 2, 24, 21, 5, 47, -39, 
  5, 7, -14, -25, -34, -36, 6, 3, 12, -38, -41, -16, 11, -32, -8, -15, -50, 30, -57, -60, -12, -15, 1, -8, -24, 5, -6, 10, 15, -5, -7, 13, 26, 12, -1, 5, -13, 9, -32, -3, -12, -70, -41, -10, -5, 7, -14, 36, -4, -49, -27, 22, -51, 19, -32, -25, 11, -16, 1, 8, 18, -40, 21, -12, 19, 25, -16, -13, -2, -3, 3, -9, 8, 38, -3, -52, 1, -37, -14, -20, -20, -9, -34, -30, 0, 17, -30, 5, -20, -6, 10, -30, 1, 8, 4, -14, 24, -5, -7, 8, -8, 1, -50, 6, 24, -84, -33, -6, -4, 3, -5, 53, -14, 30, -10, 1, -28, -12, 11, -20, 15, 4, -5, -13, 10, -31, 26, -15, 20, 20, -40, -4, -19, -10, -14, -21, -10, 1, 28, -28, 5, 8, -31, 14, 22, 3, -50, 13, -18, 44, 3, -19, -17, 11, -1, 1, 6, -2, -14, -39, 12, -13, -4, 35, -54, 6, -10, -2, -1, -74, 34, -8, 6, -17, 3, 47, -22, 60, -18, 16, -3, -8, -7, -24, 13, 15, -6, -19, -45, -28, 14, 7, 
  -19, -17, 13, 9, 15, -50, -11, -23, 20, -3, 10, -44, -37, -1, 24, 22, 9, -14, 4, 14, -7, -8, 0, -51, 39, -21, -6, 0, 19, -3, 7, 6, 6, 4, -2, -8, -28, 9, 1, -12, -20, -1, -12, 11, -42, -15, -3, 6, 5, 6, 8, -36, 10, 9, -72, -13, 7, -12, -2, 5, -9, -76, -17, -25, -36, -45, 19, 8, 15, -55, 1, -30, 16, 4, 17, -53, 12, 10, 14, 1, -3, -17, -43, 9, -6, -8, 0, -63, 13, -55, -2, -23, -36, 19, -7, 3, -24, 15, -3, -7, -32, 15, -47, 5, -42, -5, -29, 12, -26, -23, -7, -4, -20, 19, -3, -19, -21, 3, -39, -18, -37, -55, 1, -39, -20, -72, -40, -12, -28, -43, -15, 28, 32, -35, 23, -13, 18, -47, 65, -37, -3, -7, -50, 2, 16, -18, -15, 7, 7, -5, -5, -46, 1, -18, -2, 6, 8, 2, -44, -32, 5, 1, -7, 19, -55, -21, -12, -12, 7, -5, 5, 35, -2, -17, -8, 12, -11, -30, -11, -58, -18, -40, 23, -9, 9, -44, -1, -21, 23, -28, 18, 10, 
  10, 11, -10, -10, -4, 17, -29, -4, 10, -58, -16, -22, 20, -1, -51, -15, -17, 31, -6, -7, -13, -20, -11, 14, -18, 7, 13, 3, 3, 19, -56, -28, 12, -22, -3, 2, 25, -11, -23, -19, 3, 1, -27, 7, -38, 4, 9, 15, 6, -32, -13, 17, -16, -3, 8, -1, 2, -11, -2, -13, -28, -8, -22, -16, -35, -23, 1, -49, -12, -2, -39, 9, 4, -13, -40, -23, 10, 1, -51, -72, 7, 17, 3, -19, -98, -23, -13, 19, -3, 10, 5, 12, 5, 11, -33, -33, -14, -47, -2, 15, 17, 8, 5, -8, -37, -2, -59, 0, -48, 8, 9, 6, 19, -2, -65, -47, 13, -47, 3, -4, -1, -32, 4, -23, 26, -1, -34, -8, 2, 9, -22, -10, 2, 18, -15, 21, 15, -18, 26, 5, 12, 10, -37, -47, 9, 10, -33, -18, -39, -32, 10, -5, 3, -38, -6, 21, -22, 9, 33, -28, 14, -45, -6, -13, 19, -40, 1, 26, -60, 17, -62, 6, -25, 9, 40, -3, 0, 6, -47, -37, 28, -60, 12, -6, -11, 9, -6, -80, 21, 19, -60, -13, 
  -19, 8, -37, 20, 5, -4, -10, 4, -15, 15, -8, -24, 18, -11, -2, -34, -7, -52, -62, -60, -7, 17, 17, -19, 2, -32, -3, -35, 37, -36, 1, -31, 19, -15, -2, 11, -6, -14, 4, 10, -30, -44, -13, 3, 2, -6, -22, 8, 56, -7, 9, -8, -46, -11, -37, 10, -28, -6, 14, 6, 0, 0, 18, 2, -2, -33, -44, 19, 17, -4, -20, 3, -22, 8, -57, 8, 3, 6, 6, -56, -34, -39, 7, -25, -26, 7, -7, -14, 1, -15, -5, -35, -3, -53, -10, 14, 5, 29, 3, -9, -19, -11, 4, -37, -28, -42, -23, -6, 19, 11, -38, 5, -4, -18, -1, -13, -13, -16, -19, 4, -6, -12, 2, 12, 1, 9, 16, 3, -22, -15, -3, 17, 12, 9, -13, -21, -8, -2, 28, -29, 2, 12, -3, -61, -38, -9, 13, -26, 10, 20, 2, 2, -11, -29, -6, 25, 14, -2, 20, 36, -23, 22, 6, 3, -4, 19, 14, 17, -21, -10, 17, -24, -1, 5, -31, 35, 39, -36, 16, -51, 6, -40, -26, -8, -67, -12, 9, 4, 31, 20, 27, 4, 
  16, 17, -31, 21, 12, -15, -42, -111, -1, -26, -17, -4, -5, 6, 8, -12, -40, -3, -60, -68, 0, -12, 26, -43, 15, 14, -4, 24, 16, -2, 2, -2, -53, 22, -1, 16, -20, -3, 5, -21, -36, -49, 4, 8, -15, -28, -41, 25, 8, -24, -11, 3, -41, 7, 16, 4, -14, 9, -11, 12, -2, -9, -1, 5, 10, -7, 14, -20, -13, 2, -23, -29, -10, -28, -12, 2, -17, -27, -10, -47, -59, -38, -76, -14, -8, -62, 8, -26, -22, 11, -8, 23, 16, -9, -7, -58, -33, -18, -6, 0, -21, -15, -11, -11, -16, -19, 19, -16, -15, -24, -53, 61, 76, 30, -14, -24, -40, 1, 3, 3, -6, -45, 0, -69, 22, -30, 10, 13, 44, 19, 37, -7, 25, -20, -41, -45, 6, -16, 17, -22, 48, -45, -21, 0, 39, -30, -25, -2, -42, 6, 22, 10, -21, -2, -4, 33, 25, -38, 57, -21, -24, -1, -3, 10, -23, -41, 21, 28, 17, -29, -21, -19, 17, -45, 10, -20, 9, 18, -17, -19, -39, -21, -45, 0, -4, -42, -1, -38, 11, -22, 13, 0, 
  -5, 24, 20, -42, -44, 3, -14, -18, 11, 8, 1, -20, 18, -6, -38, -36, -18, -20, 15, 0, -23, -24, 15, -18, 1, 8, 3, -25, -14, 17, -58, -14, -17, -26, 0, -14, 9, 24, 6, 7, -39, -5, 15, 8, -71, 3, 2, 6, 11, 21, -40, 12, 4, -23, -2, 20, 7, -17, 5, -12, 11, -15, -1, -9, -19, -18, 5, -17, -13, 8, -15, -55, -3, -8, 15, 0, 9, -1, -25, -72, 11, -4, -17, -3, -29, -21, 9, -38, -2, 5, 1, 15, 24, 12, -55, -15, -1, -37, 2, 6, 9, 7, -3, -13, -68, -1, 32, -12, -35, -7, 2, 28, 2, 6, 4, 10, -19, -51, 9, 3, 15, -27, 10, -10, 11, -34, -34, 11, 7, -8, 31, -61, -4, 0, -9, 6, 0, 2, 9, -3, 30, 13, 3, -21, 4, -12, -17, 17, -57, -6, 15, -37, -12, 12, -5, 19, -21, 20, 0, -10, 0, -8, -5, 34, 11, 8, 2, 11, 0, 4, 15, 9, -58, -15, 18, 4, -21, -5, 2, -29, 20, -7, 16, 11, 16, -15, 9, -38, -57, -19, -15, -2, 
  -28, -20, 11, -4, -5, -1, 7, -18, -3, -8, 11, -23, -31, -26, 9, 14, -13, -49, -2, -7, 0, -2, 13, -34, 2, -35, 1, -19, 7, -2, 8, 15, 14, 14, -5, 11, -44, 12, -39, 14, 19, 14, -36, 0, -11, 12, -17, 15, 4, 6, 6, 23, -33, -3, -22, -18, -43, -73, 1, -9, -7, -57, -5, -30, -65, -48, -47, 11, -10, -1, 14, 7, -26, 42, 8, -43, -31, 5, 2, 29, 11, -25, -11, 4, 6, 3, -2, 1, 10, 1, 0, 3, -45, -11, 10, 9, -5, 17, -4, 11, -32, 6, -40, 9, 29, -10, -24, 3, 20, 11, -21, 4, -18, -5, 4, -19, -17, -2, -71, -44, -69, -49, -4, -12, -74, -41, 10, -33, -32, -22, 22, 1, 14, -55, 58, 4, -24, 8, -28, -49, 19, 17, 25, 13, -15, -27, -8, -34, 5, -10, 14, -12, 23, -23, 8, -16, -8, -11, -60, -17, -8, 6, -4, -13, 0, -36, -42, 27, 13, -21, 1, -9, -3, -2, 0, -10, -24, -29, -18, 23, -21, -5, -31, 11, -27, -43, 3, -8, -5, -40, -12, -4, 
  -5, -13, -8, -9, -5, -2, -3, -16, 0, -6, -5, -7, -8, -9, -2, -4, 2, -8, -7, -5, -4, -9, -3, -8, -6, -8, -1, -3, 6, -14, -5, -11, -10, -7, -5, 5, 0, -5, -1, 2, -8, -6, -6, -7, -7, -6, -6, 1, 3, -4, 0, -4, -4, 1, -2, -8, -10, -6, 4, -5, -4, -9, -3, -9, -4, -4, -5, -4, -8, -5, -4, -4, -8, -1, -1, 2, -3, -8, 1, -9, 0, -3, -3, -2, 0, -6, -4, -6, -4, -7, 4, 0, -1, -5, -8, 0, -8, 2, -2, -7, -1, -10, -4, -1, -6, -6, 0, -4, -2, -4, -1, -4, 3, -4, -2, -4, -8, -1, 1, -11, -2, -6, 4, -1, -6, -8, 3, -8, -7, -6, -4, -4, -1, -1, 1, 6, -2, -9, -3, -5, -5, 4, -1, 5, 2, -8, -17, 2, -3, 0, 1, -3, -7, -6, 0, -8, -8, 1, 0, 0, -15, -7, -7, 4, -2, -5, -6, 0, 7, -8, -6, -6, -2, -9, -4, 1, -2, -3, 0, -5, 4, -1, -6, -7, -1, -7, -6, -4, -2, -5, -1, -2, 
  -32, -5, 16, 23, -6, -44, -43, -49, 4, -35, 26, -5, -27, -14, 18, 12, 38, 21, -13, 21, 9, 21, -5, -50, 1, -6, -2, 25, 16, -6, 2, -13, -25, -1, 2, 25, -5, 1, 6, -3, -33, 10, 24, -3, -25, -22, -17, 14, -9, 1, -14, 5, -10, -16, 10, 1, -11, -6, 8, -6, 13, -18, 11, -1, -27, -7, -15, -14, -51, -35, 2, -41, 4, -26, -58, 8, -10, -15, 10, 3, 3, -28, 10, -25, -13, 1, 12, -94, -9, -20, 1, 20, -6, -48, -38, -20, -43, -24, -3, 16, 3, 2, 4, 54, -21, 14, 9, 7, -113, -44, -38, 15, 33, 9, 0, -2, -31, -27, 9, 2, -26, -7, -8, 12, -3, -22, -63, -6, 4, -29, 35, 4, -62, -39, 59, 44, -14, 15, 48, -12, 46, 11, 37, -70, 44, -2, 31, 5, -44, 18, 3, -35, -16, -48, 1, 0, -10, 6, 7, -31, 1, 4, -2, -7, -31, -38, 8, 1, -13, -61, -14, -9, -35, -32, -15, -7, 7, -10, -5, 0, -10, -38, 9, 14, -26, 12, 8, -41, -6, -17, -82, -33, 
  -10, -10, 5, -4, -17, -1, -9, -36, -1, -20, 8, 3, 9, 14, 3, 0, -19, 10, 19, 7, -13, 15, 4, -39, -12, -3, 11, 14, -13, 4, -53, 2, -29, 8, 1, 5, 23, -15, -3, 9, -39, 28, 8, -14, -32, -8, -9, 33, 30, -11, 4, -5, 1, -1, -13, 4, -32, 4, -6, -18, -32, -15, -12, -4, -31, 6, 0, 12, -36, 6, -29, -11, 8, -5, -32, -1, 14, 1, -14, 1, 8, -13, 16, 16, -14, 11, -5, -34, 4, -6, 2, -3, -12, -7, -52, -8, -22, 4, -3, 13, 28, -36, 0, 13, -42, 16, 9, -27, -65, 11, -6, -2, -12, -4, 2, 0, -11, -17, -3, -2, -27, -16, -1, 3, -11, -10, 6, 4, 2, -41, 28, -4, -36, -7, 0, 4, -33, -11, -24, -3, 2, 9, 4, -18, 4, 2, 0, 17, -32, -24, -4, -20, 13, -24, 3, 20, -31, 11, 35, 23, 10, 23, -2, -2, -27, 1, 7, 5, -46, -49, 33, -5, -30, 11, 2, -2, 25, -4, -16, 1, -20, -63, 2, 11, 13, -15, 5, 14, 4, -14, -23, 2, 
  -2, -30, 0, -9, -38, -2, 6, -3, -8, -14, 4, -7, -11, 8, -8, 15, 11, -19, -2, 10, 2, -3, -10, -1, -16, 7, 14, -13, -17, -1, -40, 2, -32, 17, -1, 10, 4, -41, -26, -25, -3, 3, 2, -32, -27, -8, 8, 1, -1, -25, -13, 15, 13, 5, -6, -57, -29, 7, 12, -3, -10, -3, -7, -14, -10, -3, 1, -12, -88, 19, 4, -6, -24, -1, 33, 7, 3, 17, -4, 18, 5, 7, 1, 7, -2, -10, -8, 15, 0, -7, -1, -15, 5, -4, -15, 9, -2, 15, -5, -15, 6, -32, -16, 39, 14, 0, -2, -58, -12, -7, 20, -2, 32, -50, -35, 16, 12, 1, 4, -60, -49, 2, -7, -21, 12, 8, -21, -5, 0, -40, -4, -15, 5, 5, 38, 19, 1, -7, -24, 0, 26, -11, -15, 7, 40, 13, -7, 2, 3, 18, -8, 2, -19, 10, -1, 3, -13, 4, -62, -21, -1, 4, -2, 30, -8, -36, -18, 23, 44, 23, 2, 3, 2, -21, 14, 14, -2, -3, -43, 10, 14, 10, 4, -11, -16, 0, -7, 9, 28, 14, -7, 1, 
  5, 1, 15, -9, 23, -8, 0, -5, -11, 16, -17, -5, 21, -1, -27, -7, -25, 22, -12, 9, 1, -55, 2, -24, -46, 8, 2, -67, 26, -1, 10, -7, -7, -36, -2, 32, 40, 5, 9, 11, -31, -5, -33, -3, 8, -13, -12, -1, 2, 2, 5, -28, -3, 3, -24, 6, -6, -4, -9, 2, -6, -12, -25, 16, 16, -3, -31, -29, -2, 5, -39, -10, -20, -10, -17, -2, 24, -12, -4, -33, -24, 16, 21, 14, 0, -44, -7, -34, 1, 10, -7, -10, 21, 7, 6, 4, -21, -37, -6, 11, 14, 10, 3, 24, -26, -8, -7, 12, -1, -5, -5, -5, 2, -14, 6, 2, -4, 0, -24, -19, -5, 20, -9, 25, -20, 5, -46, -15, 12, 6, -10, -19, 22, 15, -45, 19, -8, -23, 0, -30, 14, -2, 5, -36, -7, 6, 31, 2, -3, -4, 17, -40, 11, 30, 1, -10, 1, 5, 5, -6, 24, -29, 9, -3, 17, 18, -16, 33, -19, -1, -34, -1, -1, -23, -24, 12, -8, 65, 8, -19, 10, 0, -16, 25, -2, 3, 6, -8, -12, -7, -12, -39, 
  -29, -11, -1, 0, 10, 19, -8, 5, -11, -18, -22, -22, -21, -24, -56, -34, 12, 4, 5, -12, -39, 7, 11, 5, -16, -6, 6, -18, 3, -41, 13, 11, 18, 1, -7, 25, 3, -30, -31, 57, -4, -43, -25, -9, 6, -22, -20, -1, -7, -45, -11, 31, 3, -3, 10, -12, -12, -8, 0, -23, -4, -8, 34, 6, -10, 3, 20, 9, -52, -9, -1, -39, 3, 20, -13, -49, -22, -33, 14, 9, 1, 9, -16, 4, -51, -15, -7, -8, 27, -28, 3, 30, 18, -21, -16, -14, -13, -23, -8, 5, -7, -9, -20, 24, -43, -40, -12, -12, -15, -42, -1, 10, 34, 5, -30, -2, -22, -22, -32, 4, -47, -13, -4, -22, -5, -18, 47, -11, 51, 10, 21, 18, 26, 9, 35, 19, -56, 11, 24, -35, -7, 6, 14, -8, 20, 4, -9, -3, 13, -28, 0, -47, -33, -26, -6, 32, 14, -3, 35, 0, 6, -3, 4, 24, -17, 30, -23, 10, -18, -13, 24, 50, -22, -28, 11, -21, 5, 3, 17, -26, -5, 0, -23, -8, -20, -9, -5, 4, -15, 6, -19, -26, 
  19, -20, 24, 43, 10, -6, -18, -42, -3, 12, 5, -23, -33, -52, 22, -34, -40, 26, -15, -45, -37, -18, -4, 7, -1, -11, -5, 17, 22, 0, -7, -62, -23, -13, 6, -4, -14, -33, -62, -15, -35, -53, -41, 9, -44, -17, 2, 35, -19, 19, -11, 20, -45, -11, -16, -16, 26, 1, -3, -8, 15, 14, -18, -28, -14, -27, 31, 22, 10, -19, -37, -26, 43, -6, 28, -7, -16, -18, 7, 12, -33, -1, -18, -2, 1, -32, 21, -22, 7, 7, 3, 0, 6, -3, -5, -41, -16, -20, 0, 24, -38, -2, -22, -23, -57, -22, 10, -41, -30, -50, -3, 35, -23, 37, 0, 5, 13, -25, -23, 16, -15, -37, -5, -26, -31, -19, -16, -32, -28, -17, -34, -3, 31, -11, 32, -34, 13, 7, 46, -8, 0, -24, 41, 3, 2, -17, -29, 10, 10, -37, -1, -23, -16, 2, 5, -22, 30, 29, 54, -1, 46, -17, 2, 27, -20, -5, -9, 5, -29, 12, -25, 45, -25, -27, -11, 1, -15, -18, 5, 24, 6, -10, 40, -36, 33, -29, 2, -61, -12, -6, 11, -31, 
  -17, -17, -31, -43, -22, -5, 4, 3, 19, -17, 9, -9, 7, 8, 11, 12, -9, -2, 0, 14, 7, 4, 7, 9, -9, -7, 7, -15, -11, 20, -35, 8, -30, 11, -5, 35, -1, -8, -26, -11, -5, 8, 0, -1, -28, 8, 5, 4, 19, -18, -27, 18, 10, 12, 7, -4, 4, -31, 10, -13, -30, 11, -18, -22, -7, -56, -21, -36, -20, 1, -22, 9, -6, -32, 1, -11, -24, 5, -30, 1, 19, 10, 7, -32, -84, 2, -15, 10, -6, -16, -4, 6, -17, 19, -36, -5, -25, -6, -6, 1, -4, -30, 0, 7, -65, -11, -31, 7, -23, 4, 2, 14, 18, -20, -18, -35, -11, -14, -2, 3, -9, -49, -3, -23, 13, 2, -4, 13, 11, -16, -7, -7, 5, -70, 17, -2, -42, -50, 18, -29, 26, -27, -3, -40, 14, -3, 5, -16, 4, -49, 8, -41, 3, -20, -7, 40, -13, 13, 29, 5, -54, -33, 4, 18, -48, 25, 27, 23, -19, 5, -10, 3, -30, -11, -46, 40, 4, -5, -39, -40, 22, -14, -6, -26, -25, 29, 7, -4, 7, -3, -19, -21, 
  -9, -19, -6, -29, -1, -8, 8, 18, -15, -22, -34, -9, -12, -61, 8, -5, -26, -33, -39, -67, 2, -2, 28, 11, -13, -42, 7, -43, -4, -20, -23, 9, -2, -15, 2, -10, -19, -4, -68, -28, -5, -47, -24, -6, -5, 10, 7, 16, -3, -65, -50, 38, 9, 7, 11, -18, 8, 11, 8, 1, -5, 16, -7, -24, -21, -9, -12, -2, -16, 1, 13, 31, -3, 30, -22, -1, -6, -52, 2, 2, -19, 2, 9, -60, -9, -8, -25, 8, -7, -13, -12, -25, 3, 10, 4, -10, 16, 7, 0, -22, -10, 6, -34, -13, -12, -14, 13, 15, 28, 12, 17, 13, 18, 6, -43, -11, -2, 15, 16, -41, -6, -28, -2, -35, -39, 3, 17, -22, 8, 17, -3, -1, -14, 6, 52, 0, 14, -6, -41, 25, 17, 10, -31, -7, 67, 12, -2, 2, -69, 15, 19, 4, -15, -13, 2, -30, 33, 15, 0, -62, 29, -16, -1, 13, -32, -3, -29, 37, -26, 0, -54, 22, -2, 12, 2, 1, 1, -62, -35, -37, -11, -11, -6, -16, -5, 30, 4, -65, 1, -26, 12, -11, 
  -20, -35, 0, -19, -20, -34, 17, -8, -32, -31, -5, -36, -30, -12, 8, 16, -11, 17, -12, -8, 6, -21, 48, 3, 26, -16, -4, -32, -20, -10, -11, -20, 13, -17, 0, 2, 22, -28, -26, 27, 14, -10, 11, -44, 6, -24, -35, 33, 33, -12, -17, 15, 1, -5, 5, -19, -59, -3, 5, -24, 19, 9, 14, -3, -40, -36, -23, -13, -28, -1, -19, 6, -15, 9, -42, 0, -48, -12, 3, -2, -20, -23, 16, -33, -8, 5, 12, 14, 0, -61, -4, -58, 22, -15, -8, -5, 27, -12, 6, 39, 5, -37, -33, 15, 15, -13, -7, -51, -17, 0, -20, 4, -5, -32, -21, 23, -1, -10, 0, -39, -40, 8, -1, 37, 20, 7, 1, -36, -39, -12, -1, 7, -30, 14, 39, -23, -21, 33, 14, 22, -7, -16, 24, 6, -2, -10, -26, -17, 4, 24, 7, 5, -6, -13, -1, -20, 43, -7, 14, 6, -2, 6, 6, -6, -4, 22, -28, 32, 49, 18, 15, -43, -17, 17, 12, 20, 25, -24, -69, 13, -14, -3, 9, -31, -8, 3, -1, -14, -13, 11, 11, -3, 
  -25, -10, -8, 1, -16, -17, 9, -5, -1, 27, 16, 9, -5, 12, 7, 18, 16, -6, -13, -8, 6, 3, 9, -11, 26, -41, 2, 7, -21, -1, -16, 8, -27, 18, -1, -18, -50, 4, 1, -12, 3, -2, 1, 6, -85, -19, -9, -16, -10, 14, -30, 7, 0, 12, 8, -11, 10, -5, 11, -21, 7, -8, -12, -6, -50, -12, 20, 0, -23, 7, 11, -22, 15, -1, 45, 5, -24, -5, 6, 20, 11, 5, -17, 6, -4, 4, 4, 0, 3, -22, 4, 21, 13, 0, -3, 4, 13, 0, 5, -15, -51, 16, -18, -8, -9, 0, 16, 7, -86, -18, 2, 38, -3, 9, 5, 5, 0, 4, 22, -12, -23, -40, -5, -13, -3, -18, -35, 0, -29, -27, 23, -6, 22, 5, 68, 16, 1, -8, -1, 19, -9, -16, -3, 13, 10, 11, -2, 7, -15, 17, 13, 2, 12, -22, -1, 2, 5, 4, 47, -19, 4, -4, 6, -2, -42, 0, 16, 9, 13, -13, 18, -15, -21, -21, 3, 12, 6, -15, -15, -20, 10, 2, 7, 9, 3, 4, -9, -31, 18, -17, -28, 3, 
  -15, -16, -87, -9, 9, -19, 17, 0, -34, 19, -56, -53, -15, -64, 7, -33, -34, -17, 15, -45, 10, -8, 54, 20, 8, -18, -2, -22, 35, 13, 14, -14, -67, 5, 3, 10, -63, 11, -61, -6, 2, -47, -20, 12, -10, -17, 5, -1, 33, -1, -10, -1, -36, -12, -31, -1, -6, -31, -3, 35, -26, -9, -28, -75, -40, -21, -14, -29, -2, -11, -34, 5, -20, 31, -9, -6, 7, -18, -4, 14, -10, -24, -18, -49, -2, -45, -20, -4, 13, -9, -4, -15, 29, -9, -6, 14, 14, -4, -1, 25, -6, 29, 22, -5, -3, -6, 3, -24, -32, -36, -17, -15, 32, -13, -14, -36, 5, -18, 24, -32, -47, -31, 5, -9, -17, 5, -27, -39, 6, -20, -10, -17, 46, -27, 54, 41, 3, -50, 44, 16, -6, -40, -62, -19, 59, 3, -10, -45, -37, -16, -1, -9, -25, -27, -7, -50, 7, -4, -1, -24, -3, -5, 1, -11, -52, -27, 24, 23, 5, 36, -20, -12, 14, 3, -1, 23, 37, -2, -22, -4, -11, -46, 14, -42, 8, 25, -7, 8, -8, 60, 1, -6, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 64,192 } };
const TfArray<1, float> quant7_scale = { 1, { 0.022748691961169243, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int8_t tensor_data8[12*64] = { 
  -19, 5, -9, -50, -13, 16, -10, -31, -19, -71, 1, -22, -7, -74, -18, -17, 23, -27, -67, -12, -27, -15, -2, -5, 6, 9, -18, 3, 20, -30, -6, 16, -10, 18, 5, 11, -21, -13, 14, 15, -19, -9, 6, -13, -38, -9, -1, -19, -27, -2, 30, -20, -35, 7, 8, -57, 7, -100, -35, -2, -15, -29, 16, -48, 
  -33, -1, 1, -54, -9, 19, -32, -6, -72, -114, 8, -27, 14, -39, -13, -28, -21, -9, -28, 9, -6, 17, 14, -2, 6, 9, -101, 17, -4, 19, -4, -15, -24, 16, -39, 19, -24, 4, -16, -46, 5, -1, 13, 21, -42, -1, -34, 7, -38, -45, 3, -12, -6, -16, -10, 19, -8, -73, -17, 19, 27, 15, 13, -13, 
  -3, -2, 20, 1, -8, 7, -71, -6, -82, -41, -27, 11, -8, -52, -8, -35, -32, -12, -34, 9, 15, -5, -13, 5, -30, -6, -32, -33, 15, 0, -2, -11, -35, 4, -6, 15, 14, 21, 3, -20, 26, -56, -2, -13, -64, 12, -3, -20, -46, -35, -9, 28, 15, -8, -39, 15, -21, -55, -33, -1, 21, 23, 16, -17, 
  -36, -6, -10, -35, -1, 7, -27, 18, -50, -45, 13, -5, 24, -65, -17, -11, -22, 16, -33, -22, 2, 18, 5, 1, -25, 0, -79, 13, -68, 7, 14, -3, -17, -13, -34, -14, -20, -1, -9, -27, -10, 12, 25, 8, -101, -4, -10, 9, -44, -11, 22, -7, -9, -18, 12, 24, 17, -81, -59, 24, -2, -26, -5, -86, 
  4, -37, -20, -22, 16, -23, -68, -11, -54, -39, 3, 29, 4, -86, -16, 13, -19, -1, -57, -20, -9, -27, -34, -35, -2, -6, -42, 22, 6, 10, 25, 28, 12, -11, -29, -35, 17, 3, -26, -10, -21, -16, 5, -8, -51, 15, -32, -21, -14, 7, 4, -22, -16, -35, -35, 6, -15, -58, -75, -40, -20, 23, -16, -52, 
  -23, 3, -12, -27, -12, 7, -127, 20, -84, -60, -21, 9, 0, -32, -26, -36, -50, 11, -14, -36, 21, 4, -29, -21, -27, -26, -122, -6, 4, 17, 14, -8, -16, -6, -31, -1, -20, 27, -10, -50, 18, -9, 28, 16, -87, -8, 17, -15, -45, -34, -2, 24, -14, 11, 5, 22, -5, -58, -38, 22, 3, -12, 16, -26, 
  -17, -26, 11, -9, 6, -9, -32, -16, -41, -12, -18, 6, 18, -49, 20, 11, -38, 15, -5, -10, 4, 11, 6, 26, -24, 15, -29, -8, -11, 15, -14, -17, -18, -28, -5, -26, -3, 21, 0, -16, 2, 17, 19, 26, 4, 19, -2, -24, -17, -33, -19, 18, -23, -15, -3, -37, -7, -40, -33, -8, 20, 9, -34, -18, 
  2, -17, 13, -14, 11, 23, -49, -7, -68, -41, -19, -11, -7, -82, -5, 0, 9, -9, -63, -14, -55, -22, 8, 12, 15, 21, -66, -7, 23, -4, -10, 5, -12, 20, -3, -27, -26, -9, 10, -13, -18, 2, -43, -18, -10, -5, -13, -17, -11, -23, 13, -23, -27, -13, -20, -52, 20, -78, -75, -25, -23, -12, -12, -14, 
  -16, -30, -38, -16, -13, -12, -6, -22, -67, -8, -14, -18, -27, -63, -4, -14, 8, 20, -61, -19, -40, -18, -27, 17, 10, 25, -50, 7, -49, -12, -18, -8, -5, 28, -11, 14, -17, -43, -13, 13, -27, -2, 14, 19, -72, 16, 10, 12, -43, -31, 25, -12, -24, -12, -25, -44, 19, -54, -17, 9, 21, -23, 7, -18, 
  -9, -29, 4, 2, -26, 3, -23, 0, -49, -14, -22, -1, -17, -53, 11, -14, 14, -4, -12, 2, -6, -52, -25, 22, -23, 3, -29, -9, -15, -17, -12, -9, -9, 9, 8, -7, 3, -17, 17, 13, 16, 16, -20, -8, -25, -5, 18, -40, -11, -16, -11, 17, -41, 4, -32, -22, 5, -46, 7, -21, -1, 3, 2, -10, 
  -19, -13, 15, -10, 8, 19, -4, 23, -59, -14, -2, -4, 19, -53, -11, -6, 12, 7, -29, 11, 15, 2, -7, 20, -3, 5, -25, -9, 9, 10, 3, 6, -33, 22, -7, 11, 2, 19, 8, 11, 22, 3, 16, 15, -44, 8, -10, -5, -29, -32, 19, 19, -25, 3, 3, 15, 20, -50, -24, -4, 12, 19, 8, -31, 
  -13, -50, 20, 5, -5, -6, -3, 20, -29, 3, -32, -2, 18, -73, 15, 13, -13, 14, -53, -27, 22, -43, -47, 6, -18, -6, -4, -16, -1, -46, -10, 15, -24, -24, 5, -62, 9, -18, -20, 18, 27, 17, -60, -35, -36, 17, -3, -20, -30, -18, -2, 12, -36, -36, -16, -11, 22, -49, -30, -77, -23, -33, -24, -27, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 12,64 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0099941343069076538, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[16*1*3*40] = { 
  /* [0][0][][] */ -10,-24,-5,24,28,17,7,3,-21,-3,-9,11,-16,-3,-24,-14,-38,-51,-62,-10,3,3,1,46,0,34,-2,-28,-7,-6,8,-18,-17,-37,-20,0,16,-26,-3,-19, -12,-72,-60,-56,-70,-83,-69,-69,-57,-5,11,39,33,43,42,30,-21,28,78,50,61,62,57,23,29,1,-17,-37,-26,-41,-12,-14,-43,-55,-96,-97,-51,-60,-80,-127, 6,7,18,-28,-23,10,12,1,40,21,20,34,-18,-1,9,10,-7,-4,6,18,17,15,-28,-38,-66,-47,-35,13,41,46,49,48,47,57,21,-13,32,50,29,20, 
  /* [1][0][][] */ -20,-47,9,-33,-54,-20,38,-54,-28,24,-70,-32,90,31,-17,13,42,-6,24,20,-26,-9,-44,55,51,-33,-108,-72,-56,-78,-25,29,28,-67,-71,-88,8,-69,-105,29, -101,8,33,-40,24,-52,43,-79,-25,-44,-41,-43,9,57,67,-48,83,18,50,65,-4,17,71,-23,-3,-94,-59,-51,15,4,-118,-48,40,12,-28,33,20,-37,39,-48, -55,54,36,42,-1,10,-46,34,-21,-54,-41,-75,31,32,-75,-57,-74,9,16,10,40,44,-62,-53,-24,-71,15,-6,-73,-34,-86,-89,35,-114,-32,-126,-127,-80,-112,-70, 
  /* [2][0][][] */ 30,-36,-41,-40,-30,-57,-18,-35,7,-5,-12,-13,-38,-23,-18,-13,28,52,55,63,42,23,-3,-39,-28,-14,-44,-64,-41,-92,-77,-68,-27,-40,-53,-47,-31,-74,-33,-4, 17,25,22,45,22,43,51,45,65,23,44,-29,-77,-127,-41,-94,-56,-11,-22,-32,-14,8,6,18,27,0,8,41,33,45,22,39,24,0,-12,-3,7,-16,-3,20, 41,11,0,35,16,67,58,55,54,24,9,-11,-64,-68,-43,-85,-97,-60,-58,-55,-42,-48,-3,-17,29,85,86,83,71,73,41,56,36,9,-6,-14,26,10,49,90, 
  /* [3][0][][] */ 29,26,44,43,40,25,52,62,-10,-20,-5,-51,-59,-62,-9,-35,-19,-13,4,-38,-8,22,20,26,40,3,-1,-21,-43,-15,-5,-7,-25,7,8,20,-2,2,-3,24, 65,73,67,127,121,117,53,50,-5,-18,-22,-101,-95,-62,-33,-83,-45,-15,9,18,-17,-30,-13,-11,-21,-53,-58,-57,-31,-13,40,14,14,26,12,-27,8,-10,-6,-11, 43,62,77,61,41,71,33,27,-30,-34,-46,-54,-43,-36,-9,4,-34,-9,-19,-16,-50,-44,1,18,54,7,-14,-42,8,21,6,-39,5,34,16,4,15,10,-2,-38, 
  /* [4][0][][] */ 63,-14,10,-25,-43,-77,-43,-44,-92,-12,-6,28,17,64,37,53,54,50,58,127,83,55,7,14,-50,-27,-7,-35,-36,-52,-25,-31,-13,-27,-37,-18,-2,2,-17,-27, 51,14,10,-7,11,-38,-53,-69,-90,-46,-44,-24,16,85,41,12,31,24,57,60,99,116,79,83,17,19,-21,-21,-28,-63,-59,-32,-13,17,20,1,25,42,51,60, 60,21,20,-16,-28,-45,-40,-13,-116,-51,-42,-47,7,18,20,5,-2,17,-24,-8,-3,-13,22,-7,-17,2,-8,-37,-32,4,11,35,43,19,-4,-26,-5,2,-1,43, 
  /* [5][0][][] */ -42,-10,-14,21,37,14,55,26,123,72,79,124,78,42,5,-27,-31,-58,-64,-51,-85,-104,-115,-81,-43,-15,44,17,91,127,96,71,120,100,72,53,40,62,6,6, -17,-10,-2,32,35,66,46,38,99,37,21,9,-34,-31,-10,-45,-53,-63,-32,-68,-63,-62,-55,-64,-49,-57,-24,-43,-23,24,73,95,44,71,50,7,9,8,10,-47, -18,-1,4,4,-15,54,22,31,45,18,16,-3,-21,-21,-20,-27,-33,5,-15,-22,-22,0,34,29,39,10,-5,-36,-44,-32,8,-7,-72,-9,15,10,-23,11,12,-30, 
  /* [6][0][][] */ -6,-22,-10,31,4,54,51,53,124,24,17,6,28,-13,38,61,74,46,10,-18,-4,-50,-54,-68,-53,-62,-40,-34,-59,-47,-22,-13,-22,-27,3,16,-10,30,21,24, -10,14,10,2,-5,10,31,31,92,46,60,29,13,26,63,89,127,77,66,19,-43,-106,-74,-122,-76,-87,-82,-60,-70,-12,2,-16,-12,-24,2,10,-13,6,22,66, -41,-40,-22,12,-1,2,21,16,48,7,7,26,-8,-24,13,31,81,72,62,53,41,-27,-43,-77,-67,-76,-57,-59,-59,-20,15,-12,-21,-19,-1,13,46,35,62,71, 
  /* [7][0][][] */ -73,-52,20,-80,-67,-122,-22,-54,-116,-17,-7,50,30,-86,12,-108,-21,-77,50,4,-24,-58,-118,-9,16,-72,-104,15,-25,-32,-44,72,60,8,28,4,1,-118,-117,17, -110,-126,6,25,-116,-110,-35,-62,-19,-64,-11,-36,-57,63,-105,-80,-80,-10,-127,-27,-9,34,-125,-35,-69,-96,68,-50,-7,-65,-19,-30,-111,-37,20,-36,-74,-95,-101,-19, -101,6,57,-77,-81,41,12,-82,73,-54,-38,-74,-52,-55,0,-2,22,15,-81,-27,51,-80,48,19,44,-91,35,82,-64,80,-89,-55,45,-108,56,-106,52,-95,35,-90, 
  /* [8][0][][] */ 1,48,31,19,2,-5,37,12,16,-5,8,-26,13,-25,-9,-22,-34,-66,-69,-55,-30,-4,-4,2,25,16,26,11,2,-22,-9,3,5,-3,-5,3,-13,-36,-32,-59, 47,-8,-12,-8,-19,-61,-4,-7,66,49,43,79,83,56,34,18,-10,-43,-74,-105,-19,-30,-18,-13,29,5,-15,5,-5,1,-5,16,11,-19,-31,-37,-24,-13,-8,-53, 30,-13,-5,-37,-23,-85,-51,-25,-7,18,36,105,127,117,96,66,21,17,9,19,37,39,11,37,51,13,-1,-17,-32,-31,-4,18,25,9,20,-10,0,27,29,-19, 
  /* [9][0][][] */ -5,-67,-29,-82,26,-81,-11,7,-20,-55,-8,-104,6,-23,42,-53,-54,-56,-49,-15,3,5,31,-51,22,11,-100,-84,-8,-56,10,-2,-16,-81,-22,34,6,37,14,43, -35,-7,-127,-126,-34,-63,-13,15,-87,-88,-74,-18,-18,-87,-56,15,21,-11,20,-23,-59,-48,7,-55,-67,-51,-42,40,27,11,-75,-28,-40,-7,-40,-56,-31,-46,36,-28, 20,-36,-12,-70,-3,-3,-102,-120,-2,-68,-50,-70,16,16,-61,34,63,16,30,45,-31,-26,-79,-47,-26,-98,28,-106,3,-77,4,-22,40,-21,21,-3,-43,-115,25,-31, 
  /* [10][0][][] */ -6,-25,-43,18,4,50,33,19,36,31,26,36,15,12,-12,-12,4,-36,-21,-45,-27,-30,-12,-25,-43,-19,-13,-19,14,27,41,23,4,4,-9,-9,-25,-37,-52,-71, -30,-35,-41,-10,-25,-6,-5,-18,12,10,9,-5,-31,-3,-48,1,-13,2,-5,10,-15,19,35,13,5,-7,-18,8,6,-11,-6,-6,-6,-26,-7,-20,-21,-25,-37,-36, -27,-19,-15,-47,-29,-22,-10,0,9,-8,-12,-1,-30,15,-24,0,-6,2,5,19,16,42,30,18,13,8,9,16,30,22,6,8,1,6,45,34,62,86,83,127, 
  /* [11][0][][] */ -35,24,-7,28,22,36,40,12,85,42,64,17,-28,-62,-14,5,-33,20,31,26,127,88,62,44,59,73,25,9,13,-41,-11,-58,-24,-43,-12,-8,-9,-18,-27,-70, -25,7,12,12,1,46,42,25,50,24,3,21,-7,-10,32,-16,16,-30,-14,39,75,47,98,71,90,91,61,18,3,-41,-26,-63,-78,-70,-93,-39,-50,-78,-56,-104, -40,-2,-12,12,-20,32,4,22,30,-1,2,16,-9,-25,2,-12,-7,-15,-7,-16,7,-22,-40,-66,-38,-22,27,41,16,70,71,20,-8,-45,-35,-37,-40,2,-9,-32, 
  /* [12][0][][] */ -15,-30,-45,-39,-38,-68,-52,-70,-37,-13,-8,-55,2,12,-21,-22,-4,-3,-41,9,-15,23,40,42,16,-32,3,14,18,23,-6,13,30,25,41,47,3,5,-9,-7, -26,-34,-47,-56,-46,-17,-42,-54,-54,-11,-20,-28,-55,6,-70,-19,-10,39,-21,-13,13,49,17,13,-2,-9,4,20,13,-5,7,17,21,13,17,21,21,33,22,11, 51,30,19,-3,-4,16,-3,6,-38,0,15,47,52,109,52,68,94,127,116,76,105,63,4,-31,-64,-60,-56,-108,-94,-111,-39,12,20,5,-15,-63,-56,-22,-37,-60, 
  /* [13][0][][] */ -20,29,22,-9,-18,24,14,19,19,51,44,127,48,48,17,21,11,7,3,-30,-49,-69,-70,-44,45,62,62,32,57,4,-27,-12,38,8,9,23,10,-4,43,80, -13,-5,3,-9,-41,-60,-27,-23,-24,48,39,116,81,49,25,34,29,16,11,35,-3,-18,5,25,54,39,32,32,5,-4,31,40,30,-12,-10,10,-9,6,-6,27, -43,8,4,12,16,-21,-17,-42,-33,-45,-57,-4,-39,-47,-62,-67,-77,-69,-63,-13,7,18,34,0,-4,-12,-40,-47,-26,-45,-49,-38,-61,-55,-65,-19,-45,-72,-55,-58, 
  /* [14][0][][] */ -19,2,8,-5,-1,-11,-19,-14,12,-15,-8,-14,-13,-35,-8,-3,8,-23,-12,16,-22,-10,27,-22,-26,-30,-9,-5,-15,-10,-3,-8,-47,-34,-5,14,17,38,46,86, 32,11,8,11,14,4,11,11,2,1,-5,-18,-33,-40,-18,-1,-6,2,-12,-5,2,0,9,2,4,13,-11,-8,-8,-30,-27,-16,-14,-13,17,-3,8,10,64,127, -13,-16,-8,-5,3,8,6,2,-8,-6,5,2,14,15,-10,3,-9,3,-10,0,-3,13,-1,17,3,27,31,-4,-8,-34,-35,-15,-19,-23,-14,8,-6,-8,25,83, 
  /* [15][0][][] */ -73,25,-96,35,40,-45,75,-8,-3,-107,-36,68,43,-121,48,-62,-88,-71,-76,2,-33,26,-14,43,-40,-1,-64,-121,-38,-116,-77,-108,33,-71,46,-35,19,-127,36,-115, -92,-46,1,69,8,-47,38,32,-5,-42,64,-53,35,26,13,-48,-38,35,-86,60,-57,4,72,-69,50,7,82,18,-87,-24,-46,4,-63,-99,-69,24,-42,-3,30,-113, -7,57,35,-100,66,-96,41,-100,-43,-73,9,77,28,-84,51,-60,32,57,45,66,0,-42,-18,8,4,-49,-54,44,-75,54,24,-108,-122,-98,-32,-30,-102,-105,-120,41, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,40 } };
const TfArray<16, float> quant9_scale = { 16, { 0.01436711847782135, 0.0022760361898690462, 0.010745075531303883, 0.013087599538266659, 0.012070341035723686, 0.0088592665269970894, 0.011831789277493954, 0.0018949718214571476, 0.013053149916231632, 0.0028135140892118216, 0.017305502668023109, 0.01070027519017458, 0.012719478458166122, 0.010598472319543362, 0.02092454582452774, 0.0018870836356654763, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int8_t tensor_data10[32*1*3*16] = { 
  /* [0][0][][] */ -110,3,-47,20,48,-15,127,4,-29,21,-44,89,13,32,-56,-6, 40,11,28,-14,-20,-56,53,0,-50,-21,0,-53,9,-13,-56,-5, -31,-37,-9,6,-2,-23,-87,-26,-78,-10,-13,-74,-9,-18,59,3, 
  /* [1][0][][] */ -14,-15,-24,-66,4,-4,-35,-2,-46,1,-28,-17,14,0,19,-11, 23,4,22,93,-59,-21,12,7,-9,0,-21,-13,-15,-127,-24,-6, -96,-6,-5,-28,24,9,34,13,43,-19,14,11,-64,-14,21,5, 
  /* [2][0][][] */ -68,-20,-25,-58,82,-13,-39,-25,-41,-8,-17,-60,-34,-120,62,-9, -34,-5,-28,-115,15,8,-48,-37,18,15,-36,5,5,10,1,-18, 77,37,-79,60,-111,127,55,-24,-43,-6,14,52,-41,44,-41,20, 
  /* [3][0][][] */ -49,-3,-43,-83,-87,-65,-22,49,-54,39,-37,-21,-44,-127,41,-28, -2,59,-72,-53,-34,-95,-67,-9,-73,41,-58,-119,-60,-26,-97,51, -91,27,-62,33,-16,-66,-83,51,-62,71,23,-31,-42,-9,14,-6, 
  /* [4][0][][] */ -93,4,-86,-110,27,43,-77,12,-12,26,-56,-19,13,42,86,-38, 49,-5,-4,-48,-9,-127,-33,-10,-97,25,-79,-4,38,0,-127,-21, -51,13,42,85,-28,28,4,11,63,17,-17,20,-40,-115,24,7, 
  /* [5][0][][] */ 37,-23,-51,-22,30,-127,-67,-9,2,15,1,21,-36,35,-48,-2, 13,-6,52,-54,-29,41,0,21,67,-3,-6,-40,1,-75,-21,17, -84,8,-57,51,-83,42,33,-7,-59,-9,-42,-6,-35,-35,26,-6, 
  /* [6][0][][] */ -35,9,9,-18,50,-75,-43,1,14,2,-40,127,-16,-55,-22,5, -39,-7,-23,0,-41,98,-13,7,-11,5,8,-48,-30,-6,-45,-3, -52,-15,-68,21,-18,13,34,5,-62,-14,23,-70,-3,1,27,-17, 
  /* [7][0][][] */ 17,19,-114,-94,-19,-27,-6,-2,-90,-12,2,-54,-3,-118,4,8, 38,19,-75,-35,-31,-115,-35,4,12,20,28,-23,11,-56,-49,-9, 26,16,17,-127,-10,-36,51,6,-54,-21,44,-76,24,22,13,-4, 
  /* [8][0][][] */ -1,13,-34,-17,45,-19,34,5,17,15,-29,10,2,-48,14,3, -20,2,-66,-18,13,-20,-43,-3,-18,-5,-44,1,-37,-20,-21,-9, -127,-7,-12,-11,-56,42,-6,-8,-19,10,33,9,-85,17,2,9, 
  /* [9][0][][] */ -10,3,-7,-36,12,12,-13,11,6,0,-10,11,-17,58,19,-6, -49,0,0,-21,-13,-18,9,-12,35,0,-23,-3,-60,-18,-22,2, 0,-5,-43,41,-26,24,-19,-5,-60,6,-35,19,-127,-2,-24,-8, 
  /* [10][0][][] */ -127,2,-91,71,57,30,-20,25,-92,-4,-90,8,19,4,16,-23, 1,-21,-29,-34,-4,-87,2,-4,-34,-11,114,-70,-63,-3,-31,-6, -5,24,42,-25,-57,112,26,-5,-1,13,-24,-22,-32,-4,0,-3, 
  /* [11][0][][] */ 14,-8,-19,34,-6,-26,28,6,-49,-12,-26,19,5,-7,-27,-1, -2,15,-57,-31,-12,-52,-30,0,-127,-3,7,12,18,-18,-14,-10, 10,4,-45,-49,-38,-98,-23,-11,-91,6,10,8,11,-102,10,10, 
  /* [12][0][][] */ -17,-79,0,9,-87,-4,-15,28,23,-47,-50,-50,-127,-49,-55,-41, -11,36,-18,-47,5,-84,-18,-44,-19,57,-98,-39,-55,-25,-106,-64, -57,-25,-33,-47,24,-24,-56,-37,36,-30,-94,-46,-60,-120,-65,29, 
  /* [13][0][][] */ 22,-7,-21,-60,-87,-29,127,-11,40,-16,-29,-43,-8,-15,-55,14, -45,10,20,-4,76,19,-18,16,-41,-10,13,25,-36,-23,47,11, -43,13,-65,35,-26,-24,-106,-3,-73,-7,-86,27,-36,10,-46,3, 
  /* [14][0][][] */ -37,2,-4,7,-11,-79,-24,-3,-38,3,-7,-47,-40,-46,-22,7, -127,1,-11,78,32,-44,-39,7,-39,2,-118,-13,-6,-4,29,-21, 19,9,-7,-62,11,-53,7,-8,22,-7,52,-20,13,-124,-12,-19, 
  /* [15][0][][] */ 26,0,-12,-29,42,-33,3,11,24,13,27,-60,4,-8,-17,7, 5,-6,19,-63,32,25,-86,14,-49,3,57,-64,-41,-66,58,-10, -57,-13,18,53,-87,-10,47,-3,-6,-4,-54,127,5,-79,-43,-8, 
  /* [16][0][][] */ -23,15,-19,-19,-14,-23,-35,-13,-14,5,-25,-2,28,52,44,8, -44,-4,-127,-64,-71,29,-5,5,-59,10,-67,23,21,-24,-84,-14, -4,-2,-48,28,-64,-76,-35,7,23,-3,-13,-101,-71,-115,-34,-3, 
  /* [17][0][][] */ -4,-22,15,-33,-21,17,-76,1,-83,13,55,2,-19,-16,-5,-7, -19,6,-36,-99,-10,-7,-9,-4,26,25,3,-20,127,-17,-48,0, -79,20,-48,1,47,19,56,-4,49,-9,-63,14,-81,-15,25,-5, 
  /* [18][0][][] */ -40,-22,40,12,-76,-109,-24,18,-52,-31,-57,-14,-24,-41,20,-23, 17,0,-52,41,-17,127,19,20,-14,-8,68,9,-96,67,1,-16, -7,-22,15,-51,37,-73,-85,11,-29,32,24,-3,-25,-116,-63,-4, 
  /* [19][0][][] */ -78,3,-51,18,-5,32,23,1,-30,-2,-21,-26,27,-5,11,8, -22,2,-127,-9,-9,23,6,10,-25,3,-41,-59,-10,-12,31,-6, 31,-8,-39,-4,-12,-31,-32,6,-16,5,-5,15,16,-13,-27,2, 
  /* [20][0][][] */ -14,25,7,95,-102,127,74,32,27,21,-15,57,-93,61,-32,-18, 64,-15,-4,-64,9,19,-109,-1,-46,17,50,-35,-61,-52,-85,24, 45,14,-7,-70,40,-93,-58,6,-37,-28,5,-62,-63,1,92,14, 
  /* [21][0][][] */ -50,14,5,64,-8,-71,19,-12,-37,22,-39,-107,-56,-79,45,15, 56,-9,14,22,-116,125,-20,9,-60,30,1,-30,-97,1,11,1, -40,11,-105,-55,14,3,-33,-9,53,10,-38,127,4,-15,-39,-7, 
  /* [22][0][][] */ -16,10,11,32,-72,-15,35,-26,127,-9,-44,-40,-14,-18,26,-9, -78,11,-117,-100,105,-27,-45,-19,-26,1,-9,9,18,0,-46,11, 57,7,-50,69,-2,16,-23,17,-66,-16,-17,8,-12,13,4,-6, 
  /* [23][0][][] */ -120,-2,-64,-10,-67,92,75,-23,-8,3,-80,-23,-56,-49,50,1, -18,18,-33,-26,-8,-56,-35,-21,30,1,-61,65,-34,40,-89,6, 38,-11,-127,-36,-3,-124,-13,-7,-44,-8,-66,24,20,39,-55,7, 
  /* [24][0][][] */ -22,-1,-32,2,28,67,-51,12,-5,-16,-89,30,-62,22,36,16, -92,-12,-92,55,-42,-21,59,11,-60,7,-114,1,-94,-10,-15,-9, 15,-13,-127,14,2,-74,-4,19,17,-9,-20,-15,43,-22,-23,-17, 
  /* [25][0][][] */ -127,2,37,-52,0,56,36,-6,-12,-9,-50,-9,-24,57,5,-14, 48,5,20,-23,1,29,-3,10,24,-14,50,-45,-22,-41,-65,13, 3,-15,9,-48,-9,-24,-75,-12,-25,12,-1,-8,-18,-74,-77,0, 
  /* [26][0][][] */ -13,-12,-81,-10,-38,-26,13,-30,-23,-29,-15,-57,-34,-45,-68,6, -40,-10,-51,-27,-28,-35,-64,36,-52,33,-32,-26,-127,-44,-48,-17, -26,-35,-95,-57,-114,7,-73,0,18,-17,-3,-54,8,-2,-70,26, 
  /* [27][0][][] */ 40,15,34,-127,21,66,8,21,-29,24,73,98,67,72,-110,17, 5,-6,73,-83,36,-41,-15,-2,-20,27,48,-36,-35,-52,21,-10, 26,14,-20,-48,-34,-6,-73,7,65,2,-56,-116,-105,25,117,28, 
  /* [28][0][][] */ -127,-14,-19,-26,-31,-89,-25,9,-5,-24,-53,-83,5,-26,54,1, -54,-12,10,5,10,53,22,14,14,-14,-36,85,-9,11,8,-11, -26,14,14,9,23,4,-33,-6,23,-12,16,-29,-9,9,-20,-5, 
  /* [29][0][][] */ 20,8,20,-50,-14,-64,21,-8,70,21,-6,-19,-17,-39,-52,12, 9,-19,7,-8,47,14,20,3,-10,-2,-6,-4,2,-38,3,-15, -106,-7,-119,71,-37,15,-4,0,-127,-4,-43,2,-27,15,22,12, 
  /* [30][0][][] */ -10,5,52,112,-52,-40,-31,-22,45,2,44,-55,38,-89,-42,-2, 12,-7,-21,-10,46,-65,-91,-5,32,18,-25,8,46,-24,-14,17, -94,-2,-98,-99,-1,5,61,-1,-51,23,-127,13,-25,-24,-48,-7, 
  /* [31][0][][] */ 22,60,-127,-61,-6,-64,28,-12,-86,-78,6,-10,-52,-77,-66,8, 29,-58,-91,-3,-76,-97,60,31,-46,8,-9,-4,-40,-72,-35,0, -35,-49,-95,-25,-99,-33,-57,67,-21,18,-23,-1,-6,-69,-109,65, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant10_scale = { 32, { 0.0079502938315272331, 0.014454089105129242, 0.0064614554867148399, 0.0029401825740933418, 0.0089362654834985733, 0.011992087587714195, 0.011014297604560852, 0.0091923177242279053, 0.01676543615758419, 0.020265007391571999, 0.0093014035373926163, 0.015262806788086891, 0.0029373972211033106, 0.011280069127678871, 0.012820874340832233, 0.010456973686814308, 0.014785712584853172, 0.0090713631361722946, 0.007406893651932478, 0.020745394751429558, 0.00658440962433815, 0.0095725841820240021, 0.008602469228208065, 0.010006546042859554, 0.010623959824442863, 0.012411179952323437, 0.0055791018530726433, 0.006460465956479311, 0.012051324360072613, 0.012739777565002441, 0.010556924156844616, 0.0024155324790626764, } };
const TfArray<32, int> quant10_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int8_t tensor_data11[64*1*3*32] = { 
  /* [0][0][][] */ -101,-20,-41,3,-16,2,-34,-26,-13,-8,-14,-86,-8,-35,-45,-10,-17,-45,-9,3,-47,59,-55,-14,-46,-10,-3,-41,7,-7,-29,-5, -12,-41,-25,4,-3,-62,26,31,-1,-11,-66,-50,5,-50,24,-40,-13,-27,-35,-75,-54,50,-22,7,-31,-23,-4,-36,-6,-19,-20,-2, 30,-66,3,-3,9,-67,-30,-28,12,-11,-127,7,-7,-20,-24,-18,27,-46,39,-29,-28,-42,2,2,-2,28,-8,-3,-30,-27,-8,-7, 
  /* [1][0][][] */ -36,-36,-107,-4,-29,7,18,-127,65,10,12,-5,1,19,-76,-5,-56,-88,-67,-30,-92,111,-31,17,-48,-30,-4,13,10,-28,-34,-4, 36,-6,-47,-6,42,-101,14,-1,15,-15,3,-79,5,-15,-16,-126,-4,-51,19,-22,-53,17,-13,8,-47,16,-8,-51,-11,-46,5,-5, 53,-28,7,0,14,73,1,-1,12,-7,35,1,-18,-10,20,-67,20,-29,-41,-2,-9,6,-8,20,-21,40,-18,-30,-23,37,-54,11, 
  /* [2][0][][] */ -48,-43,-38,4,-6,-2,25,-74,-23,24,-43,19,1,-54,7,-7,5,13,48,54,-112,-34,-3,5,-57,15,-18,-36,-19,-2,-6,-8, 41,24,-96,-1,-81,-106,39,-36,-69,-1,-16,-16,7,-19,-42,-66,3,-6,-27,-37,-6,-19,-29,-83,-25,-64,22,28,-101,-51,-30,11, -52,-23,2,4,54,40,14,23,-48,-24,26,-1,-5,-41,7,-19,22,-36,-5,3,-40,-40,-127,-32,-34,-53,-12,-27,-4,13,-54,5, 
  /* [3][0][][] */ -39,-104,21,4,-30,-11,-57,4,-50,36,25,-52,10,-57,37,20,-38,-29,-69,-9,-127,-5,10,-7,-22,24,-8,-12,9,-2,-14,4, -8,-2,16,3,-8,14,-83,-64,-1,-26,25,34,-11,-4,20,32,12,-43,-26,-12,4,2,-70,-5,34,-22,-2,-12,-16,16,-22,-4, 21,-14,-67,2,-32,-33,-105,32,-58,-6,-48,20,-10,-15,-35,-33,24,-30,-3,-16,3,-30,-92,-22,17,-74,9,-24,-68,-27,-6,5, 
  /* [4][0][][] */ -7,-68,-18,6,-43,-17,-71,6,-55,-49,-2,17,-4,-7,33,27,26,-51,6,-4,-61,-10,-41,-68,-13,-5,3,1,-43,17,-35,5, 28,-38,30,8,-11,-14,-22,23,-13,-13,-9,-34,0,-31,-60,16,-25,-40,8,-29,-2,9,-60,13,2,5,-8,-10,-23,-11,-39,-7, -9,-51,19,1,-40,-11,-28,-46,-30,-30,-9,12,-6,-19,-26,-50,-30,-14,5,-24,38,-2,-9,14,33,0,-5,17,20,-127,-10,-2, 
  /* [5][0][][] */ 5,16,-46,1,13,-5,-47,4,-10,-35,-12,-22,8,-1,-53,-14,-27,-69,9,-20,2,0,-7,-24,-70,-7,-3,-3,-14,-33,29,-7, -4,6,32,-1,-8,-38,30,-56,-11,-11,-24,-123,-2,-56,-95,-88,47,-63,1,39,-23,-17,27,-35,-18,2,16,-18,-59,5,11,1, -83,-19,-2,6,-37,-28,33,-127,16,-32,-18,6,1,-42,16,-43,-42,-73,1,-28,-13,-42,5,8,29,-4,0,-85,-44,13,-30,-3, 
  /* [6][0][][] */ 8,-6,-46,-1,-17,-45,-28,8,-40,-29,-115,-5,-2,-108,-27,-10,-6,-50,-24,-4,-20,-41,-53,-127,29,1,-16,-22,-10,-62,3,-6, -33,17,29,-7,1,-22,-29,-20,-47,-77,-29,-69,-9,23,-4,-3,-36,37,9,-28,-39,-59,-46,-50,-40,-28,-5,-20,-32,-75,9,3, -1,29,-4,5,-75,-41,-7,-80,-17,-41,-86,5,0,31,-15,-107,45,-23,14,9,-1,-14,-24,28,-15,-28,2,-39,-20,-3,-8,-6, 
  /* [7][0][][] */ -71,-11,-127,-2,-11,-13,-54,-11,25,-49,14,21,8,-25,-18,-64,44,-10,43,10,-40,-60,-52,-46,-22,-7,-29,-2,-49,18,-9,8, 17,-43,0,12,-59,2,-59,7,-33,-48,-40,-19,4,-39,-5,19,18,32,-66,-35,-39,-5,-21,-6,-37,-33,8,8,-30,-92,3,5, -18,4,36,-2,-50,-3,-6,-73,-7,44,12,-89,7,-5,-57,-14,-3,23,-21,-96,24,-15,4,-20,-55,22,-22,-6,43,-26,-7,-1, 
  /* [8][0][][] */ -89,30,-83,-1,7,-104,51,-53,18,-59,-31,-93,3,19,-54,28,-79,-12,58,-83,7,-37,20,-51,3,-117,-21,-10,30,-2,-127,-7, 4,24,-33,-6,-13,-59,37,-23,14,-5,-16,-56,0,44,10,0,40,-28,28,48,20,-28,54,-50,34,19,33,12,-24,30,-83,-2, -1,-19,-42,3,-40,-79,-35,-29,4,-41,53,-26,-3,12,-47,19,-5,-9,-23,51,-43,-60,37,-88,-47,-17,-4,-90,-76,61,-59,4, 
  /* [9][0][][] */ -8,-127,-53,1,-55,-43,-3,-100,9,65,-62,-60,-4,45,-99,-17,-34,-51,-19,-24,-75,32,-29,44,-22,-29,1,-22,24,-78,-74,7, -24,13,-75,-8,-24,23,20,-30,20,-84,-56,-11,-6,21,32,-72,66,-112,-56,35,-13,-46,28,-12,27,13,9,-26,-38,-2,-7,-2, -46,-45,25,-1,-86,1,-84,-53,-38,-56,39,-38,-30,-67,-34,52,-40,-9,-44,2,-16,-11,-100,-97,-65,15,4,4,-41,2,-54,10, 
  /* [10][0][][] */ -121,-20,-46,-9,-67,-34,-39,41,-47,-92,-31,15,7,-3,-18,-15,-59,6,-68,0,-59,-19,-41,27,-15,-19,-11,19,-18,-42,-8,-4, -32,-80,-19,-9,-9,-50,22,-58,14,-66,1,7,13,-52,-1,-39,-78,-21,31,-5,-28,-105,8,-63,-19,-93,-10,-63,-113,-27,-29,2, -61,21,-46,6,-3,-40,-127,15,19,-80,8,-19,-11,45,39,-24,-35,19,-8,-80,-87,-11,-26,-83,-61,56,20,-16,34,5,-4,-3, 
  /* [11][0][][] */ -47,-75,-60,5,-59,45,-73,-9,34,26,39,19,11,10,23,-51,-45,54,-76,-9,-127,-39,-23,-18,-4,17,24,-28,-1,-10,-5,2, -42,-26,17,-11,0,47,-8,18,32,-5,32,-11,-10,-39,-20,-51,-21,40,-10,-34,9,-64,9,-65,-95,-11,-1,-20,-37,36,-10,2, -55,-41,39,-3,-3,59,6,-30,24,-11,16,-3,-3,-72,-20,-50,-42,-110,38,19,71,-60,-21,-5,-46,-44,-5,-11,-46,23,-1,-4, 
  /* [12][0][][] */ 3,49,-51,10,29,-9,-80,-18,-15,-8,-9,44,11,9,-44,-6,9,-78,32,-9,-19,-37,-23,-15,29,-47,29,-51,-14,-9,32,5, -70,32,-8,-4,-22,-15,31,24,-14,3,-68,-3,-14,-127,-103,10,-20,-57,-15,-12,-38,-40,23,-98,-65,-67,-1,-25,-40,7,11,11, -104,0,14,7,7,-44,45,-45,-16,-13,-17,-58,-1,-83,-76,0,30,-11,24,-11,-8,58,2,-3,-15,44,19,20,39,-9,-25,-3, 
  /* [13][0][][] */ 21,-2,-1,4,0,31,-43,-35,-94,-63,-108,-5,-9,-26,-51,26,-6,-29,-23,13,-87,4,-19,4,-44,-31,0,-51,45,-17,-33,-1, -42,46,-2,-9,19,-17,11,-68,-14,36,-24,-29,-8,4,-52,-22,49,-35,-25,-34,-45,-3,28,-26,-6,5,-31,-16,-26,17,-4,6, -14,34,-5,5,-37,-15,4,-42,-3,-2,8,-123,-13,20,-76,-59,-65,-29,22,-98,-127,-49,31,-21,-3,-46,4,0,-22,0,12,-4, 
  /* [14][0][][] */ -52,-1,29,-2,-5,12,-82,-10,-102,-9,30,6,-13,14,10,41,-30,20,-42,-37,-71,-27,-127,13,-74,-3,0,5,-19,-16,-13,4, 22,24,38,-5,-1,30,-96,-105,-18,-38,-17,-33,-10,-32,8,2,5,-5,-52,-6,0,-27,-76,1,38,-62,-30,-40,-24,-17,-9,4, 21,-32,-47,0,-6,-3,-53,44,29,-23,10,11,9,17,18,42,43,-53,-20,-16,-11,-74,-4,-1,26,-30,0,-14,-25,29,-65,6, 
  /* [15][0][][] */ 9,1,-29,2,-2,-11,-127,-34,-32,-30,10,-4,2,31,-8,-21,-11,1,-79,26,-29,0,40,9,-64,-5,23,-9,-1,10,-25,7, 9,7,-20,-3,-45,-51,-14,-26,6,-6,-3,11,2,22,-18,18,-41,-32,-92,-54,5,-13,37,0,-8,-19,-17,23,-26,-10,-30,-5, -97,0,15,-7,-10,-23,-32,29,-33,-38,-28,-18,-6,-51,7,-28,37,19,29,6,14,-60,-81,-79,-11,-48,-1,-32,-40,-47,7,0, 
  /* [16][0][][] */ 15,-58,22,6,23,38,11,-32,6,-21,-73,-45,1,-56,-122,-36,31,-22,-24,-47,-23,-127,-25,-44,-24,-8,-34,-12,-7,-83,-23,12, -105,33,-32,6,-24,-43,-18,-20,50,-16,-2,2,-5,-29,-22,-32,84,-17,14,0,23,-24,-114,-6,-45,-59,-32,-49,-80,-19,-118,11, -27,45,-35,4,-37,-40,-18,-7,9,-40,-63,-60,-16,29,-98,-18,31,7,47,-50,-25,-69,48,-44,6,23,5,-54,29,25,-46,12, 
  /* [17][0][][] */ -1,-94,15,19,-31,-47,73,-56,28,-22,-116,-28,-1,-15,49,-96,-27,-27,0,4,-23,-113,0,-52,-5,2,-6,-1,-37,-18,18,0, -37,51,-87,-4,40,-8,-88,-21,-30,17,12,-5,-15,-99,-102,-19,24,-127,-89,37,16,33,-48,55,31,-28,-4,24,-59,-102,16,2, 7,-26,-40,9,-36,12,-120,-9,-16,-8,-119,42,-6,-88,7,-31,-26,-15,-52,30,47,72,6,-22,-51,-14,-3,8,-59,-60,-81,-1, 
  /* [18][0][][] */ -21,-71,-23,3,7,-101,24,-49,-72,-3,-90,-30,-1,-20,-23,-32,-127,-27,19,-35,51,2,5,-53,-17,18,-18,28,21,-25,1,1, 0,-4,-4,5,3,-47,-40,-86,29,2,-87,1,-7,-29,-18,1,68,-7,-31,15,-48,-32,-26,-9,6,-38,11,-11,-33,-73,-81,-3, -32,44,-43,0,20,-73,1,-40,-5,9,37,20,-7,-13,-36,-17,42,-2,-15,-7,-71,-2,-24,-20,-1,-19,-29,-95,10,-105,7,-1, 
  /* [19][0][][] */ -52,23,-35,-2,-10,9,-40,7,-34,-27,-33,-14,4,-32,-127,4,17,-33,-48,52,14,-9,7,18,-9,16,14,-42,-27,-37,-54,-3, -100,48,-69,-8,49,-33,-66,-11,-27,-43,-36,14,1,-16,-39,-22,-49,-39,-2,10,12,5,8,-28,3,13,-4,-36,-6,5,11,-5, 7,-99,10,7,-80,6,-10,16,-9,14,-21,-37,-11,37,-61,-80,4,-27,-32,-5,-31,-44,17,-28,8,24,-6,-3,-25,5,-4,-11, 
  /* [20][0][][] */ -59,12,29,0,-22,1,-78,30,-81,-26,30,-82,0,-42,-3,29,-24,-10,-106,-56,-49,44,-7,17,-29,-5,6,1,-38,-4,32,-11, 70,-14,21,-6,-52,-37,-92,-68,-48,0,-60,17,-9,-7,-12,17,-18,-16,-16,-42,3,36,-37,4,24,-16,-20,4,-61,13,23,13, 20,0,-56,-4,6,-50,5,16,-14,-9,-94,-4,1,30,18,-108,-27,-17,-11,-33,-6,-52,7,26,4,12,-8,-27,-34,-127,-89,-14, 
  /* [21][0][][] */ -72,8,28,-4,-9,-30,-85,6,-60,-34,-31,2,-5,-14,-33,-8,-38,-10,-21,-56,-45,-2,9,-31,-34,-8,-9,22,15,-19,-31,5, 0,12,3,-3,-16,-51,-28,13,-6,36,-5,-70,0,14,-64,-3,-2,-3,-22,-65,-33,-30,21,-52,-20,-99,3,-32,-4,1,-45,4, -4,-25,-14,3,-48,-78,-30,-27,5,16,-21,13,-3,-19,4,-16,12,-127,-2,-7,1,-38,-4,-19,31,-7,-1,-58,6,14,-20,-2, 
  /* [22][0][][] */ -54,-106,-31,1,-28,20,-1,-50,-65,-63,-63,-10,10,-84,-53,-71,25,-22,-28,-35,-37,-106,-20,-81,-7,-1,-19,-79,-42,-26,12,2, 12,19,-40,-1,-109,-47,-62,7,-49,-33,0,-67,-2,35,-57,-36,-81,-21,-87,-39,-61,-30,-79,2,-127,-2,-4,1,-34,-34,-36,-4, 48,-95,11,18,-55,-25,-10,-46,3,-24,13,18,-9,72,-10,-72,-15,-32,-30,23,26,-68,-73,1,-54,1,-15,20,-58,-28,-5,-9, 
  /* [23][0][][] */ 8,-71,-54,2,-111,-10,15,-1,-44,-39,-6,-68,14,-24,8,-1,-19,50,20,-47,-77,4,-36,-104,-11,12,-17,29,-29,-5,0,9, -56,-39,31,0,-32,-49,6,-25,38,-26,-79,0,-10,-25,11,25,-88,48,31,-127,-63,-67,9,22,-47,-8,-24,-25,15,-13,6,-6, -23,-42,2,-6,-18,-31,32,-60,13,-20,-38,-76,1,20,-81,7,57,-89,-6,-42,23,18,-28,49,-44,1,3,-44,-4,-8,4,12, 
  /* [24][0][][] */ 23,-91,23,-3,-127,1,3,-45,-55,-36,-5,17,8,-20,-19,17,-31,16,-44,25,5,-7,-3,16,17,-30,-12,0,20,-40,-17,-8, -4,-31,6,-2,-82,-32,-15,-64,-12,32,-34,-9,13,-36,-14,-41,-45,-90,-7,-12,3,-16,-7,-21,14,-27,20,-59,-59,-83,4,2, 9,-32,-47,-14,-23,4,0,52,-10,-42,3,3,2,-12,12,18,0,11,-37,-33,36,-8,9,-11,-22,-67,-9,-53,-17,34,22,2, 
  /* [25][0][][] */ -58,31,-1,-7,9,-61,-1,-25,-11,-9,-29,-1,-1,5,-76,5,-91,-25,12,-46,-83,13,-10,-1,-81,-46,-7,-6,18,11,-63,9, -10,8,-46,3,32,-25,-22,-35,3,-10,8,-2,6,-59,-127,-24,-34,-60,23,-41,-45,42,11,14,-28,-14,5,-55,-7,-64,6,0, 19,-22,14,-4,-73,-20,9,-81,21,-39,-22,-23,0,-91,2,-109,-31,-47,3,-38,-48,2,27,22,-7,-31,-12,-11,-24,-16,7,14, 
  /* [26][0][][] */ -12,-25,11,1,-15,20,-17,-54,-75,-61,18,-2,56,-14,-7,5,-22,-30,-82,-21,-35,-50,-41,-4,-41,-18,-59,-16,0,21,-19,-74, -26,-70,14,31,-127,-68,-31,-33,7,-18,-31,-53,-37,-68,-46,-42,-15,-62,-48,-102,-55,-18,13,-70,-22,-46,-23,-45,-84,-82,-33,-50, -30,-69,-90,-14,-38,-23,-25,-67,-59,-26,-77,-60,19,-70,-59,-28,25,-63,-68,-45,-94,-67,-55,-83,-44,1,-19,-50,-76,-93,-61,1, 
  /* [27][0][][] */ -87,-10,25,-3,17,37,2,-35,-35,-16,36,14,-4,-9,7,-30,-101,4,-38,-25,38,-12,-17,-10,0,-26,7,-30,-19,23,-12,11, -12,-34,-32,5,-100,23,26,-18,-51,-85,-3,13,-9,-37,-83,-30,-42,-58,-25,-97,20,-42,-39,19,-21,-72,-11,-38,-47,67,-21,3, -33,-40,-23,-1,-35,-22,-41,-7,2,-3,16,4,-3,-12,-25,-19,57,-65,-16,-127,9,-20,-6,-37,-14,14,3,13,-29,-54,10,-3, 
  /* [28][0][][] */ -37,-18,-26,-12,-74,-41,-84,-39,-76,-10,-39,-82,-9,-57,23,-1,28,-65,-32,-51,10,-86,12,-49,-48,-11,10,-3,-73,-93,-57,-15, -22,-31,52,-5,-45,4,-41,-16,-80,62,-47,-61,-2,-3,-46,40,-66,-2,40,82,-10,-42,-78,19,-8,-17,5,12,-104,-34,4,-13, 2,27,-50,-8,-74,26,-33,-48,-23,-127,9,36,-3,15,23,-64,-12,-25,14,22,55,-11,-73,-57,-93,53,-1,30,44,-57,-80,13, 
  /* [29][0][][] */ 9,38,5,7,-54,-14,42,-43,35,-51,-60,-20,7,-16,-31,3,-22,-25,2,-3,-56,-26,19,-45,-8,-47,-8,-41,-24,11,18,-25, -77,-17,-15,-4,-22,2,48,-2,-20,-43,-80,4,-1,-76,-41,8,-8,-30,-30,32,-18,-14,-20,21,14,-84,-46,-39,-56,23,-2,-23, -28,16,-31,4,21,11,83,21,-78,1,-127,21,15,-47,-33,14,51,-42,-43,-25,-6,-41,-45,19,14,-62,-3,-76,18,4,5,23, 
  /* [30][0][][] */ 52,-14,-70,-5,-3,34,-73,-11,-67,-127,11,-25,8,0,4,3,29,-32,-19,-33,-8,-109,-61,-72,-83,-27,-1,3,-9,-40,8,-11, -72,-21,21,7,-20,2,-18,11,-28,-57,19,-87,-6,-11,20,25,-60,-28,-73,2,0,36,-25,7,6,-47,-35,7,4,7,-33,-12, 36,-46,6,0,-104,-39,-58,-113,-74,34,-28,27,-6,-2,-1,-22,-2,-97,7,-25,-31,27,-13,15,39,-13,-19,-30,8,-22,-37,16, 
  /* [31][0][][] */ -13,39,-2,2,-32,-47,5,-20,-31,-14,-15,-7,2,-127,-39,19,-28,21,70,-66,27,14,-77,-16,-56,29,-19,15,17,-67,-28,-3, -3,6,14,6,12,-22,-32,-37,-35,-40,-34,-110,3,-13,-16,11,-89,4,0,41,23,-31,-19,-38,-96,-35,-2,8,-26,-31,-37,-14, 0,23,-29,0,23,-56,-22,-64,12,-14,-9,-54,11,38,8,-17,8,18,-90,-7,-13,-43,17,31,-8,8,-17,-6,-35,-3,-34,3, 
  /* [32][0][][] */ 6,-7,-127,7,-17,14,16,13,23,-52,-32,-13,19,44,-7,-46,-14,-80,-30,16,8,-41,-33,25,-37,6,3,-16,-92,-64,-80,14, 12,-2,-23,-7,20,29,13,17,-58,-40,-6,9,6,-78,21,-8,-29,-13,-49,-11,-3,-11,-49,18,-36,-50,23,23,-12,-5,-48,4, -79,-23,14,-11,-59,-17,-85,-39,-49,51,-35,-96,1,-28,-39,1,-27,-27,-24,-67,-32,-18,27,-25,3,-71,12,18,48,-53,-32,-8, 
  /* [33][0][][] */ -38,12,-41,-4,-1,-1,-27,-28,6,-38,-4,-2,5,34,6,5,-25,-4,-41,-24,-53,-5,11,-7,-12,-9,-3,-29,-5,23,-48,5, -16,24,9,-4,-8,-41,-24,-7,20,-3,-38,-20,6,25,-33,10,21,2,-54,-17,-14,-127,27,-1,16,-28,-6,-29,-41,12,-19,2, 2,2,-74,-5,-45,-43,-23,10,-46,-6,-17,2,-3,-17,-24,-48,15,-100,4,-10,-17,-38,-3,-35,12,-28,-6,-80,-63,-37,-18,-6, 
  /* [34][0][][] */ -68,-95,-35,-15,-73,32,-105,-40,-21,-24,-34,-81,50,-14,10,-79,-89,-34,2,-107,-31,-22,-64,-107,-60,17,95,-58,-55,-21,4,-24, -70,-65,-105,-83,-33,3,-79,-124,-76,-88,-60,-54,-47,-81,-106,-71,9,-21,-38,-69,-116,-37,6,-87,-65,-127,37,-112,-57,1,-8,-111, -70,-46,-124,-43,-63,-41,-100,-97,-34,8,-81,10,-38,-108,34,18,48,-23,-88,-42,0,-100,-32,-60,-95,-14,38,-50,-70,9,-4,-71, 
  /* [35][0][][] */ -31,-28,-44,-10,-87,32,-35,-59,-23,-72,-4,-43,3,-91,-8,-57,-30,-44,54,-7,-61,13,-2,-1,25,-10,-14,4,-35,11,59,-2, 37,-90,-38,-16,22,-32,-50,-99,10,39,16,-54,-8,-43,-27,-19,-42,16,-30,-62,-42,-8,-48,-14,-31,-13,8,-35,-14,-127,28,5, 34,18,-104,3,-68,15,-83,-8,14,6,-25,-23,-11,-16,20,-77,-42,11,-13,43,47,-31,-64,8,-3,-3,-1,-55,-9,1,-85,5, 
  /* [36][0][][] */ 24,29,-29,-3,22,-17,-51,-26,-21,0,4,-47,1,-6,-17,-33,-61,-33,-8,-20,-20,11,32,-18,-59,-11,2,28,-14,-29,16,3, -3,-22,18,6,-11,-2,10,-24,-30,2,-23,-55,10,-37,-17,-40,-15,-21,2,4,31,-8,2,-13,-8,-11,-3,22,-26,-2,13,-7, 25,-61,23,-3,9,-10,-1,2,-20,-34,-39,27,-5,2,-9,-77,-14,-21,-14,0,-6,-53,-127,1,5,-4,-7,-2,-16,22,-35,-4, 
  /* [37][0][][] */ -10,-42,-8,7,21,-12,-122,11,-8,-52,5,4,-5,12,7,3,23,-36,-47,-8,-15,-127,-9,-32,-8,-2,14,2,-7,-8,-63,-3, -1,-8,11,4,4,9,21,-12,-38,-7,3,-68,4,-32,-22,34,-56,-18,6,-28,-41,2,-61,-91,-72,1,16,-1,-14,-2,-47,-2, 1,-11,-10,2,-7,-18,44,-39,-26,-43,-15,-3,-1,-23,-71,-60,-20,7,-14,8,-28,7,-44,16,23,-47,-7,-7,-11,13,-21,9, 
  /* [38][0][][] */ -114,-14,41,10,-41,34,-40,-46,-13,-34,-18,-15,-5,-41,0,16,25,-17,49,-17,-52,0,-9,-2,-88,26,-13,-61,27,37,-17,-4, -79,-105,-18,-8,5,-100,-36,-35,-46,-2,-7,11,-1,-1,-75,-50,-101,-127,21,8,42,-7,-31,-13,-78,41,14,17,7,29,-27,-11, -41,3,7,6,4,78,-9,-7,39,-13,-6,-110,-18,-93,31,-85,38,-59,43,1,-81,11,-19,-98,-15,-21,2,18,-11,25,-72,-1, 
  /* [39][0][][] */ 31,62,-73,-13,12,36,-45,-74,-46,64,-42,-60,6,-55,-38,-34,-90,-16,17,-7,-23,49,-14,-47,-54,-74,-17,-29,-101,-74,44,3, -70,-105,-59,-16,-9,-26,-30,16,-104,-43,7,-42,-1,1,97,-55,-127,-81,-26,-11,66,-13,5,-31,-87,47,-7,37,-120,-51,-4,2, -58,3,-25,-15,-52,9,-98,70,-25,-74,-92,-20,1,-2,17,-31,34,38,-78,111,-17,-54,-107,87,-32,3,-8,-82,11,-16,-13,-7, 
  /* [40][0][][] */ -2,-1,31,-2,-37,-16,-60,4,-75,-78,-24,-19,-1,-58,-3,13,-6,21,7,0,-10,-77,-113,-127,-17,6,-8,-23,-6,-66,-34,-2, -43,-10,3,3,-21,-17,-48,-32,-79,-49,-22,-37,-6,0,-102,-11,-38,18,-9,25,-37,-49,-30,-1,-62,-5,-13,2,7,-11,-18,2, 10,-25,-15,-5,11,-26,-5,-76,-4,-21,-32,-7,3,26,-14,-101,38,-41,-21,-16,-2,-18,-2,45,-15,1,0,0,-12,-42,-92,3, 
  /* [41][0][][] */ -14,22,-13,-2,-8,7,-10,-46,-40,-53,-41,16,-2,-11,11,-62,-101,-22,16,-44,-12,-6,-40,-60,-28,-24,-7,-127,-73,26,-41,2, -39,16,9,4,17,21,-10,14,-3,1,39,24,4,-2,35,-51,22,-15,-18,-54,-115,1,30,-14,-54,8,11,-20,3,38,13,7, 18,-49,-5,-6,-9,33,-5,26,-18,-7,22,7,-8,-11,-28,-50,53,-14,8,15,17,-34,16,-22,19,-11,-9,-20,-4,36,-6,9, 
  /* [42][0][][] */ -31,35,-32,-9,42,30,-6,5,-43,-19,36,-17,-2,-10,20,-30,-31,3,-41,29,-4,24,23,-7,-20,-17,-11,8,-23,19,-24,-6, -16,5,-32,0,-2,21,8,-49,-8,15,30,-54,-3,-21,-61,-31,-42,-72,-20,19,38,8,6,-54,-49,-26,5,16,-16,17,6,-5, 1,2,-3,4,2,11,-127,-8,-88,-8,28,-52,1,-19,6,-45,4,-6,4,-26,18,1,-20,-66,-54,-18,1,16,-26,0,-29,-2, 
  /* [43][0][][] */ -65,-12,-50,1,-30,23,-7,20,-94,-75,6,50,0,-61,9,54,48,-36,-53,-15,-91,-16,-77,-95,-36,-44,-15,-17,-10,-52,-127,-8, 5,1,-2,-3,-17,-47,24,-25,-50,-69,-21,-119,-5,-7,-16,44,18,-21,24,-46,21,-27,-105,-7,-18,-56,-20,-25,22,7,-110,3, -7,-121,0,5,-16,46,51,-122,-21,-37,-39,23,-14,6,-23,-24,18,-36,36,33,23,-29,-66,-26,-3,-33,-7,19,-9,14,-40,4, 
  /* [44][0][][] */ -59,-32,-31,-1,-75,-57,-38,18,8,-7,-39,-2,2,-12,-31,-6,-21,-3,-29,-11,-75,-13,9,-29,-9,-16,13,26,-38,-46,-32,-2, -8,-29,18,0,-60,-30,-13,-17,-7,-10,-10,-56,-7,-82,-55,-2,-98,4,48,8,-3,-4,4,13,-6,-87,-3,5,-2,-7,-19,-4, -37,-48,-19,0,-97,-32,-17,-127,-47,53,-4,-41,-2,-41,-9,-60,-92,-42,18,-44,23,-5,24,-27,-18,38,-2,-9,11,-10,0,0, 
  /* [45][0][][] */ -38,-28,20,6,-80,-47,-28,-55,-7,35,1,-38,0,-105,-86,-27,-105,8,-13,-127,-49,-16,21,-17,-37,1,-2,-16,41,-7,-2,-1, -7,-66,4,0,-50,-34,15,-43,3,28,-32,0,-3,-1,-11,-55,-1,-75,-3,11,-20,-49,5,-7,13,-24,4,-61,-22,16,24,-1, -34,-24,-35,-8,-3,-14,-38,9,23,-55,-15,8,8,-87,-112,-52,29,-38,-35,-52,16,-52,-39,15,26,-17,14,-55,-95,16,33,-3, 
  /* [46][0][][] */ -20,10,-17,-2,4,6,-74,-2,15,-9,-27,11,6,-15,-17,-5,-10,15,12,-3,-12,10,1,-12,-21,-9,-5,-10,-10,-13,9,1, -1,-1,2,5,-39,-24,21,-45,13,-18,-34,-40,3,6,-32,-7,11,5,-4,-16,-20,-24,16,-15,-17,-39,-5,-23,-3,-1,8,3, -10,-43,17,-3,9,-27,15,-6,8,-10,-35,-19,-1,-25,29,-5,0,-127,-7,-32,17,-5,-19,10,-1,-30,2,-16,-33,5,-36,1, 
  /* [47][0][][] */ -11,17,-44,9,-82,22,-53,-82,20,28,73,-19,3,-75,25,-78,-89,-85,65,57,-9,-35,-60,-31,-27,-16,16,-43,-77,-99,27,-19, 0,-66,-59,-22,27,49,19,-115,-30,39,-48,-127,2,-8,13,-94,-15,-17,0,8,3,-30,-109,-2,-16,-42,-5,41,-36,35,-32,8, -52,-26,-92,-8,39,12,-39,47,-70,-46,-16,22,-15,-49,20,-50,110,-12,-50,51,-44,-78,-92,-42,-108,24,-9,-37,-75,-23,60,14, 
  /* [48][0][][] */ 25,-16,47,5,39,-50,11,-59,89,12,18,-92,1,-6,-11,-40,14,-17,10,-47,-41,-11,-30,-102,-63,-2,5,-68,-80,-25,-33,-12, -33,20,-32,5,23,24,20,-101,-7,-62,-44,-38,-5,-6,-9,-62,69,-17,18,-85,45,-61,-28,-37,-56,-49,-1,-3,-55,-41,75,14, -76,3,-127,-9,35,-19,-65,-33,-20,-48,-71,43,-14,-19,48,-29,86,18,1,-18,-80,-23,-97,23,30,-54,-11,-50,-77,-49,-9,5, 
  /* [49][0][][] */ -86,-43,-14,3,-12,-86,-61,-39,-61,-52,-66,-109,6,-19,-24,-14,-34,-32,3,27,-90,55,-127,33,-29,4,5,-67,21,-3,-18,3, -27,-17,6,0,10,42,37,-11,-29,-29,28,-64,2,-84,20,21,15,-24,-25,2,-26,-6,-20,-23,-75,-24,-17,-38,-11,26,-62,2, 25,-13,-10,-1,-25,37,-6,27,-28,-8,13,-7,-8,6,-29,24,14,-50,5,19,-1,-31,-34,8,-6,-10,-7,-13,1,11,-1,2, 
  /* [50][0][][] */ -79,-52,35,-5,24,-11,-61,1,-54,-46,23,-3,-1,-34,-16,11,12,-58,46,-86,-5,28,-72,35,-92,68,-22,31,-4,1,-60,-6, -60,-22,-2,-5,-28,7,-57,-115,4,-14,-12,-39,-11,-60,-13,8,54,-21,26,-24,17,40,0,-18,6,12,4,-2,-16,39,-56,-1, 46,-41,-25,-3,-14,-12,-45,5,-14,7,-41,37,-10,24,33,3,38,-39,-72,-79,22,-36,-48,-44,-13,-37,-8,-4,-127,-74,-93,-9, 
  /* [51][0][][] */ -5,-52,-38,5,-13,-46,-28,-3,-34,-1,-12,-12,0,-40,-12,-40,-55,5,-90,-42,-28,-64,19,14,-4,35,-9,-13,-12,12,17,-11, 40,-22,-58,-5,34,27,-13,-86,-20,28,4,-27,-9,36,-38,-44,-70,7,-14,-1,-11,-35,-11,13,-48,-9,-7,41,6,-53,-60,4, -8,-77,-35,-5,-71,-32,43,-46,6,-23,-55,36,-9,27,13,-18,41,-127,0,68,3,-41,-26,9,-6,-3,5,43,-54,-29,-39,0, 
  /* [52][0][][] */ 8,31,-61,1,4,-38,-126,11,-26,-31,18,33,8,-51,23,-5,-32,-2,-1,-51,-69,-13,-72,-57,-32,12,15,25,-39,-127,-10,7, 8,7,-18,8,45,-7,-58,-5,72,-89,5,-70,-5,-11,-21,-24,-6,8,-49,12,47,18,25,-35,22,-25,-6,-34,-16,-43,30,3, 17,13,26,-9,-18,-15,18,-76,0,6,-50,-78,7,-14,-90,-43,26,5,-27,0,24,-11,40,-93,-16,-12,13,32,-18,-46,6,-11, 
  /* [53][0][][] */ -104,1,-16,8,-24,-18,-36,-35,-106,-27,-39,-47,-1,-22,-65,-6,-32,6,-30,11,-34,68,-45,-14,-13,-9,-27,-92,4,-7,-5,0, 14,37,-11,-5,20,-51,-16,-40,-21,-18,-87,1,-19,20,-92,11,7,23,15,-9,-19,22,8,45,-18,14,-1,-22,-28,-27,-20,-2, 37,21,-43,1,-18,-49,9,35,32,-10,-80,12,-4,51,-39,9,34,-52,-30,16,-3,-76,11,11,13,34,-3,0,-13,1,-127,-6, 
  /* [54][0][][] */ 7,-77,-10,7,62,51,-32,3,21,-66,9,-7,-8,3,29,-16,-44,51,-56,-30,-124,-49,0,-68,-32,-11,-4,-12,14,-4,13,-7, -22,-20,-13,-7,-6,70,23,-29,37,-19,18,33,11,-20,-33,-25,25,6,-16,9,57,-12,4,-70,-26,-79,-5,-2,-33,47,-10,3, -47,-52,-45,-5,44,-38,14,13,-3,-18,10,-62,3,-120,-6,0,59,-43,-12,-24,51,-61,-127,-32,-64,-55,4,-7,-103,-55,-96,-5, 
  /* [55][0][][] */ -68,-13,21,2,-6,26,-17,19,-101,-35,-35,-26,-4,-100,-6,-6,-122,-3,-6,42,-11,-15,-15,-31,-21,-49,9,-7,9,36,-58,-6, 8,-24,17,-8,-35,-8,-30,-18,-4,-17,25,-27,-9,-86,-48,13,-18,-4,23,24,52,-14,-12,-20,-13,3,7,-23,24,43,-59,5, -35,-125,-56,-6,-12,-48,-49,-74,-19,-26,-3,-77,1,-32,-124,-90,33,-45,-17,-127,29,-99,14,-52,-55,26,-1,20,-68,-39,-1,-5, 
  /* [56][0][][] */ -126,-56,-68,-3,-58,1,89,-49,-19,-39,-103,8,13,-9,-40,83,90,-58,16,-23,-40,-20,-99,-107,8,-25,10,-9,32,-7,-118,-16, -53,-28,-62,8,-29,-58,57,-47,-41,-102,-33,-47,-14,-67,48,75,-50,1,63,97,-15,29,-76,2,20,-78,6,-72,13,7,-91,1, -65,-64,-34,-17,-65,22,127,-6,-44,-52,-32,-57,13,-13,-102,-30,14,-16,26,97,-5,-21,-62,-17,9,-51,-14,-87,24,-12,-19,7, 
  /* [57][0][][] */ -78,27,-11,-8,23,-9,31,-10,28,-40,-8,-11,-11,-28,19,-16,-66,-38,15,-36,18,54,14,-29,-35,-39,10,-11,7,-10,4,-3, -35,-66,-33,2,-75,-102,-52,43,-47,-24,-73,-80,-12,-25,25,-121,12,12,-66,-23,-10,69,14,-43,-23,-3,9,-9,-10,-46,23,1, 77,27,-14,-5,10,-24,-123,-19,-88,0,18,-17,0,11,-72,-127,-113,9,1,22,-6,-123,-16,-30,8,-10,-7,42,-15,11,17,0, 
  /* [58][0][][] */ -2,-44,-77,15,-29,-43,-23,-13,-7,13,-68,-55,-16,-127,-4,-21,-84,0,12,-52,-85,-77,-47,-95,-47,-58,-46,-39,-80,-33,-7,-42, -64,-11,-58,34,-35,-44,-67,-125,-71,40,-33,-97,13,-26,-28,-100,14,-16,-102,-35,-80,-59,-43,-35,-69,-77,-25,-61,-18,24,-22,-39, -42,-93,-39,-17,-60,-42,-58,2,-42,-56,-71,-86,-19,-84,-20,-47,-5,-49,-76,-52,-35,-62,37,-21,-90,7,-8,-37,-108,-35,-67,12, 
  /* [59][0][][] */ 30,-60,-10,-12,41,-23,-12,-59,-82,-4,-73,-83,4,-46,-56,-113,-60,33,40,-50,12,23,46,-12,-58,34,-1,20,0,-44,-95,-5, 0,24,-24,21,-1,33,-32,-66,-52,-43,-28,-127,-9,34,-48,5,-60,-85,-29,39,0,16,-40,-41,-3,-54,-2,47,11,-29,-23,6, -58,-35,-3,-15,4,-22,-31,-6,6,-10,-32,-12,5,-119,10,3,57,-94,-65,-30,-67,60,-93,30,51,16,9,-42,-3,-27,-80,-11, 
  /* [60][0][][] */ -26,-12,14,9,4,30,4,-8,24,-8,0,-127,6,11,23,-11,-29,-93,-80,-4,-107,-3,12,-72,-15,3,0,25,3,20,21,11, -76,-50,-5,3,16,-44,-2,-30,20,-41,13,-6,4,1,11,-79,2,-87,5,-4,-112,-64,-16,-105,10,-42,-17,18,-5,-20,-7,12, -52,-43,-13,4,-41,-46,-106,-105,-9,1,5,-94,8,-13,-8,-45,-12,-22,-6,-21,-127,-45,11,-7,6,25,22,47,-1,-114,-23,-1, 
  /* [61][0][][] */ 13,-67,8,-8,-107,-29,16,-12,54,-32,10,-7,4,18,24,1,-10,-97,46,-49,29,4,-13,-34,-60,30,12,-48,30,-16,-26,13, -18,-82,-60,8,-53,-77,4,-6,10,-24,-50,-34,-14,-8,-3,-16,-103,48,0,-15,18,-14,10,-127,-95,21,14,36,27,12,31,-13, -15,-64,7,-4,-42,-73,9,-62,41,-43,-33,-11,-15,-27,-45,-22,35,24,30,18,-17,12,14,-45,-5,-37,-7,-66,-6,-29,5,4, 
  /* [62][0][][] */ -15,-24,21,3,-38,17,-42,-12,-49,-2,-24,-127,3,-29,-4,-2,-44,-10,-2,-18,-79,-4,1,-49,-2,-15,5,3,25,-14,-32,-3, -44,-98,-9,5,-65,-59,-29,-79,-13,35,-10,-83,1,-22,-48,-25,-47,-44,9,-1,-62,6,13,-6,-3,-12,3,-34,6,-32,-8,4, -34,-6,9,-6,-56,6,0,-29,-33,-12,-21,-7,-11,13,-28,-57,-1,-19,-11,-13,7,-15,-38,-4,21,-2,-21,-50,-45,-12,-3,-5, 
  /* [63][0][][] */ -15,-36,6,-8,-17,51,2,25,-30,-18,2,-45,-3,38,-15,-91,-23,-14,-36,-47,-35,-44,-33,-33,7,-49,13,8,-12,-9,-76,-2, -39,-25,1,0,-34,10,7,-37,-7,-18,14,-127,-12,-6,-58,1,-84,-24,22,-3,-41,-3,-4,29,31,-86,-7,-48,28,1,-86,8, -58,-9,-25,2,-4,2,-7,-38,-84,-24,4,-79,2,-12,17,-26,-20,-23,25,-14,42,-14,-10,-27,-66,45,1,3,2,38,-14,2, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant11_scale = { 64, { 0.018087638542056084, 0.012935885228216648, 0.015173361636698246, 0.017307095229625702, 0.021839139983057976, 0.019675454124808311, 0.01903114840388298, 0.016128735616803169, 0.012007635086774826, 0.013524540700018406, 0.015940332785248756, 0.013555468991398811, 0.014692805707454681, 0.01613975502550602, 0.015232017263770103, 0.016984701156616211, 0.014757986180484295, 0.010659809224307537, 0.014570062048733234, 0.016361773014068604, 0.013328028842806816, 0.023922165855765343, 0.007483131717890501, 0.014768890105187893, 0.01841309480369091, 0.016874518245458603, 0.0029353564605116844, 0.017340045422315598, 0.01046244241297245, 0.0123987952247262, 0.015540444292128086, 0.016901152208447456, 0.015341603197157383, 0.022091571241617203, 0.0017581661231815815, 0.0096537899225950241, 0.023185962811112404, 0.01998763345181942, 0.01353009045124054, 0.0093960855156183243, 0.025631135329604149, 0.01753123477101326, 0.019650593400001526, 0.012706280685961246, 0.019594205543398857, 0.016870558261871338, 0.028121115639805794, 0.0094252079725265503, 0.01033657044172287, 0.016879454255104065, 0.013134010136127472, 0.016672808676958084, 0.01301492378115654, 0.013978081755340099, 0.013568663969635963, 0.015898376703262329, 0.0096180932596325874, 0.01340477354824543, 0.0024613796267658472, 0.012853971682488918, 0.015657247975468636, 0.014353392645716667, 0.020389111712574959, 0.016947811469435692, } };
const TfArray<64, int> quant11_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 1, 20, 40, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 20, 1, 16, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[4] = { 1, 1, 10, 16, };
const TfArray<1, int> tensor_dimension14 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 10, 1, 32, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data16[4] = { 1, 1, 5, 32, };
const TfArray<1, int> tensor_dimension16 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data17[4] = { 1, 5, 1, 64, };
const TfArray<1, int> tensor_dimension17 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,1,20,40 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0038449754938483238, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,1,20,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.032638270407915115, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,20,1,16 } };
const TfArray<1, float> quant20_scale = { 1, { 0.032638270407915115, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,10,1,16 } };
const TfArray<1, float> quant21_scale = { 1, { 0.032638270407915115, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,10,16 } };
const TfArray<1, float> quant22_scale = { 1, { 0.032638270407915115, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,10,32 } };
const TfArray<1, float> quant23_scale = { 1, { 0.049362115561962128, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,10,1,32 } };
const TfArray<1, float> quant24_scale = { 1, { 0.049362115561962128, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,5,1,32 } };
const TfArray<1, float> quant25_scale = { 1, { 0.049362115561962128, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,1,5,32 } };
const TfArray<1, float> quant26_scale = { 1, { 0.049362115561962128, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,1,5,64 } };
const TfArray<1, float> quant27_scale = { 1, { 0.077213943004608154, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,5,1,64 } };
const TfArray<1, float> quant28_scale = { 1, { 0.077213943004608154, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,1,64 } };
const TfArray<1, float> quant29_scale = { 1, { 0.077213943004608154, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,192 } };
const TfArray<1, float> quant30_scale = { 1, { 0.077213943004608154, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<2, int> tensor_dimension31 = { 2, { 1,64 } };
const TfArray<1, float> quant31_scale = { 1, { 0.12995800375938416, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<2, int> tensor_dimension32 = { 2, { 1,12 } };
const TfArray<1, float> quant32_scale = { 1, { 0.52270621061325073, } };
const TfArray<1, int> quant32_zero = { 1, { 46 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<2, int> tensor_dimension33 = { 2, { 1,12 } };
const TfArray<1, float> quant33_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,12 } };
const TfArray<1, int> outputs0 = { 1, { 18 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 18,9,2 } };
const TfArray<1, int> outputs1 = { 1, { 19 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 19,13 } };
const TfArray<1, int> outputs2 = { 1, { 20 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 20 } };
const TfArray<1, int> outputs3 = { 1, { 21 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 21,14 } };
const TfArray<1, int> outputs4 = { 1, { 22 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 22,10,3 } };
const TfArray<1, int> outputs5 = { 1, { 23 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 23,15 } };
const TfArray<1, int> outputs6 = { 1, { 24 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 24 } };
const TfArray<1, int> outputs7 = { 1, { 25 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 25,16 } };
const TfArray<1, int> outputs8 = { 1, { 26 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 26,11,4 } };
const TfArray<1, int> outputs9 = { 1, { 27 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 27,17 } };
const TfArray<1, int> outputs10 = { 1, { 28 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 28 } };
const TfArray<1, int> outputs11 = { 1, { 29 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 29,1 } };
const TfArray<1, int> outputs12 = { 1, { 30 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 30,7,5 } };
const TfArray<1, int> outputs13 = { 1, { 31 } };
const TfLiteFullyConnectedParams opdata14 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs14 = { 3, { 31,8,6 } };
const TfArray<1, int> outputs14 = { 1, { 32 } };
const TfLiteSoftmaxParams opdata15 = { 1 };
const TfArray<1, int> inputs15 = { 1, { 32 } };
const TfArray<1, int> outputs15 = { 1, { 33 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension0, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1920, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension21, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension23, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension25, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension27, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension29, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension32, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension33, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 34;
  for(size_t i = 0; i < 34; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 16; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 16; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  33, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 16; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
